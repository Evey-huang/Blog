{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6974ddb0953597b845d10c3aec9016f9ed161fbb","modified":1516781463000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1516780592000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1516780592000},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516781313000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1516780592000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1516780592000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1516780592000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1516780592000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1516780592000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1516780592000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1516780592000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1516780592000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1516780592000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1516780592000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1516780592000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1516780592000},{"_id":"themes/next/_config.yml","hash":"5b8adcda03115ba556b447a0bfd3a16985fded7a","modified":1513652062000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1516780592000},{"_id":"source/_posts/Ng-Tung-Shan.md","hash":"08f927b6991978a5d0070077ed239caac1db0571","modified":1516705419000},{"_id":"source/_posts/Typora.md","hash":"e37c361f4e57e97a68cb69524a7ebc201acabd9e","modified":1516705419000},{"_id":"source/_posts/danlian.md","hash":"989f91bfbf182aa9d5f1cf4a5676f0d75548f614","modified":1516705419000},{"_id":"source/_posts/eleValidatePackage.md","hash":"809b66d77513cf5adf84cde16ac1fe6e4e632b78","modified":1516791124000},{"_id":"source/_posts/cailan.md","hash":"a517bd17a3ec1f910414d794d2bbb92f8ec3a9c5","modified":1516705419000},{"_id":"source/_posts/elemeValidate.md","hash":"d57df549b1e125f8e77c6ff560aa56958a27322a","modified":1516790099000},{"_id":"source/_posts/es6.md","hash":"0f61541840af965d0b91a00f139e33fbc70708c1","modified":1516705419000},{"_id":"source/_posts/eyi.md","hash":"7d0355ed0f20e0b0c4465f0a51c09f3db85fad7d","modified":1516705419000},{"_id":"source/_posts/github1.md","hash":"096ea65a61b0380fc464984c2571ef9891006e01","modified":1516705419000},{"_id":"source/_posts/jenkins.md","hash":"48e83aedaa294cd4e4f9381b66fdadb5f42fa881","modified":1516705419000},{"_id":"source/_posts/kanjian.md","hash":"3ca016e4e4d215e9187d561d885c73b3a68a2325","modified":1516705419000},{"_id":"source/_posts/maokong.md","hash":"8b7efc622c948b9368e70e04f649dc620d978983","modified":1516705419000},{"_id":"source/_posts/newyears.md","hash":"c58a7aabafc7dcd9d372a58cdfb9a03626fc317a","modified":1516705419000},{"_id":"source/_posts/regexp.md","hash":"84d39a08e34ceb4159484500df936d53942c819c","modified":1516782768000},{"_id":"source/_posts/regexp1.md","hash":"96418bbf10d00cdd233ca53c06519c03027e0e8e","modified":1516781531000},{"_id":"source/_posts/submodules.md","hash":"7252857d416eae7305c61739fceefa2a5a3c1f98","modified":1517392263000},{"_id":"source/_posts/unit-test.md","hash":"31bc6e1902fe0e2eb21be24ce1b9751d27b9307d","modified":1516705419000},{"_id":"source/_posts/unit.md","hash":"11d977896019a712d24013e2ab0aeb7c6c6674c5","modified":1516705419000},{"_id":"source/_posts/vue-start.md","hash":"c9490710586d0766ce4f6e7ae86040ce5cf313dd","modified":1516705419000},{"_id":"source/_posts/vuelidate.md","hash":"ac0b04621e246e613004d94265e4eb9e7eca6447","modified":1517037888000},{"_id":"source/_posts/web.md","hash":"ce8f092f179955f0cd54806eae78deca01f616e1","modified":1516705419000},{"_id":"source/_posts/xmind.md","hash":"a117b277a2e4d94e3bb0d1732ff4d94a944e2276","modified":1516705419000},{"_id":"source/_posts/webpack.md","hash":"49593dc75ce226fe9e5cf82a0f21dd4955686d06","modified":1516705419000},{"_id":"source/about/index.md","hash":"9fdd0fde9fdca7b106943b1c9f66cb88bd94d603","modified":1516705419000},{"_id":"source/categories/index.md","hash":"9a8b563dba4fd9b95d0a7ad77f0a6d9dcccd6866","modified":1516705419000},{"_id":"source/tags/index.md","hash":"fd3c088cda02c2e6ce6a97aceb497f717fdda828","modified":1516705419000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1516780592000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1516780592000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1516780592000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516780592000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516780592000},{"_id":"themes/next/.git/config","hash":"ca83ce520f770c3104c997d323b9f293dd920073","modified":1516780592000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516780529000},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1516780592000},{"_id":"themes/next/.git/index","hash":"3e36ee82a9effce94e9c41cc9603c72a500d5781","modified":1516782495000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1516780592000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1516780592000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1516780592000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1516780592000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1516780592000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1516780592000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1516780592000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1516780592000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1516780592000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1516780592000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1516780592000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1516780592000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1516780592000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1516780592000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1516780592000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1516780592000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1516780592000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1516780592000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1516780592000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1516780592000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1516780592000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1516780592000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1516780592000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1516780592000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1516780592000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1516780592000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1516780592000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1516780592000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1516780592000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516780529000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1516780529000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516780529000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1516780529000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516780529000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1516780529000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516780529000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1516780529000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1516780529000},{"_id":"themes/next/.git/logs/HEAD","hash":"88e62eea7688a9a1e84d5644433c1f2e1c1da148","modified":1516780592000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1516780529000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516780592000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516780592000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1516780592000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1516780592000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1516780592000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1516780592000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1516780592000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1516780592000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1516780592000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1516780592000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1516780592000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1516780592000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1516780592000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1516780592000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1516780592000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1516780592000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1516780592000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1516780592000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1516780592000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1516780592000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1516780592000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1516780592000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1516780592000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1516780592000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1516780592000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1516780592000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1516780592000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1516780592000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1516780592000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1516780592000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1516780592000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1516780592000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1516780592000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1516780592000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1516780592000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516780592000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516780592000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516780592000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516780592000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516780592000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516780592000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516780592000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516780592000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516780592000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516780592000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516780592000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516780592000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516780592000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516780592000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516780592000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516780592000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516780592000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516780592000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516780592000},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1516780592000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1516780592000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1516780592000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1516780592000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1516780592000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1516780592000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1516780592000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1516780592000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1516780592000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1516780592000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1516780592000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516780592000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1516780592000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1516780592000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1516780592000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1516780592000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1516780592000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1516780592000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1516780592000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1516780592000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1516780592000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1516780592000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1516780592000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1516780592000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1516780592000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516780592000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516780592000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516780592000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516780592000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516780592000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516780592000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516780592000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516780592000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516780592000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516780592000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516780592000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1516780592000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1516780592000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1516780592000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1516780592000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1516780592000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516780592000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1516780592000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516780592000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516780592000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516780592000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516780592000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516780592000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516780592000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516780592000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"88e62eea7688a9a1e84d5644433c1f2e1c1da148","modified":1516780592000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1516780592000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1516780592000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1516780592000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1516780592000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516780592000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516780592000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516780592000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516780592000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516780592000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"88e62eea7688a9a1e84d5644433c1f2e1c1da148","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1516780592000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516780592000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516780592000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516780592000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516780592000},{"_id":"themes/next/.git/objects/pack/pack-b3621f5b1f9c7eb52dec31dfee022d10affb66da.idx","hash":"11e87b702abf41a83a6b599a6514300e29310706","modified":1516780592000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516780592000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516780592000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516780592000},{"_id":"themes/next/.git/objects/pack/pack-b3621f5b1f9c7eb52dec31dfee022d10affb66da.pack","hash":"1372d73d4fe3574ea35b41b305150b62829cb1a2","modified":1516780592000},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1517306809000},{"_id":"public/content.json","hash":"5957bdf7081147e62dfe5845a56fa4eeb8e111d2","modified":1517392399746},{"_id":"public/about/index.html","hash":"690b530386258d84497b1ac14f9dc1fda929f502","modified":1517392399952},{"_id":"public/categories/index.html","hash":"22b2c4d154b9b7c9d9f5acf85b1432ba80cd735a","modified":1517392399953},{"_id":"public/tags/index.html","hash":"df4e5e8c148a7553d54f4a4da6e41832be9f5191","modified":1517392399953},{"_id":"public/2018/01/24/submodules/index.html","hash":"be6dd8fd6a481f93437d281158355970ab0d5be9","modified":1517392399959},{"_id":"public/2017/12/14/cailan/index.html","hash":"328ee73d3404bdb1d38d141a807f9c7d0d7ae93c","modified":1517392399959},{"_id":"public/archives/index.html","hash":"a817a319a19288d09f07dc05426b1ae5ee6b1a1c","modified":1517392399963},{"_id":"public/archives/page/2/index.html","hash":"e7732df6dfd7eb56fd1064c703aec16a4f83318f","modified":1517392399963},{"_id":"public/archives/page/3/index.html","hash":"81466a0a1e18ce7b98db17dd9bde0ec2cde707e3","modified":1517392399953},{"_id":"public/archives/2017/index.html","hash":"3cf1f0399103974d110110fc53f9ee7bb8443b75","modified":1517392399963},{"_id":"public/archives/2017/page/2/index.html","hash":"1c3023b0053475b8f08800f8bfe8f4704eeb8b36","modified":1517392399953},{"_id":"public/archives/2017/11/index.html","hash":"a4a0ce48d0ef48b252105f9d4ed945b9527bb738","modified":1517392399953},{"_id":"public/archives/2017/12/index.html","hash":"9a18cd1b4cb70bf8eefd7aef97635b1f883e44cb","modified":1517392399963},{"_id":"public/archives/2017/12/page/2/index.html","hash":"cfeb724adf39a2e33edf4fc61432f8a8fb95f81c","modified":1517392399953},{"_id":"public/archives/2018/index.html","hash":"9ba30bbbdad7979dfdee2239218964055015bbac","modified":1517392399953},{"_id":"public/archives/2018/01/index.html","hash":"4a47bbd8a1c165c51d7245002279a93b73bc3d94","modified":1517392399953},{"_id":"public/categories/教程/index.html","hash":"a1955467ac7a50de530c51151eab39a6854d7ff6","modified":1517392399953},{"_id":"public/categories/玩/index.html","hash":"f79edf02912fbc5ce213cb50e2a95f771009420a","modified":1517392399953},{"_id":"public/categories/读书/index.html","hash":"635b0800ca978f98cc75563a388cbea4db90367d","modified":1517392399953},{"_id":"public/categories/validate/index.html","hash":"23e1f017c5fc1d546a345b43db4efadf2707dd5e","modified":1517392399953},{"_id":"public/categories/单元测试/index.html","hash":"f1f79f51945893c80cedb5e0506a255ee0580641","modified":1517392399953},{"_id":"public/categories/护肤/index.html","hash":"3f28efe3ae725ec5251a8c65e03b9ba70a2a08f6","modified":1517392399953},{"_id":"public/categories/总结/index.html","hash":"8ecab70e01f0bf55a75419a777db46a72220b593","modified":1517392399953},{"_id":"public/categories/JS/index.html","hash":"c610fc68ccb9d3ce78904790c72aeed7231dfa6e","modified":1517392399953},{"_id":"public/tags/Typora/index.html","hash":"4bf3489a57b93afe6e55472841190ef6e4f2d949","modified":1517392399953},{"_id":"public/tags/markdown/index.html","hash":"1a8388d3fe544a1b9b58d516f79e86928db635b2","modified":1517392399953},{"_id":"public/tags/登山/index.html","hash":"0cdcf7b60e04eecdc1833ac376a34d9a4b1e3c5a","modified":1517392399954},{"_id":"public/tags/梧桐山/index.html","hash":"c38ac503b3b838e4d3dc95d763147053034849c0","modified":1517392399954},{"_id":"public/tags/深圳最高山/index.html","hash":"8fa01a480ffa67cb30f1531fafc14ecfde9124f2","modified":1517392399954},{"_id":"public/tags/单恋/index.html","hash":"5f6970993ee1342062faa4b22ea4cdebc01207aa","modified":1517392399957},{"_id":"public/tags/东野圭吾/index.html","hash":"7bc39f6a599ba49c11d532e602b05c0982f69589","modified":1517392399957},{"_id":"public/tags/element-ui/index.html","hash":"ed5c88248d173590f4e1bf0717eab2502c1a144f","modified":1517392399957},{"_id":"public/tags/封装/index.html","hash":"4d7a0a967ab5112bbcfa3f2d5fca73646c1186db","modified":1517392399957},{"_id":"public/tags/表单校验/index.html","hash":"e8f08486de38e9bde4a62506fe5938775bfeec0a","modified":1517392399957},{"_id":"public/tags/蔡澜/index.html","hash":"1441447b51700c2137eee567083cb4437054257c","modified":1517392399957},{"_id":"public/tags/读后感/index.html","hash":"b32da051b231a605646eb20c0c0168f7a858ffd1","modified":1517392399957},{"_id":"public/tags/element/index.html","hash":"f7bbd485383d5a4b10b1b962ba9cae51a4f61517","modified":1517392399957},{"_id":"public/tags/表单验证/index.html","hash":"cc3bdb7d5bcf06817f9e677d190a7e590a90eabb","modified":1517392399957},{"_id":"public/tags/ES6/index.html","hash":"94a75a058759d7a1906d4662dea0166cfaf307de","modified":1517392399957},{"_id":"public/tags/单元测试/index.html","hash":"3064cf4a3f137bedee945ce3402ffb6b2e92e4ee","modified":1517392399958},{"_id":"public/tags/恶意/index.html","hash":"74a0d9fdfec04c8ff576e7e035b702a8d5bb47a5","modified":1517392399958},{"_id":"public/tags/github/index.html","hash":"a9858cc56fabdb3363e3cb1b6be58a985d6f78d8","modified":1517392399958},{"_id":"public/tags/jenkins/index.html","hash":"cd58830eb1283190e3c795185586b25bf293f3ce","modified":1517392399958},{"_id":"public/tags/持续集成/index.html","hash":"fabe2b1bce7e5debfa345fa66c052831ff2768f5","modified":1517392399958},{"_id":"public/tags/自动化测试/index.html","hash":"d1de075ae494fceb3e0f4dc0572c1c75d9db9be6","modified":1517392399958},{"_id":"public/tags/读书/index.html","hash":"90d17e59631aa27743c4e42e29ffb248d3034cf5","modified":1517392399958},{"_id":"public/tags/柴静/index.html","hash":"cbed1b186db2192e69ea04c2d7b4b430795d4d44","modified":1517392399958},{"_id":"public/tags/毛孔/index.html","hash":"219174cf2f6c799349d2e7749231b23af26d75ac","modified":1517392399958},{"_id":"public/tags/护肤/index.html","hash":"2e4fdef009e247c5f9b9c4b779e18ecdd4eb4d0a","modified":1517392399958},{"_id":"public/tags/2017/index.html","hash":"7754256d33c31897b4bd29d0cbb9103e68c1a8ae","modified":1517392399958},{"_id":"public/tags/正则表达式/index.html","hash":"c89f35619ecfcfea3737430a627e0347774563e0","modified":1517392399958},{"_id":"public/tags/正则基本使用/index.html","hash":"c9ab80f2eec8395eff14d89ae3be2fdb2625a43f","modified":1517392399958},{"_id":"public/tags/unit-test/index.html","hash":"448d8b77268559ab2248e222986b3272bb23d260","modified":1517392399958},{"_id":"public/tags/karma/index.html","hash":"f465bfc19adc03a5d4a352f736448fa9d9db83c9","modified":1517392399958},{"_id":"public/tags/mocha/index.html","hash":"1bdea1553010e547c3ebe06f96642e81d3f65363","modified":1517392399958},{"_id":"public/tags/chai/index.html","hash":"c91ce3f8cf658975f2887a26cdfeccf9863937b5","modified":1517392399958},{"_id":"public/tags/vue-教程/index.html","hash":"1100d4cad43fe5d9884a6966c0507065460f6bbd","modified":1517392399958},{"_id":"public/tags/validate-表单验证插件/index.html","hash":"74436d98bb4420004bd820fe0690811176c0aafe","modified":1517392399958},{"_id":"public/tags/web前端/index.html","hash":"397bde0c39d85f45f5eda98cf9498782f0b85da6","modified":1517392399959},{"_id":"public/tags/xmind/index.html","hash":"a2842217c9416c0ee8b4f2ae4693cdd3802753f1","modified":1517392399959},{"_id":"public/tags/webpack/index.html","hash":"0df898b05732b41d413837cbfa0861db60ef4c29","modified":1517392399959},{"_id":"public/2018/01/24/eleValidatePackage/index.html","hash":"fa03cb306de18c138c85beb33267c80b2fb70202","modified":1517392399959},{"_id":"public/2018/01/20/elemeValidate/index.html","hash":"4969df98b836bb6dc1c880dc8d27eaa3d68e8dc7","modified":1517392399959},{"_id":"public/2018/01/20/es6/index.html","hash":"e90fbdcc4bde72f42389b8009efa5eb764cbae7c","modified":1517392399959},{"_id":"public/2018/01/12/danlian/index.html","hash":"62c43055504939f43571a7a739afc58d31529f57","modified":1517392399959},{"_id":"public/2018/01/04/maokong/index.html","hash":"4e89c1c0c0f328a3bc3ef07ad2a1802691177ee5","modified":1517392399959},{"_id":"public/2018/01/04/kanjian/index.html","hash":"c12e0444cbafd91c6c02d3a29f90dde8988dd267","modified":1517392399959},{"_id":"public/2017/12/29/webpack/index.html","hash":"01e9ee0d2837cba469fe60fe18f6e262d7f35e15","modified":1517392399959},{"_id":"public/2017/12/25/eyi/index.html","hash":"33d01c734ab25895da48b9b8fa164ffd4eb4bf31","modified":1517392399959},{"_id":"public/2017/12/20/jenkins/index.html","hash":"8526188d848f0f861874b8fbc4080b8b5467be1b","modified":1517392399959},{"_id":"public/2017/12/14/newyears/index.html","hash":"a094b993d9accf5753a8046e3955a317f9638b2f","modified":1517392399959},{"_id":"public/2017/12/12/vuelidate/index.html","hash":"15e710001e9f770e21a896cd6ef8b9551e9321e8","modified":1517392399959},{"_id":"public/2017/12/12/regexp1/index.html","hash":"67949a1c4956528427c024aaef9f0789e86113a8","modified":1517392399959},{"_id":"public/2017/12/12/regexp/index.html","hash":"e8b79bf9f5b16d8f93db3d1f740c942b8fb3afdf","modified":1517392399959},{"_id":"public/2017/12/12/xmind/index.html","hash":"e3b690b54c8f336ce861b69a5ae018085e1de199","modified":1517392399960},{"_id":"public/2017/12/12/web/index.html","hash":"103289c0af5d29ab8933d628e211df1bcb7c04e1","modified":1517392399961},{"_id":"public/2017/12/10/github1/index.html","hash":"9a0c765d3c7316e6abc437f940c0d390ad1ca36f","modified":1517392399962},{"_id":"public/2017/12/08/unit/index.html","hash":"18414aa264a1ca2ad5d55e07496236d06308a77b","modified":1517392399962},{"_id":"public/2017/12/06/unit-test/index.html","hash":"c83d209ff79f37bc2f5ee48d5e79d64c8677c8fa","modified":1517392399962},{"_id":"public/2017/12/04/Ng-Tung-Shan/index.html","hash":"a1bb1084dfe12d037f49a24ba9fe21e055f6dd95","modified":1517392399962},{"_id":"public/2017/12/04/vue-start/index.html","hash":"0ff627909c819162e000471d68b474ad2784b1da","modified":1517392399962},{"_id":"public/2017/11/30/Typora/index.html","hash":"643fc5e5a1e21df649b23c5d1a2daedac25b1b24","modified":1517392399962},{"_id":"public/index.html","hash":"508b3b749d776ffe8831c8f85a3ae6263d4e821f","modified":1517392399963},{"_id":"public/page/2/index.html","hash":"6ba3cd2a99714789eaaaa9d14575aeede1c71d38","modified":1517392399963},{"_id":"public/page/3/index.html","hash":"7aa8f2c233a6cd95fa4f52730918b6d3a804fb6a","modified":1517392399963},{"_id":"public/categories/git/index.html","hash":"8c41ec2bd62f0380baba8724c98af127bc71ef4f","modified":1517392399968},{"_id":"public/tags/git/index.html","hash":"08f0026b59499f2d1d8c3808b4a865f80edc5c14","modified":1517392399968},{"_id":"public/tags/submodule/index.html","hash":"59fa5920bbdaebefdf6c1792bb10cb62f60d5473","modified":1517392399968}],"Category":[{"name":"教程","_id":"cjcx18d0f0003flfyk8tcm82h"},{"name":"玩","_id":"cjcx18d0r0008flfylgt5qni7"},{"name":"读书","_id":"cjcx18d0x000dflfya4wjqkfj"},{"name":"validate","_id":"cjcx18d11000kflfykyr7uph2"},{"name":"单元测试","_id":"cjcx18d1e0012flfyikc4yjfb"},{"name":"护肤","_id":"cjcx18d1l001hflfy79etdhld"},{"name":"总结","_id":"cjcx18d1p001oflfycuejxm7t"},{"name":"JS","_id":"cjcx18d1r001tflfymzy2i3qg"},{"name":"git","_id":"cjd2w72n70000qswuaom3lwyl"}],"Data":[],"Page":[{"title":"关于这个可爱的女孩子","date":"2017-12-04T06:32:39.000Z","_content":"\n#### 关于她\n\n`泪点低`\n\n1. 听国歌会`哭`！\n2. 看电视会`哭`！！\n3. 看书会`哭`！！！\n4. 自己天马行空乱想会`哭`！！！！\n5. …..\n6. 但我还是很`坚强`\n\n`喜欢吃`\n\n酸甜苦辣最不喜欢吃苦还有肥肉，虽然吃吃吃但我还是很`瘦`\n\n`Eason小迷妹`\n\n`喜欢睡`\n\n鞭炮都轰不醒，叫我起床我妈都能生气，后面直接放弃我，嘤嘤嘤\n\n![GIF](http://p1cjg886l.bkt.clouddn.com/about2.gif)\n\n#### 目前她\n\n- 在一家小厂当前端开发实习生\n- 在折腾博客\n- 在与前端做斗争，从入门到放弃这条路已经走得熟门熟路\n\n#### 联系她\n\n- WeChat: TU17_seven \n- Github：https://github.com/Evey-huang\n\n#### 爆照！！\n\n这么可爱的小仙女怎么可以没照片对吧\n\n![JPEG](http://p1cjg886l.bkt.clouddn.com/about.jpeg)\n\n我有迷到你吗\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/about3.jpg)\n\n","source":"about/index.md","raw":"---\ntitle: 关于这个可爱的女孩子\ndate: 2017-12-04 14:32:39\n---\n\n#### 关于她\n\n`泪点低`\n\n1. 听国歌会`哭`！\n2. 看电视会`哭`！！\n3. 看书会`哭`！！！\n4. 自己天马行空乱想会`哭`！！！！\n5. …..\n6. 但我还是很`坚强`\n\n`喜欢吃`\n\n酸甜苦辣最不喜欢吃苦还有肥肉，虽然吃吃吃但我还是很`瘦`\n\n`Eason小迷妹`\n\n`喜欢睡`\n\n鞭炮都轰不醒，叫我起床我妈都能生气，后面直接放弃我，嘤嘤嘤\n\n![GIF](http://p1cjg886l.bkt.clouddn.com/about2.gif)\n\n#### 目前她\n\n- 在一家小厂当前端开发实习生\n- 在折腾博客\n- 在与前端做斗争，从入门到放弃这条路已经走得熟门熟路\n\n#### 联系她\n\n- WeChat: TU17_seven \n- Github：https://github.com/Evey-huang\n\n#### 爆照！！\n\n这么可爱的小仙女怎么可以没照片对吧\n\n![JPEG](http://p1cjg886l.bkt.clouddn.com/about.jpeg)\n\n我有迷到你吗\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/about3.jpg)\n\n","updated":"2018-01-23T11:03:39.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjcx18d080001flfy03esnjfe","content":"<h4 id=\"关于她\"><a href=\"#关于她\" class=\"headerlink\" title=\"关于她\"></a>关于她</h4><p><code>泪点低</code></p>\n<ol>\n<li>听国歌会<code>哭</code>！</li>\n<li>看电视会<code>哭</code>！！</li>\n<li>看书会<code>哭</code>！！！</li>\n<li>自己天马行空乱想会<code>哭</code>！！！！</li>\n<li>…..</li>\n<li>但我还是很<code>坚强</code></li>\n</ol>\n<p><code>喜欢吃</code></p>\n<p>酸甜苦辣最不喜欢吃苦还有肥肉，虽然吃吃吃但我还是很<code>瘦</code></p>\n<p><code>Eason小迷妹</code></p>\n<p><code>喜欢睡</code></p>\n<p>鞭炮都轰不醒，叫我起床我妈都能生气，后面直接放弃我，嘤嘤嘤</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about2.gif\" alt=\"GIF\"></p>\n<h4 id=\"目前她\"><a href=\"#目前她\" class=\"headerlink\" title=\"目前她\"></a>目前她</h4><ul>\n<li>在一家小厂当前端开发实习生</li>\n<li>在折腾博客</li>\n<li>在与前端做斗争，从入门到放弃这条路已经走得熟门熟路</li>\n</ul>\n<h4 id=\"联系她\"><a href=\"#联系她\" class=\"headerlink\" title=\"联系她\"></a>联系她</h4><ul>\n<li>WeChat: TU17_seven </li>\n<li>Github：<a href=\"https://github.com/Evey-huang\" target=\"_blank\" rel=\"noopener\">https://github.com/Evey-huang</a></li>\n</ul>\n<h4 id=\"爆照！！\"><a href=\"#爆照！！\" class=\"headerlink\" title=\"爆照！！\"></a>爆照！！</h4><p>这么可爱的小仙女怎么可以没照片对吧</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about.jpeg\" alt=\"JPEG\"></p>\n<p>我有迷到你吗</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about3.jpg\" alt=\"JPG\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于她\"><a href=\"#关于她\" class=\"headerlink\" title=\"关于她\"></a>关于她</h4><p><code>泪点低</code></p>\n<ol>\n<li>听国歌会<code>哭</code>！</li>\n<li>看电视会<code>哭</code>！！</li>\n<li>看书会<code>哭</code>！！！</li>\n<li>自己天马行空乱想会<code>哭</code>！！！！</li>\n<li>…..</li>\n<li>但我还是很<code>坚强</code></li>\n</ol>\n<p><code>喜欢吃</code></p>\n<p>酸甜苦辣最不喜欢吃苦还有肥肉，虽然吃吃吃但我还是很<code>瘦</code></p>\n<p><code>Eason小迷妹</code></p>\n<p><code>喜欢睡</code></p>\n<p>鞭炮都轰不醒，叫我起床我妈都能生气，后面直接放弃我，嘤嘤嘤</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about2.gif\" alt=\"GIF\"></p>\n<h4 id=\"目前她\"><a href=\"#目前她\" class=\"headerlink\" title=\"目前她\"></a>目前她</h4><ul>\n<li>在一家小厂当前端开发实习生</li>\n<li>在折腾博客</li>\n<li>在与前端做斗争，从入门到放弃这条路已经走得熟门熟路</li>\n</ul>\n<h4 id=\"联系她\"><a href=\"#联系她\" class=\"headerlink\" title=\"联系她\"></a>联系她</h4><ul>\n<li>WeChat: TU17_seven </li>\n<li>Github：<a href=\"https://github.com/Evey-huang\" target=\"_blank\" rel=\"noopener\">https://github.com/Evey-huang</a></li>\n</ul>\n<h4 id=\"爆照！！\"><a href=\"#爆照！！\" class=\"headerlink\" title=\"爆照！！\"></a>爆照！！</h4><p>这么可爱的小仙女怎么可以没照片对吧</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about.jpeg\" alt=\"JPEG\"></p>\n<p>我有迷到你吗</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/about3.jpg\" alt=\"JPG\"></p>\n"},{"title":"分类","date":"2017-12-09T03:37:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-12-09 11:37:07\ntype: \"categories\"\n---\n","updated":"2018-01-23T11:03:39.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjcx18d7b003uflfyz9whdsuz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-12-09T03:36:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-12-09 11:36:25\ntype: \"tags\"\n---\n","updated":"2018-01-23T11:03:39.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjcx18d7c003vflfyux8jem1w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Typora","date":"2017-11-30T01:42:22.000Z","_content":"\n## ![Typora](https://eveywongblog.files.wordpress.com/2017/10/typora.png)\n\n# 简介\n\n## Markdown\n\n[Markdown](http://zh.wikipedia.org/wiki/Markdown) 是一种轻量级的「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 *Word* 或 *Pages* 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了，减少了鼠标的点击。目前来看，支持 Markdown 语法的编辑器有很多，但他们的交互形式基本都是将「[编辑](http://www.iplaysoft.com/tag/%E7%BC%96%E8%BE%91)」和「预览」分离开来的，要么是直接左右排列编辑和预览窗口，要么是要在两种模式之间来回切换，以前刚接触的时候常常被搞晕。后面电脑换了Linux系统以后觉得编辑文件没有这么方便于是就想下个编辑器来用，找了很久觉得Typora这个编辑器很简洁大方深得小仙女的心于是立马下载来用。\n\n## Typora\n\nTypora(<https://typora.io/>)不同于以往的markdown编辑器在于它只使用一个窗口，却能优雅地实现同时将代码编辑与预览「一体化」结合起来，从而为用户带来更加流畅直观的「所见即所得的 Markdown 写作体验」。Typora 即时显示 Markdown 语法格式的能力被官方称之为 WYSIWYG （What You See Is What You Get）。虽然一开始用觉得有点麻烦甚至想弃坑，但是用久了习惯了就会发现很好用很方便。正式开始用Typora还是在接触gitbook以后，想要写文章才想起来原来我有个markdown编辑器，于是就开造啦~\n\n![Typora-GIF.gif](https://eveywongblog.files.wordpress.com/2017/10/typora-gif.gif)\n\n\n\n# 安装\n\n## 在Ubuntu下安装Typora\n\n按照下列命令依次输入即可成功安装Typora，很幸运没有出现BUG最讨厌的就是BUG了。\n\n安装成功以后找到Typora图标双击打开就可以用了，当然如果你很熟悉命令行模式那你也可以在命令行进行启动。\n\n```\n$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n$ sudo add-apt-repository 'deb https://typora.io linux/'\n$ sudo apt-get update\n$ sudo apt-get install typora\n```\n\n# 用法\n\nmarkdown啦当然用的markdown格式写咯","source":"_posts/Typora.md","raw":"---\ntitle: Typora\ndate: 2017-11-30 09:42:22\ntags: [Typora, markdown]\ncategories: 教程\n---\n\n## ![Typora](https://eveywongblog.files.wordpress.com/2017/10/typora.png)\n\n# 简介\n\n## Markdown\n\n[Markdown](http://zh.wikipedia.org/wiki/Markdown) 是一种轻量级的「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 *Word* 或 *Pages* 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了，减少了鼠标的点击。目前来看，支持 Markdown 语法的编辑器有很多，但他们的交互形式基本都是将「[编辑](http://www.iplaysoft.com/tag/%E7%BC%96%E8%BE%91)」和「预览」分离开来的，要么是直接左右排列编辑和预览窗口，要么是要在两种模式之间来回切换，以前刚接触的时候常常被搞晕。后面电脑换了Linux系统以后觉得编辑文件没有这么方便于是就想下个编辑器来用，找了很久觉得Typora这个编辑器很简洁大方深得小仙女的心于是立马下载来用。\n\n## Typora\n\nTypora(<https://typora.io/>)不同于以往的markdown编辑器在于它只使用一个窗口，却能优雅地实现同时将代码编辑与预览「一体化」结合起来，从而为用户带来更加流畅直观的「所见即所得的 Markdown 写作体验」。Typora 即时显示 Markdown 语法格式的能力被官方称之为 WYSIWYG （What You See Is What You Get）。虽然一开始用觉得有点麻烦甚至想弃坑，但是用久了习惯了就会发现很好用很方便。正式开始用Typora还是在接触gitbook以后，想要写文章才想起来原来我有个markdown编辑器，于是就开造啦~\n\n![Typora-GIF.gif](https://eveywongblog.files.wordpress.com/2017/10/typora-gif.gif)\n\n\n\n# 安装\n\n## 在Ubuntu下安装Typora\n\n按照下列命令依次输入即可成功安装Typora，很幸运没有出现BUG最讨厌的就是BUG了。\n\n安装成功以后找到Typora图标双击打开就可以用了，当然如果你很熟悉命令行模式那你也可以在命令行进行启动。\n\n```\n$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n$ sudo add-apt-repository 'deb https://typora.io linux/'\n$ sudo apt-get update\n$ sudo apt-get install typora\n```\n\n# 用法\n\nmarkdown啦当然用的markdown格式写咯","slug":"Typora","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d000000flfyduuaen48","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://eveywongblog.files.wordpress.com/2017/10/typora.png\" alt=\"Typora\"></h2><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p><a href=\"http://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">Markdown</a> 是一种轻量级的「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 <em>Word</em> 或 <em>Pages</em> 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了，减少了鼠标的点击。目前来看，支持 Markdown 语法的编辑器有很多，但他们的交互形式基本都是将「<a href=\"http://www.iplaysoft.com/tag/%E7%BC%96%E8%BE%91\" target=\"_blank\" rel=\"noopener\">编辑</a>」和「预览」分离开来的，要么是直接左右排列编辑和预览窗口，要么是要在两种模式之间来回切换，以前刚接触的时候常常被搞晕。后面电脑换了Linux系统以后觉得编辑文件没有这么方便于是就想下个编辑器来用，找了很久觉得Typora这个编辑器很简洁大方深得小仙女的心于是立马下载来用。</p>\n<h2 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h2><p>Typora(<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">https://typora.io/</a>)不同于以往的markdown编辑器在于它只使用一个窗口，却能优雅地实现同时将代码编辑与预览「一体化」结合起来，从而为用户带来更加流畅直观的「所见即所得的 Markdown 写作体验」。Typora 即时显示 Markdown 语法格式的能力被官方称之为 WYSIWYG （What You See Is What You Get）。虽然一开始用觉得有点麻烦甚至想弃坑，但是用久了习惯了就会发现很好用很方便。正式开始用Typora还是在接触gitbook以后，想要写文章才想起来原来我有个markdown编辑器，于是就开造啦~</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/10/typora-gif.gif\" alt=\"Typora-GIF.gif\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"在Ubuntu下安装Typora\"><a href=\"#在Ubuntu下安装Typora\" class=\"headerlink\" title=\"在Ubuntu下安装Typora\"></a>在Ubuntu下安装Typora</h2><p>按照下列命令依次输入即可成功安装Typora，很幸运没有出现BUG最讨厌的就是BUG了。</p>\n<p>安装成功以后找到Typora图标双击打开就可以用了，当然如果你很熟悉命令行模式那你也可以在命令行进行启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\">$ sudo add-apt-repository &apos;deb https://typora.io linux/&apos;</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>markdown啦当然用的markdown格式写咯</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://eveywongblog.files.wordpress.com/2017/10/typora.png\" alt=\"Typora\"></h2><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><p><a href=\"http://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">Markdown</a> 是一种轻量级的「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 <em>Word</em> 或 <em>Pages</em> 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了，减少了鼠标的点击。目前来看，支持 Markdown 语法的编辑器有很多，但他们的交互形式基本都是将「<a href=\"http://www.iplaysoft.com/tag/%E7%BC%96%E8%BE%91\" target=\"_blank\" rel=\"noopener\">编辑</a>」和「预览」分离开来的，要么是直接左右排列编辑和预览窗口，要么是要在两种模式之间来回切换，以前刚接触的时候常常被搞晕。后面电脑换了Linux系统以后觉得编辑文件没有这么方便于是就想下个编辑器来用，找了很久觉得Typora这个编辑器很简洁大方深得小仙女的心于是立马下载来用。</p>\n<h2 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h2><p>Typora(<a href=\"https://typora.io/\" target=\"_blank\" rel=\"noopener\">https://typora.io/</a>)不同于以往的markdown编辑器在于它只使用一个窗口，却能优雅地实现同时将代码编辑与预览「一体化」结合起来，从而为用户带来更加流畅直观的「所见即所得的 Markdown 写作体验」。Typora 即时显示 Markdown 语法格式的能力被官方称之为 WYSIWYG （What You See Is What You Get）。虽然一开始用觉得有点麻烦甚至想弃坑，但是用久了习惯了就会发现很好用很方便。正式开始用Typora还是在接触gitbook以后，想要写文章才想起来原来我有个markdown编辑器，于是就开造啦~</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/10/typora-gif.gif\" alt=\"Typora-GIF.gif\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"在Ubuntu下安装Typora\"><a href=\"#在Ubuntu下安装Typora\" class=\"headerlink\" title=\"在Ubuntu下安装Typora\"></a>在Ubuntu下安装Typora</h2><p>按照下列命令依次输入即可成功安装Typora，很幸运没有出现BUG最讨厌的就是BUG了。</p>\n<p>安装成功以后找到Typora图标双击打开就可以用了，当然如果你很熟悉命令行模式那你也可以在命令行进行启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\">$ sudo add-apt-repository &apos;deb https://typora.io linux/&apos;</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>markdown啦当然用的markdown格式写咯</p>\n"},{"title":"征服梧桐山","date":"2017-12-04T08:29:11.000Z","_content":"\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong1.jpg)\n\n# 出发\n\n7点多起床8点出门然后在老街集合，一起去吃了早餐，吃完去找了很久的公交站在差点找到的时候决定打车去，老街过去也不算远，这次去的是正门，没拍照人太多所以就不PO照了。如果想去后门的话可以从黄贝岭站坐公交去，比较近。大概十一点左右大部队全部集合完毕准备上山。\n\n> 路线1：老街出发坐公交车（这次去没有坐公交，目测2-5块）/打车60左右--正门\n>\n> 路线2：黄贝岭出发坐公交/打车--后门\n\n\n\n# 上山\n\n从泰山涧走山路上的山，没有选择走大路，山路比较难走但是风景也比较好看，一路上都有小溪，走到最高处的时候如果水多还可以看到瀑布。从泰山涧一直爬，爬到山顶跟大路交汇的地方然后顺着大路走到好汉坡就可以看到上大梧桐的山路了。大梧桐海拔最高，有900多米，所以一致决定征服最高峰。在下午四点钟左右登顶，欣赏一下美景。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong2.jpg)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong3.jpg)\n\n>- 尽量穿运动鞋，和舒适的衣服。这样没有这么累，看到一个小哥穿人字拖爬山我也是被惊到了。\n>- 能戴帽子最好，可以遮阳挡风。不然这么多护肤品白瞎了。\n>- 最好背双肩包，我背的挎包爬到抖的地方老是跑到前面来挡住视线，很影响发挥。\n>- 上山大概3-4个钟，走的快的话2个可能就OK了。\n\n\n\n# 下山\n\n四点钟左右登顶然后休息，四点多五点开始下山，七点左右才走到山脚下。真的肠子都悔青了好吗！！！快走到山脚才想起来走后门更近，简直想哭死在路上。下山真的很可怕好吗，天又黑又没指示牌，一直走一直走不知道什么时候才能到山脚，要不是我凭着一股意志力真的要瘫在路上回不来了。\n\n> - 登山棍还是很有必要的，特别是下山的时候！\n> - 零食适量就好，我们带了好多后面又是背回来了。\n> - 早点上山！早点上山！早点上山！重要的事情说三遍，我们快中午了才开始爬以至于下山的时候都7点天黑了，而且梧桐山没有路灯，死不死。\n> - 量力而行！量力而行！量力而行！重要的事情说三遍！就是死要登顶下山的时候腿痛得不行抖得不行，现在废了一样。\n> - 少喝水，梧桐山厕所巨少！巨少！巨少！\n\n\n\n# 总结\n\n近期不想做几件事：爬山、吃周黑鸭、吃烧烤（我有预感我要打脸，不过还是要立flag）","source":"_posts/Ng-Tung-Shan.md","raw":"---\ntitle: 征服梧桐山\ndate: 2017-12-04 16:29:11\ntags: [登山, 梧桐山, 深圳最高山]\ncategories: 玩\n---\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong1.jpg)\n\n# 出发\n\n7点多起床8点出门然后在老街集合，一起去吃了早餐，吃完去找了很久的公交站在差点找到的时候决定打车去，老街过去也不算远，这次去的是正门，没拍照人太多所以就不PO照了。如果想去后门的话可以从黄贝岭站坐公交去，比较近。大概十一点左右大部队全部集合完毕准备上山。\n\n> 路线1：老街出发坐公交车（这次去没有坐公交，目测2-5块）/打车60左右--正门\n>\n> 路线2：黄贝岭出发坐公交/打车--后门\n\n\n\n# 上山\n\n从泰山涧走山路上的山，没有选择走大路，山路比较难走但是风景也比较好看，一路上都有小溪，走到最高处的时候如果水多还可以看到瀑布。从泰山涧一直爬，爬到山顶跟大路交汇的地方然后顺着大路走到好汉坡就可以看到上大梧桐的山路了。大梧桐海拔最高，有900多米，所以一致决定征服最高峰。在下午四点钟左右登顶，欣赏一下美景。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong2.jpg)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/wutong3.jpg)\n\n>- 尽量穿运动鞋，和舒适的衣服。这样没有这么累，看到一个小哥穿人字拖爬山我也是被惊到了。\n>- 能戴帽子最好，可以遮阳挡风。不然这么多护肤品白瞎了。\n>- 最好背双肩包，我背的挎包爬到抖的地方老是跑到前面来挡住视线，很影响发挥。\n>- 上山大概3-4个钟，走的快的话2个可能就OK了。\n\n\n\n# 下山\n\n四点钟左右登顶然后休息，四点多五点开始下山，七点左右才走到山脚下。真的肠子都悔青了好吗！！！快走到山脚才想起来走后门更近，简直想哭死在路上。下山真的很可怕好吗，天又黑又没指示牌，一直走一直走不知道什么时候才能到山脚，要不是我凭着一股意志力真的要瘫在路上回不来了。\n\n> - 登山棍还是很有必要的，特别是下山的时候！\n> - 零食适量就好，我们带了好多后面又是背回来了。\n> - 早点上山！早点上山！早点上山！重要的事情说三遍，我们快中午了才开始爬以至于下山的时候都7点天黑了，而且梧桐山没有路灯，死不死。\n> - 量力而行！量力而行！量力而行！重要的事情说三遍！就是死要登顶下山的时候腿痛得不行抖得不行，现在废了一样。\n> - 少喝水，梧桐山厕所巨少！巨少！巨少！\n\n\n\n# 总结\n\n近期不想做几件事：爬山、吃周黑鸭、吃烧烤（我有预感我要打脸，不过还是要立flag）","slug":"Ng-Tung-Shan","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0b0002flfytoq7k9oh","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong1.jpg\" alt=\"PNG\"></p>\n<h1 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h1><p>7点多起床8点出门然后在老街集合，一起去吃了早餐，吃完去找了很久的公交站在差点找到的时候决定打车去，老街过去也不算远，这次去的是正门，没拍照人太多所以就不PO照了。如果想去后门的话可以从黄贝岭站坐公交去，比较近。大概十一点左右大部队全部集合完毕准备上山。</p>\n<blockquote>\n<p>路线1：老街出发坐公交车（这次去没有坐公交，目测2-5块）/打车60左右–正门</p>\n<p>路线2：黄贝岭出发坐公交/打车–后门</p>\n</blockquote>\n<h1 id=\"上山\"><a href=\"#上山\" class=\"headerlink\" title=\"上山\"></a>上山</h1><p>从泰山涧走山路上的山，没有选择走大路，山路比较难走但是风景也比较好看，一路上都有小溪，走到最高处的时候如果水多还可以看到瀑布。从泰山涧一直爬，爬到山顶跟大路交汇的地方然后顺着大路走到好汉坡就可以看到上大梧桐的山路了。大梧桐海拔最高，有900多米，所以一致决定征服最高峰。在下午四点钟左右登顶，欣赏一下美景。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong2.jpg\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong3.jpg\" alt=\"PNG\"></p>\n<blockquote>\n<ul>\n<li>尽量穿运动鞋，和舒适的衣服。这样没有这么累，看到一个小哥穿人字拖爬山我也是被惊到了。</li>\n<li>能戴帽子最好，可以遮阳挡风。不然这么多护肤品白瞎了。</li>\n<li>最好背双肩包，我背的挎包爬到抖的地方老是跑到前面来挡住视线，很影响发挥。</li>\n<li>上山大概3-4个钟，走的快的话2个可能就OK了。</li>\n</ul>\n</blockquote>\n<h1 id=\"下山\"><a href=\"#下山\" class=\"headerlink\" title=\"下山\"></a>下山</h1><p>四点钟左右登顶然后休息，四点多五点开始下山，七点左右才走到山脚下。真的肠子都悔青了好吗！！！快走到山脚才想起来走后门更近，简直想哭死在路上。下山真的很可怕好吗，天又黑又没指示牌，一直走一直走不知道什么时候才能到山脚，要不是我凭着一股意志力真的要瘫在路上回不来了。</p>\n<blockquote>\n<ul>\n<li>登山棍还是很有必要的，特别是下山的时候！</li>\n<li>零食适量就好，我们带了好多后面又是背回来了。</li>\n<li>早点上山！早点上山！早点上山！重要的事情说三遍，我们快中午了才开始爬以至于下山的时候都7点天黑了，而且梧桐山没有路灯，死不死。</li>\n<li>量力而行！量力而行！量力而行！重要的事情说三遍！就是死要登顶下山的时候腿痛得不行抖得不行，现在废了一样。</li>\n<li>少喝水，梧桐山厕所巨少！巨少！巨少！</li>\n</ul>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>近期不想做几件事：爬山、吃周黑鸭、吃烧烤（我有预感我要打脸，不过还是要立flag）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong1.jpg\" alt=\"PNG\"></p>\n<h1 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h1><p>7点多起床8点出门然后在老街集合，一起去吃了早餐，吃完去找了很久的公交站在差点找到的时候决定打车去，老街过去也不算远，这次去的是正门，没拍照人太多所以就不PO照了。如果想去后门的话可以从黄贝岭站坐公交去，比较近。大概十一点左右大部队全部集合完毕准备上山。</p>\n<blockquote>\n<p>路线1：老街出发坐公交车（这次去没有坐公交，目测2-5块）/打车60左右–正门</p>\n<p>路线2：黄贝岭出发坐公交/打车–后门</p>\n</blockquote>\n<h1 id=\"上山\"><a href=\"#上山\" class=\"headerlink\" title=\"上山\"></a>上山</h1><p>从泰山涧走山路上的山，没有选择走大路，山路比较难走但是风景也比较好看，一路上都有小溪，走到最高处的时候如果水多还可以看到瀑布。从泰山涧一直爬，爬到山顶跟大路交汇的地方然后顺着大路走到好汉坡就可以看到上大梧桐的山路了。大梧桐海拔最高，有900多米，所以一致决定征服最高峰。在下午四点钟左右登顶，欣赏一下美景。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong2.jpg\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/wutong3.jpg\" alt=\"PNG\"></p>\n<blockquote>\n<ul>\n<li>尽量穿运动鞋，和舒适的衣服。这样没有这么累，看到一个小哥穿人字拖爬山我也是被惊到了。</li>\n<li>能戴帽子最好，可以遮阳挡风。不然这么多护肤品白瞎了。</li>\n<li>最好背双肩包，我背的挎包爬到抖的地方老是跑到前面来挡住视线，很影响发挥。</li>\n<li>上山大概3-4个钟，走的快的话2个可能就OK了。</li>\n</ul>\n</blockquote>\n<h1 id=\"下山\"><a href=\"#下山\" class=\"headerlink\" title=\"下山\"></a>下山</h1><p>四点钟左右登顶然后休息，四点多五点开始下山，七点左右才走到山脚下。真的肠子都悔青了好吗！！！快走到山脚才想起来走后门更近，简直想哭死在路上。下山真的很可怕好吗，天又黑又没指示牌，一直走一直走不知道什么时候才能到山脚，要不是我凭着一股意志力真的要瘫在路上回不来了。</p>\n<blockquote>\n<ul>\n<li>登山棍还是很有必要的，特别是下山的时候！</li>\n<li>零食适量就好，我们带了好多后面又是背回来了。</li>\n<li>早点上山！早点上山！早点上山！重要的事情说三遍，我们快中午了才开始爬以至于下山的时候都7点天黑了，而且梧桐山没有路灯，死不死。</li>\n<li>量力而行！量力而行！量力而行！重要的事情说三遍！就是死要登顶下山的时候腿痛得不行抖得不行，现在废了一样。</li>\n<li>少喝水，梧桐山厕所巨少！巨少！巨少！</li>\n</ul>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>近期不想做几件事：爬山、吃周黑鸭、吃烧烤（我有预感我要打脸，不过还是要立flag）</p>\n"},{"title":"《单恋》","date":"2018-01-12T02:11:50.000Z","_content":"\n![单恋人物图](http://p1cjg886l.bkt.clouddn.com/danlian.png)\n\n《单恋》主要是围绕一个杀人事件展开调查最后牵出因性别而烦恼的一个特殊人群。\n\n## 故事梗概\n\n中尾功辅、西胁哲朗、高仓理沙子还有日浦美月都是大学时代美式橄榄球队的成员，中尾毕业以后入赘高城家，因为有一个内心是男人的母亲而研究起性别差异并与嵯峨正道创办了金童剧团来为因性别而烦恼的人群解决身份户籍问题。日浦美月患有性别识别障碍，时而是女性时而是男性，顺应父母做一个正常的女孩子而相亲结婚并且生下一个孩子，但是想做男人的愿望特别强烈所以还是离开了家，去寻找自己想要的生活。\n\n在佐伯香里的介绍下进入了猫眼工作，户仓明雄跟踪佐伯香里，为了保护香里日浦形影不离地保护她，户仓明雄很生气调查到日浦其实是个女人，为了羞辱她进而对她施暴，还好中尾及时赶到施暴未遂，中尾因为愤怒杀死了户仓明雄。\n\n美月想要顶替中尾去自首，但是很舍不得昔日的好友，便决定先去见一见哲朗他们，这一次的相见引发了大家的想追寻真想的好奇心，哲朗和理沙子围绕美月杀人以及美月失踪展开了调查然后慢慢接近了真相，原来中尾和美月的背后有着一群因为性别而烦恼的人，他们有些是生来是女儿身但是却有着男儿心，有些事男人的身体却想以女人的身份去生活，想真正以异性的身份去生活户籍是个大问题，中尾和嵯峨就致力于帮助他们过上自己想要的生活而努力。想要保护好友而终止调查的时候却发现事情失去了控制。\n\n若因杀人事件而使这一特殊人群曝光，之前所做的努力就会付之东流，这时已经身怀而哲朗、理沙子还有早田也以自己的方式帮助着他们。\n\n结局的最后是一切尘埃落定，因为中尾的牺牲那个特殊人群得以平静地生活。\n\n\n\n## 想说几句\n\n对于性别的解释，书中用麦比乌斯环来做比喻。“<u>如果是一张普通的纸，那么反面永远是反面，正面永远是正面，两者没有交会的机会。但若换成麦比乌斯环，正面却会在不知不觉间成了反面。正反面紧密相连。这个世界上所有的人都在这麦比乌斯环上，不存在完全的女人，也不存在完全的男人。</u>”\n\n这其中的代表就是日浦美月，美月说自己的内心是个男人，至少在丈夫和外人面前是，但是在中尾交往的时候，和哲朗发生关系的时候，拍成人礼照片的时候透露出来的都是不折不扣的女人，她的父亲、中尾和哲朗都是这样坚信，但是和理沙子在一起的时候，理沙子却说感受到她是以男人方式存在的，最后她和中尾一体同心，她既是中尾也是日浦，十多年的单恋修成正果，是很幸福的事。\n\n后面理沙子和哲朗还是分开了，关于大学最后一场比赛输了，理由是因为哲朗左眼视力不好导致丢球，但是这个原因他从来没有对大家说过，只有中尾和早田知道，甚至是最亲密的伴侣他的妻子理沙子，他也不曾开口，后面理沙子说的“<u>你是不是决定到死也不让我进入你的世界，也就是所谓的男人的世界？那个世界有多夸张？是圣地？女人进入那个世界，对男人来说有那么严重吗？</u>”，太过鲜明地划分男人和女人的世界了。理沙子和哲朗这一对校园恋人走进婚姻八年最终还是分手收场，让我想起最近火热的电影《前任3》，讲的是错过了就回不去了，但我是想为什么在这个错过形成之前不把问题解决了呢，恋人间不是应该多沟通吗，有什么就讲清楚然后再一起去解决，而不是一直等对方开口，最后这样错过。\n\n最后很意外的是早田帮助哲朗他们逃跑，一开始觉得早田很在意他的工作虽不会给他们添麻烦但也不至于帮忙，但是最后的举动让人很意外，原来近端锋不仅要接好传过来的球，为了保护四分位还需要参与防守。\n\n第一次看关于性别探讨的的书籍，类似影视作品也看过，但是第一次对性别有个深刻的认识还是看完《单恋》以后。我想我们不应该为了性别而去烦恼，因为自己有个异性的心就一定要变成异性去生活，就应该像书中的相川冬纪和末永睦美一样，男的女的好的坏的都是自己，应该学会去接受自己。\n\n我就是我，不一样的烟火。","source":"_posts/danlian.md","raw":"---\ntitle: 《单恋》\ndate: 2018-01-12 10:11:50\ntags: [单恋, 东野圭吾]\ncategories: 读书\n---\n\n![单恋人物图](http://p1cjg886l.bkt.clouddn.com/danlian.png)\n\n《单恋》主要是围绕一个杀人事件展开调查最后牵出因性别而烦恼的一个特殊人群。\n\n## 故事梗概\n\n中尾功辅、西胁哲朗、高仓理沙子还有日浦美月都是大学时代美式橄榄球队的成员，中尾毕业以后入赘高城家，因为有一个内心是男人的母亲而研究起性别差异并与嵯峨正道创办了金童剧团来为因性别而烦恼的人群解决身份户籍问题。日浦美月患有性别识别障碍，时而是女性时而是男性，顺应父母做一个正常的女孩子而相亲结婚并且生下一个孩子，但是想做男人的愿望特别强烈所以还是离开了家，去寻找自己想要的生活。\n\n在佐伯香里的介绍下进入了猫眼工作，户仓明雄跟踪佐伯香里，为了保护香里日浦形影不离地保护她，户仓明雄很生气调查到日浦其实是个女人，为了羞辱她进而对她施暴，还好中尾及时赶到施暴未遂，中尾因为愤怒杀死了户仓明雄。\n\n美月想要顶替中尾去自首，但是很舍不得昔日的好友，便决定先去见一见哲朗他们，这一次的相见引发了大家的想追寻真想的好奇心，哲朗和理沙子围绕美月杀人以及美月失踪展开了调查然后慢慢接近了真相，原来中尾和美月的背后有着一群因为性别而烦恼的人，他们有些是生来是女儿身但是却有着男儿心，有些事男人的身体却想以女人的身份去生活，想真正以异性的身份去生活户籍是个大问题，中尾和嵯峨就致力于帮助他们过上自己想要的生活而努力。想要保护好友而终止调查的时候却发现事情失去了控制。\n\n若因杀人事件而使这一特殊人群曝光，之前所做的努力就会付之东流，这时已经身怀而哲朗、理沙子还有早田也以自己的方式帮助着他们。\n\n结局的最后是一切尘埃落定，因为中尾的牺牲那个特殊人群得以平静地生活。\n\n\n\n## 想说几句\n\n对于性别的解释，书中用麦比乌斯环来做比喻。“<u>如果是一张普通的纸，那么反面永远是反面，正面永远是正面，两者没有交会的机会。但若换成麦比乌斯环，正面却会在不知不觉间成了反面。正反面紧密相连。这个世界上所有的人都在这麦比乌斯环上，不存在完全的女人，也不存在完全的男人。</u>”\n\n这其中的代表就是日浦美月，美月说自己的内心是个男人，至少在丈夫和外人面前是，但是在中尾交往的时候，和哲朗发生关系的时候，拍成人礼照片的时候透露出来的都是不折不扣的女人，她的父亲、中尾和哲朗都是这样坚信，但是和理沙子在一起的时候，理沙子却说感受到她是以男人方式存在的，最后她和中尾一体同心，她既是中尾也是日浦，十多年的单恋修成正果，是很幸福的事。\n\n后面理沙子和哲朗还是分开了，关于大学最后一场比赛输了，理由是因为哲朗左眼视力不好导致丢球，但是这个原因他从来没有对大家说过，只有中尾和早田知道，甚至是最亲密的伴侣他的妻子理沙子，他也不曾开口，后面理沙子说的“<u>你是不是决定到死也不让我进入你的世界，也就是所谓的男人的世界？那个世界有多夸张？是圣地？女人进入那个世界，对男人来说有那么严重吗？</u>”，太过鲜明地划分男人和女人的世界了。理沙子和哲朗这一对校园恋人走进婚姻八年最终还是分手收场，让我想起最近火热的电影《前任3》，讲的是错过了就回不去了，但我是想为什么在这个错过形成之前不把问题解决了呢，恋人间不是应该多沟通吗，有什么就讲清楚然后再一起去解决，而不是一直等对方开口，最后这样错过。\n\n最后很意外的是早田帮助哲朗他们逃跑，一开始觉得早田很在意他的工作虽不会给他们添麻烦但也不至于帮忙，但是最后的举动让人很意外，原来近端锋不仅要接好传过来的球，为了保护四分位还需要参与防守。\n\n第一次看关于性别探讨的的书籍，类似影视作品也看过，但是第一次对性别有个深刻的认识还是看完《单恋》以后。我想我们不应该为了性别而去烦恼，因为自己有个异性的心就一定要变成异性去生活，就应该像书中的相川冬纪和末永睦美一样，男的女的好的坏的都是自己，应该学会去接受自己。\n\n我就是我，不一样的烟火。","slug":"danlian","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0h0005flfyjstm1dqf","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/danlian.png\" alt=\"单恋人物图\"></p>\n<p>《单恋》主要是围绕一个杀人事件展开调查最后牵出因性别而烦恼的一个特殊人群。</p>\n<h2 id=\"故事梗概\"><a href=\"#故事梗概\" class=\"headerlink\" title=\"故事梗概\"></a>故事梗概</h2><p>中尾功辅、西胁哲朗、高仓理沙子还有日浦美月都是大学时代美式橄榄球队的成员，中尾毕业以后入赘高城家，因为有一个内心是男人的母亲而研究起性别差异并与嵯峨正道创办了金童剧团来为因性别而烦恼的人群解决身份户籍问题。日浦美月患有性别识别障碍，时而是女性时而是男性，顺应父母做一个正常的女孩子而相亲结婚并且生下一个孩子，但是想做男人的愿望特别强烈所以还是离开了家，去寻找自己想要的生活。</p>\n<p>在佐伯香里的介绍下进入了猫眼工作，户仓明雄跟踪佐伯香里，为了保护香里日浦形影不离地保护她，户仓明雄很生气调查到日浦其实是个女人，为了羞辱她进而对她施暴，还好中尾及时赶到施暴未遂，中尾因为愤怒杀死了户仓明雄。</p>\n<p>美月想要顶替中尾去自首，但是很舍不得昔日的好友，便决定先去见一见哲朗他们，这一次的相见引发了大家的想追寻真想的好奇心，哲朗和理沙子围绕美月杀人以及美月失踪展开了调查然后慢慢接近了真相，原来中尾和美月的背后有着一群因为性别而烦恼的人，他们有些是生来是女儿身但是却有着男儿心，有些事男人的身体却想以女人的身份去生活，想真正以异性的身份去生活户籍是个大问题，中尾和嵯峨就致力于帮助他们过上自己想要的生活而努力。想要保护好友而终止调查的时候却发现事情失去了控制。</p>\n<p>若因杀人事件而使这一特殊人群曝光，之前所做的努力就会付之东流，这时已经身怀而哲朗、理沙子还有早田也以自己的方式帮助着他们。</p>\n<p>结局的最后是一切尘埃落定，因为中尾的牺牲那个特殊人群得以平静地生活。</p>\n<h2 id=\"想说几句\"><a href=\"#想说几句\" class=\"headerlink\" title=\"想说几句\"></a>想说几句</h2><p>对于性别的解释，书中用麦比乌斯环来做比喻。“<u>如果是一张普通的纸，那么反面永远是反面，正面永远是正面，两者没有交会的机会。但若换成麦比乌斯环，正面却会在不知不觉间成了反面。正反面紧密相连。这个世界上所有的人都在这麦比乌斯环上，不存在完全的女人，也不存在完全的男人。</u>”</p>\n<p>这其中的代表就是日浦美月，美月说自己的内心是个男人，至少在丈夫和外人面前是，但是在中尾交往的时候，和哲朗发生关系的时候，拍成人礼照片的时候透露出来的都是不折不扣的女人，她的父亲、中尾和哲朗都是这样坚信，但是和理沙子在一起的时候，理沙子却说感受到她是以男人方式存在的，最后她和中尾一体同心，她既是中尾也是日浦，十多年的单恋修成正果，是很幸福的事。</p>\n<p>后面理沙子和哲朗还是分开了，关于大学最后一场比赛输了，理由是因为哲朗左眼视力不好导致丢球，但是这个原因他从来没有对大家说过，只有中尾和早田知道，甚至是最亲密的伴侣他的妻子理沙子，他也不曾开口，后面理沙子说的“<u>你是不是决定到死也不让我进入你的世界，也就是所谓的男人的世界？那个世界有多夸张？是圣地？女人进入那个世界，对男人来说有那么严重吗？</u>”，太过鲜明地划分男人和女人的世界了。理沙子和哲朗这一对校园恋人走进婚姻八年最终还是分手收场，让我想起最近火热的电影《前任3》，讲的是错过了就回不去了，但我是想为什么在这个错过形成之前不把问题解决了呢，恋人间不是应该多沟通吗，有什么就讲清楚然后再一起去解决，而不是一直等对方开口，最后这样错过。</p>\n<p>最后很意外的是早田帮助哲朗他们逃跑，一开始觉得早田很在意他的工作虽不会给他们添麻烦但也不至于帮忙，但是最后的举动让人很意外，原来近端锋不仅要接好传过来的球，为了保护四分位还需要参与防守。</p>\n<p>第一次看关于性别探讨的的书籍，类似影视作品也看过，但是第一次对性别有个深刻的认识还是看完《单恋》以后。我想我们不应该为了性别而去烦恼，因为自己有个异性的心就一定要变成异性去生活，就应该像书中的相川冬纪和末永睦美一样，男的女的好的坏的都是自己，应该学会去接受自己。</p>\n<p>我就是我，不一样的烟火。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/danlian.png\" alt=\"单恋人物图\"></p>\n<p>《单恋》主要是围绕一个杀人事件展开调查最后牵出因性别而烦恼的一个特殊人群。</p>\n<h2 id=\"故事梗概\"><a href=\"#故事梗概\" class=\"headerlink\" title=\"故事梗概\"></a>故事梗概</h2><p>中尾功辅、西胁哲朗、高仓理沙子还有日浦美月都是大学时代美式橄榄球队的成员，中尾毕业以后入赘高城家，因为有一个内心是男人的母亲而研究起性别差异并与嵯峨正道创办了金童剧团来为因性别而烦恼的人群解决身份户籍问题。日浦美月患有性别识别障碍，时而是女性时而是男性，顺应父母做一个正常的女孩子而相亲结婚并且生下一个孩子，但是想做男人的愿望特别强烈所以还是离开了家，去寻找自己想要的生活。</p>\n<p>在佐伯香里的介绍下进入了猫眼工作，户仓明雄跟踪佐伯香里，为了保护香里日浦形影不离地保护她，户仓明雄很生气调查到日浦其实是个女人，为了羞辱她进而对她施暴，还好中尾及时赶到施暴未遂，中尾因为愤怒杀死了户仓明雄。</p>\n<p>美月想要顶替中尾去自首，但是很舍不得昔日的好友，便决定先去见一见哲朗他们，这一次的相见引发了大家的想追寻真想的好奇心，哲朗和理沙子围绕美月杀人以及美月失踪展开了调查然后慢慢接近了真相，原来中尾和美月的背后有着一群因为性别而烦恼的人，他们有些是生来是女儿身但是却有着男儿心，有些事男人的身体却想以女人的身份去生活，想真正以异性的身份去生活户籍是个大问题，中尾和嵯峨就致力于帮助他们过上自己想要的生活而努力。想要保护好友而终止调查的时候却发现事情失去了控制。</p>\n<p>若因杀人事件而使这一特殊人群曝光，之前所做的努力就会付之东流，这时已经身怀而哲朗、理沙子还有早田也以自己的方式帮助着他们。</p>\n<p>结局的最后是一切尘埃落定，因为中尾的牺牲那个特殊人群得以平静地生活。</p>\n<h2 id=\"想说几句\"><a href=\"#想说几句\" class=\"headerlink\" title=\"想说几句\"></a>想说几句</h2><p>对于性别的解释，书中用麦比乌斯环来做比喻。“<u>如果是一张普通的纸，那么反面永远是反面，正面永远是正面，两者没有交会的机会。但若换成麦比乌斯环，正面却会在不知不觉间成了反面。正反面紧密相连。这个世界上所有的人都在这麦比乌斯环上，不存在完全的女人，也不存在完全的男人。</u>”</p>\n<p>这其中的代表就是日浦美月，美月说自己的内心是个男人，至少在丈夫和外人面前是，但是在中尾交往的时候，和哲朗发生关系的时候，拍成人礼照片的时候透露出来的都是不折不扣的女人，她的父亲、中尾和哲朗都是这样坚信，但是和理沙子在一起的时候，理沙子却说感受到她是以男人方式存在的，最后她和中尾一体同心，她既是中尾也是日浦，十多年的单恋修成正果，是很幸福的事。</p>\n<p>后面理沙子和哲朗还是分开了，关于大学最后一场比赛输了，理由是因为哲朗左眼视力不好导致丢球，但是这个原因他从来没有对大家说过，只有中尾和早田知道，甚至是最亲密的伴侣他的妻子理沙子，他也不曾开口，后面理沙子说的“<u>你是不是决定到死也不让我进入你的世界，也就是所谓的男人的世界？那个世界有多夸张？是圣地？女人进入那个世界，对男人来说有那么严重吗？</u>”，太过鲜明地划分男人和女人的世界了。理沙子和哲朗这一对校园恋人走进婚姻八年最终还是分手收场，让我想起最近火热的电影《前任3》，讲的是错过了就回不去了，但我是想为什么在这个错过形成之前不把问题解决了呢，恋人间不是应该多沟通吗，有什么就讲清楚然后再一起去解决，而不是一直等对方开口，最后这样错过。</p>\n<p>最后很意外的是早田帮助哲朗他们逃跑，一开始觉得早田很在意他的工作虽不会给他们添麻烦但也不至于帮忙，但是最后的举动让人很意外，原来近端锋不仅要接好传过来的球，为了保护四分位还需要参与防守。</p>\n<p>第一次看关于性别探讨的的书籍，类似影视作品也看过，但是第一次对性别有个深刻的认识还是看完《单恋》以后。我想我们不应该为了性别而去烦恼，因为自己有个异性的心就一定要变成异性去生活，就应该像书中的相川冬纪和末永睦美一样，男的女的好的坏的都是自己，应该学会去接受自己。</p>\n<p>我就是我，不一样的烟火。</p>\n"},{"title":"基于element-ui表单验证方法封装","date":"2018-01-24T10:33:38.000Z","_content":"\n## 背景\n\n最近在做重构项目的表单验证，发现element-ui自带的表单校验内置方法太少了，不能满足日常工作需求，如果需要校验的表单多，就会做很多重复的工作，所以把校验方法包括自定义校验规则封装起来便于调用。\n\n\n\n## 使用\n\n主要文件有两个，`eleValidate.vue`和`valiate.js`\n\n### eleValidate.vue\n\n封装后的loginRules只需要`传参`就可以了。\n\n```html\n<template>\n  <div class=\"login-container\">\n    <el-form autoComplete=\"on\" :model=\"loginForm\" :rules=\"loginRules\" ref=\"loginForm\" label-position=\"left\" label-width=\"0px\"\n      class=\"card-box login-form\">\n\n      <el-form-item prop=\"username\">\n        <el-input name=\"username\" type=\"text\" v-model=\"loginForm.username\" autoComplete=\"on\" placeholder=\"用户名\"/>\n      </el-form-item>\n\n      <el-form-item prop=\"password\">\n        <el-input name=\"password\" v-model=\"loginForm.password\" autoComplete=\"on\"\n          placeholder=\"密码\"></el-input>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button type=\"primary\" style=\"width:100%;\">\n          登陆\n        </el-button>\n      </el-form-item>\n\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport validate from '../validate'\n\nexport default {\n  name: 'login',\n  data () {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      loginRules: {\n        username: [\n          { validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' },\n          { max: 50, message: '用户名最多为50个字符！', trigger: 'blur' }\n        ],\n        password: [\n          { validator: validate('passWord', '密码由字母、数字及下划线组成。', '密码不能为空！'), trigger: 'blur' },\n          { max: 25, message: '密码最多为25个字符！', trigger: 'blur' }\n        ]\n      }\n    }\n  }\n}\n</script>\n<style>\n  .login-container {\n    width: 300px;\n    margin: 0 auto;\n    margin-top: 100px;\n  }\n</style>\n\n```\n\n`validate`既可以传参数名也可以传正则表达式，例如：\n\n```\n{ validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' }\n或者\n{ validator: validate('/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' }\n```\n\n\n\n### validate.js\n\n这个文件主要写自定义正则表达式和处理传进来的参数。\n\n```\nreg = pattern[reg] ? pattern[reg] : reg\n```\n\n这句话的作用就是既可以传定义好的参数名，也可以直接传正则表达式，传进来以后自动检测是否存在（已经定义）\n\n```js\n/**\n * 正则库\n */\nconst pattern = {\n  name: /^([\\w-]+|[\\u4e00-\\u9fa5]+)$/, // 用户名校验\n  passWord: /^\\w+$/ // 密码校验\n}\n\n/**\n * 内置规则\n * @param {String} reg - {pattern}中预定义正则名称 or 自定义正则\n * @param {String} msg1 - 正则校验不通过提示\n * @param {String} msg2 - 值为空时提示（可不填）\n */\nconst validate = (reg, msg1, msg2) => {\n  return (rule, value, callback) => {\n    if (!value) {\n      if (!msg2) {\n        callback()\n      }\n      callback(new Error(msg2))\n    }\n    reg = pattern[reg] ? pattern[reg] : reg\n    if (!reg.test(value)) {\n      callback(new Error(msg1))\n    } else {\n      callback()\n    }\n  }\n}\n\nexport default validate\n\n```\n\n\n\n## 传送门\n\n源码戳[这里](https://github.com/Evey-huang/ele-validate)\n\n## 小结\n\n封装以后确实很好用，省了很多工作，就是内置的规则很少，写正则麻烦。\n\n![抱头痛哭](http://p1cjg886l.bkt.clouddn.com/cry.jpg)","source":"_posts/eleValidatePackage.md","raw":"---\ntitle: 基于element-ui表单验证方法封装\ndate: 2018-01-24 18:33:38\ntags: [element-ui, 封装, 表单校验]\ncategories: validate\n---\n\n## 背景\n\n最近在做重构项目的表单验证，发现element-ui自带的表单校验内置方法太少了，不能满足日常工作需求，如果需要校验的表单多，就会做很多重复的工作，所以把校验方法包括自定义校验规则封装起来便于调用。\n\n\n\n## 使用\n\n主要文件有两个，`eleValidate.vue`和`valiate.js`\n\n### eleValidate.vue\n\n封装后的loginRules只需要`传参`就可以了。\n\n```html\n<template>\n  <div class=\"login-container\">\n    <el-form autoComplete=\"on\" :model=\"loginForm\" :rules=\"loginRules\" ref=\"loginForm\" label-position=\"left\" label-width=\"0px\"\n      class=\"card-box login-form\">\n\n      <el-form-item prop=\"username\">\n        <el-input name=\"username\" type=\"text\" v-model=\"loginForm.username\" autoComplete=\"on\" placeholder=\"用户名\"/>\n      </el-form-item>\n\n      <el-form-item prop=\"password\">\n        <el-input name=\"password\" v-model=\"loginForm.password\" autoComplete=\"on\"\n          placeholder=\"密码\"></el-input>\n      </el-form-item>\n\n      <el-form-item>\n        <el-button type=\"primary\" style=\"width:100%;\">\n          登陆\n        </el-button>\n      </el-form-item>\n\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport validate from '../validate'\n\nexport default {\n  name: 'login',\n  data () {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      loginRules: {\n        username: [\n          { validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' },\n          { max: 50, message: '用户名最多为50个字符！', trigger: 'blur' }\n        ],\n        password: [\n          { validator: validate('passWord', '密码由字母、数字及下划线组成。', '密码不能为空！'), trigger: 'blur' },\n          { max: 25, message: '密码最多为25个字符！', trigger: 'blur' }\n        ]\n      }\n    }\n  }\n}\n</script>\n<style>\n  .login-container {\n    width: 300px;\n    margin: 0 auto;\n    margin-top: 100px;\n  }\n</style>\n\n```\n\n`validate`既可以传参数名也可以传正则表达式，例如：\n\n```\n{ validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' }\n或者\n{ validator: validate('/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' }\n```\n\n\n\n### validate.js\n\n这个文件主要写自定义正则表达式和处理传进来的参数。\n\n```\nreg = pattern[reg] ? pattern[reg] : reg\n```\n\n这句话的作用就是既可以传定义好的参数名，也可以直接传正则表达式，传进来以后自动检测是否存在（已经定义）\n\n```js\n/**\n * 正则库\n */\nconst pattern = {\n  name: /^([\\w-]+|[\\u4e00-\\u9fa5]+)$/, // 用户名校验\n  passWord: /^\\w+$/ // 密码校验\n}\n\n/**\n * 内置规则\n * @param {String} reg - {pattern}中预定义正则名称 or 自定义正则\n * @param {String} msg1 - 正则校验不通过提示\n * @param {String} msg2 - 值为空时提示（可不填）\n */\nconst validate = (reg, msg1, msg2) => {\n  return (rule, value, callback) => {\n    if (!value) {\n      if (!msg2) {\n        callback()\n      }\n      callback(new Error(msg2))\n    }\n    reg = pattern[reg] ? pattern[reg] : reg\n    if (!reg.test(value)) {\n      callback(new Error(msg1))\n    } else {\n      callback()\n    }\n  }\n}\n\nexport default validate\n\n```\n\n\n\n## 传送门\n\n源码戳[这里](https://github.com/Evey-huang/ele-validate)\n\n## 小结\n\n封装以后确实很好用，省了很多工作，就是内置的规则很少，写正则麻烦。\n\n![抱头痛哭](http://p1cjg886l.bkt.clouddn.com/cry.jpg)","slug":"eleValidatePackage","published":1,"updated":"2018-01-24T10:52:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0p0006flfyz17k64fg","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近在做重构项目的表单验证，发现element-ui自带的表单校验内置方法太少了，不能满足日常工作需求，如果需要校验的表单多，就会做很多重复的工作，所以把校验方法包括自定义校验规则封装起来便于调用。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>主要文件有两个，<code>eleValidate.vue</code>和<code>valiate.js</code></p>\n<h3 id=\"eleValidate-vue\"><a href=\"#eleValidate-vue\" class=\"headerlink\" title=\"eleValidate.vue\"></a>eleValidate.vue</h3><p>封装后的loginRules只需要<code>传参</code>就可以了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-form</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"loginForm\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"loginRules\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loginForm\"</span> <span class=\"attr\">label-position</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">label-width</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"card-box login-form\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"loginForm.username\"</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"loginForm.password\"</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%;\"</span>&gt;</span></span><br><span class=\"line\">          登陆</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">import validate from '../validate'</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  name: 'login',</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      loginForm: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        username: '',</span></span><br><span class=\"line\"><span class=\"undefined\">        password: ''</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      loginRules: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        username: [</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; max: 50, message: '用户名最多为50个字符！', trigger: 'blur' &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ],</span></span><br><span class=\"line\"><span class=\"undefined\">        password: [</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; validator: validate('passWord', '密码由字母、数字及下划线组成。', '密码不能为空！'), trigger: 'blur' &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; max: 25, message: '密码最多为25个字符！', trigger: 'blur' &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  .login-container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin-top: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>validate</code>既可以传参数名也可以传正则表达式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; validator: validate(&apos;name&apos;, &apos;用户名由字母、数字、下划线以及短横线组成。&apos;, &apos;用户名不能为空！&apos;), trigger: &apos;blur&apos; &#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">&#123; validator: validate(&apos;/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/&apos;, &apos;用户名由字母、数字、下划线以及短横线组成。&apos;, &apos;用户名不能为空！&apos;), trigger: &apos;blur&apos; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"validate-js\"><a href=\"#validate-js\" class=\"headerlink\" title=\"validate.js\"></a>validate.js</h3><p>这个文件主要写自定义正则表达式和处理传进来的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = pattern[reg] ? pattern[reg] : reg</span><br></pre></td></tr></table></figure>\n<p>这句话的作用就是既可以传定义好的参数名，也可以直接传正则表达式，传进来以后自动检测是否存在（已经定义）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正则库</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = &#123;</span><br><span class=\"line\">  name: <span class=\"regexp\">/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/</span>, <span class=\"comment\">// 用户名校验</span></span><br><span class=\"line\">  passWord: <span class=\"regexp\">/^\\w+$/</span> <span class=\"comment\">// 密码校验</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 内置规则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; reg - &#123;pattern&#125;中预定义正则名称 or 自定义正则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; msg1 - 正则校验不通过提示</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; msg2 - 值为空时提示（可不填）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> validate = <span class=\"function\">(<span class=\"params\">reg, msg1, msg2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!msg2) &#123;</span><br><span class=\"line\">        callback()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(msg2))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reg = pattern[reg] ? pattern[reg] : reg</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!reg.test(value)) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(msg1))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> validate</span><br></pre></td></tr></table></figure>\n<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><p>源码戳<a href=\"https://github.com/Evey-huang/ele-validate\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>封装以后确实很好用，省了很多工作，就是内置的规则很少，写正则麻烦。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/cry.jpg\" alt=\"抱头痛哭\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近在做重构项目的表单验证，发现element-ui自带的表单校验内置方法太少了，不能满足日常工作需求，如果需要校验的表单多，就会做很多重复的工作，所以把校验方法包括自定义校验规则封装起来便于调用。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>主要文件有两个，<code>eleValidate.vue</code>和<code>valiate.js</code></p>\n<h3 id=\"eleValidate-vue\"><a href=\"#eleValidate-vue\" class=\"headerlink\" title=\"eleValidate.vue\"></a>eleValidate.vue</h3><p>封装后的loginRules只需要<code>传参</code>就可以了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login-container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-form</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"loginForm\"</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"loginRules\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loginForm\"</span> <span class=\"attr\">label-position</span>=<span class=\"string\">\"left\"</span> <span class=\"attr\">label-width</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"card-box login-form\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"loginForm.username\"</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"用户名\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"loginForm.password\"</span> <span class=\"attr\">autoComplete</span>=<span class=\"string\">\"on\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">\"密码\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%;\"</span>&gt;</span></span><br><span class=\"line\">          登陆</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">import validate from '../validate'</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">export default &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  name: 'login',</span></span><br><span class=\"line\"><span class=\"undefined\">  data () &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    return &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      loginForm: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        username: '',</span></span><br><span class=\"line\"><span class=\"undefined\">        password: ''</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">      loginRules: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        username: [</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; validator: validate('name', '用户名由字母、数字、下划线以及短横线组成。', '用户名不能为空！'), trigger: 'blur' &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; max: 50, message: '用户名最多为50个字符！', trigger: 'blur' &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ],</span></span><br><span class=\"line\"><span class=\"undefined\">        password: [</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; validator: validate('passWord', '密码由字母、数字及下划线组成。', '密码不能为空！'), trigger: 'blur' &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">          &#123; max: 25, message: '密码最多为25个字符！', trigger: 'blur' &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        ]</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  .login-container &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    width: 300px;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"undefined\">    margin-top: 100px;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>validate</code>既可以传参数名也可以传正则表达式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; validator: validate(&apos;name&apos;, &apos;用户名由字母、数字、下划线以及短横线组成。&apos;, &apos;用户名不能为空！&apos;), trigger: &apos;blur&apos; &#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\">&#123; validator: validate(&apos;/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/&apos;, &apos;用户名由字母、数字、下划线以及短横线组成。&apos;, &apos;用户名不能为空！&apos;), trigger: &apos;blur&apos; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"validate-js\"><a href=\"#validate-js\" class=\"headerlink\" title=\"validate.js\"></a>validate.js</h3><p>这个文件主要写自定义正则表达式和处理传进来的参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = pattern[reg] ? pattern[reg] : reg</span><br></pre></td></tr></table></figure>\n<p>这句话的作用就是既可以传定义好的参数名，也可以直接传正则表达式，传进来以后自动检测是否存在（已经定义）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 正则库</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pattern = &#123;</span><br><span class=\"line\">  name: <span class=\"regexp\">/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/</span>, <span class=\"comment\">// 用户名校验</span></span><br><span class=\"line\">  passWord: <span class=\"regexp\">/^\\w+$/</span> <span class=\"comment\">// 密码校验</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 内置规则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; reg - &#123;pattern&#125;中预定义正则名称 or 自定义正则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; msg1 - 正则校验不通过提示</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;String&#125; msg2 - 值为空时提示（可不填）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> validate = <span class=\"function\">(<span class=\"params\">reg, msg1, msg2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!msg2) &#123;</span><br><span class=\"line\">        callback()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(msg2))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reg = pattern[reg] ? pattern[reg] : reg</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!reg.test(value)) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(msg1))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> validate</span><br></pre></td></tr></table></figure>\n<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><p>源码戳<a href=\"https://github.com/Evey-huang/ele-validate\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>封装以后确实很好用，省了很多工作，就是内置的规则很少，写正则麻烦。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/cry.jpg\" alt=\"抱头痛哭\"></p>\n"},{"title":"《老了依然可以谈未来》读后感","date":"2017-12-14T13:35:41.000Z","_content":"\n蔡澜老先生是一位非常值得敬佩的人。\n\n读蔡澜先生的书不多，这是第一本，还有好几本躺在书单里，很喜欢他丰富的生活阅历，喜欢他热爱生活热爱美食开心快乐的样子，希望自己也能慢慢向他靠拢，多些乐少些愁。\n\n读《老了依然可以谈未来》我有这些感悟：\n\n- 人活一世不过数十载，要开心不要忧愁\n- 学到老活到老。多学一些就更自信一些\n- 要保持年轻\n- 年轻时候吃的苦都不算吃苦，这是一种阅历，总会苦尽甘来\n- 要学会花钱，挣了钱拿出10%去尽情花肯定很开心，挣了钱拿去跟朋友家人吃吃喝喝也很开心\n- 多旅行，看看世界各地的人是怎样去生活\n- 要培养一些除了工作之外的兴趣，这样人活着才有趣\n\n\n\n小学喜欢动画，初中偏爱看名著，高中喜欢看杂志和轻阅读，大学热爱网络。读书使人精神丰富使人常思考，读书是个好东西，所以工作的我又捡起了这个好习惯。\n\n\n\n下一本看张纯如的《南京大屠杀》，本来是很不敢看这类书，但是最近南京大屠杀纪念日让焦点又聚集到这里，我想我们年轻一代需要了解更多的历史真相。","source":"_posts/cailan.md","raw":"---\ntitle: 《老了依然可以谈未来》读后感\ndate: 2017-12-14 21:35:41\ntags: [蔡澜, 读后感]\ncategories: 读书\n---\n\n蔡澜老先生是一位非常值得敬佩的人。\n\n读蔡澜先生的书不多，这是第一本，还有好几本躺在书单里，很喜欢他丰富的生活阅历，喜欢他热爱生活热爱美食开心快乐的样子，希望自己也能慢慢向他靠拢，多些乐少些愁。\n\n读《老了依然可以谈未来》我有这些感悟：\n\n- 人活一世不过数十载，要开心不要忧愁\n- 学到老活到老。多学一些就更自信一些\n- 要保持年轻\n- 年轻时候吃的苦都不算吃苦，这是一种阅历，总会苦尽甘来\n- 要学会花钱，挣了钱拿出10%去尽情花肯定很开心，挣了钱拿去跟朋友家人吃吃喝喝也很开心\n- 多旅行，看看世界各地的人是怎样去生活\n- 要培养一些除了工作之外的兴趣，这样人活着才有趣\n\n\n\n小学喜欢动画，初中偏爱看名著，高中喜欢看杂志和轻阅读，大学热爱网络。读书使人精神丰富使人常思考，读书是个好东西，所以工作的我又捡起了这个好习惯。\n\n\n\n下一本看张纯如的《南京大屠杀》，本来是很不敢看这类书，但是最近南京大屠杀纪念日让焦点又聚集到这里，我想我们年轻一代需要了解更多的历史真相。","slug":"cailan","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0r0007flfya6tlfrz8","content":"<p>蔡澜老先生是一位非常值得敬佩的人。</p>\n<p>读蔡澜先生的书不多，这是第一本，还有好几本躺在书单里，很喜欢他丰富的生活阅历，喜欢他热爱生活热爱美食开心快乐的样子，希望自己也能慢慢向他靠拢，多些乐少些愁。</p>\n<p>读《老了依然可以谈未来》我有这些感悟：</p>\n<ul>\n<li>人活一世不过数十载，要开心不要忧愁</li>\n<li>学到老活到老。多学一些就更自信一些</li>\n<li>要保持年轻</li>\n<li>年轻时候吃的苦都不算吃苦，这是一种阅历，总会苦尽甘来</li>\n<li>要学会花钱，挣了钱拿出10%去尽情花肯定很开心，挣了钱拿去跟朋友家人吃吃喝喝也很开心</li>\n<li>多旅行，看看世界各地的人是怎样去生活</li>\n<li>要培养一些除了工作之外的兴趣，这样人活着才有趣</li>\n</ul>\n<p>小学喜欢动画，初中偏爱看名著，高中喜欢看杂志和轻阅读，大学热爱网络。读书使人精神丰富使人常思考，读书是个好东西，所以工作的我又捡起了这个好习惯。</p>\n<p>下一本看张纯如的《南京大屠杀》，本来是很不敢看这类书，但是最近南京大屠杀纪念日让焦点又聚集到这里，我想我们年轻一代需要了解更多的历史真相。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>蔡澜老先生是一位非常值得敬佩的人。</p>\n<p>读蔡澜先生的书不多，这是第一本，还有好几本躺在书单里，很喜欢他丰富的生活阅历，喜欢他热爱生活热爱美食开心快乐的样子，希望自己也能慢慢向他靠拢，多些乐少些愁。</p>\n<p>读《老了依然可以谈未来》我有这些感悟：</p>\n<ul>\n<li>人活一世不过数十载，要开心不要忧愁</li>\n<li>学到老活到老。多学一些就更自信一些</li>\n<li>要保持年轻</li>\n<li>年轻时候吃的苦都不算吃苦，这是一种阅历，总会苦尽甘来</li>\n<li>要学会花钱，挣了钱拿出10%去尽情花肯定很开心，挣了钱拿去跟朋友家人吃吃喝喝也很开心</li>\n<li>多旅行，看看世界各地的人是怎样去生活</li>\n<li>要培养一些除了工作之外的兴趣，这样人活着才有趣</li>\n</ul>\n<p>小学喜欢动画，初中偏爱看名著，高中喜欢看杂志和轻阅读，大学热爱网络。读书使人精神丰富使人常思考，读书是个好东西，所以工作的我又捡起了这个好习惯。</p>\n<p>下一本看张纯如的《南京大屠杀》，本来是很不敢看这类书，但是最近南京大屠杀纪念日让焦点又聚集到这里，我想我们年轻一代需要了解更多的历史真相。</p>\n"},{"title":"饿了么element表单验证插件","date":"2018-01-20T07:24:03.000Z","_content":"\n![插图](http://p1cjg886l.bkt.clouddn.com/ele5.jpg)\n\n\n\n## 背景\n\n为什么又换表单验证插件，记得上一次是[Vuelidate](https://evey-huang.github.io./2017/12/12/vuelidate/)。emm,没错，我们项目重构了，前端组件库从[quasar](http://quasar-framework.org/)换成了[element](http://element.eleme.io/#/zh-CN)，相应的，把表单验证插件也从`vuelidate`换成了element支持的校验规则[async-validator](https://github.com/yiminghe/async-validator)。\n\n## 介绍\n\nelement表单校验规则很简单，只需要通过 `rules` 属性传入约定的验证规则，并把 Form-Item 的 `prop` 属性设置为需校验的字段名即可，官网写得很详细，很容易上手，传送门—>[表单验证](http://element.eleme.io/#/zh-CN/component/form)\n\n内置的校验规则肯定满足不了工作需求，所以`自定义校验`显得尤为重要，这里主要写自定义规则和内置规则如何搭配使用。\n\n## 开始\n\n### HTML\n\n新建一个表单`Form`包含两个`input`，分别为用户名和密码\n\n```html\n<script src=\"//unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"//unpkg.com/element-ui@2.0.11/lib/index.js\"></script>\n<div id=\"app\">\n<el-form :model=\"ruleForm2\" status-icon :rules=\"rules2\" ref=\"ruleForm2\" label-width=\"100px\" class=\"demo-ruleForm\">\n\n  <el-form-item label=\"用户名\" prop=\"username\">\n    <el-input type=\"text\" v-model=\"ruleForm2.username\" auto-complete=\"off\"></el-input>\n  </el-form-item>\n  \n  <el-form-item label=\"密码\" prop=\"pass\">\n    <el-input type=\"password\" v-model=\"ruleForm2.pass\" auto-complete=\"off\"></el-input>\n  </el-form-item>\n\n  <el-form-item>\n    <el-button type=\"primary\" @click=\"submitForm('ruleForm2')\">登录</el-button>\n    <el-button @click=\"resetForm('ruleForm2')\">重置</el-button>\n  </el-form-item>\n</el-form>\n</div>\n```\n\n### JS\n\n用户名校验规则为：\n\n- 必填，不能为空\n- 最长为5个字符（写的数比较小是为了用于测试）\n- 由字母数字下划线还有短横线组成\n\n密码校验规则为：\n\n- 必填，不能为空\n- 最长6个字符（同上）\n- 由字母数字下划线组成\n\n```js\nvar Main = {\n    data() {\n      var validateUser = (rule, value, callback) => {\n        if (value === '') {\n          return callback(new Error('用户名不能为空'));\n        }\n        if (!/^[\\w-]+$/.test(value)) {\n          callback(new Error('用户名由字母、数字及下划线或者短横线组成'))\n        } else {\n          callback()\n        }\n      };\n      var validatePass = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入密码'))\n        }\n        if (!/^\\w+$/.test(value)) {\n          callback(new Error('密码由字母、数字及下划线组成'))\n        } else {\n          callback()\n        }\n      };\n      return {\n        ruleForm2: {\n          pass: '',\n          username: ''\n        },\n        rules2: {\n          pass: [\n            { required: true，validator: validatePass, trigger: 'blur' },\n            { max: 6, message: '密码最多为6个字符', trigger: 'blur' }\n            \n          ],\n          username: [\n            { required: true，validator: validateUser, trigger: 'blur' },\n            { max: 5, message: '用户名最多为5个字符', trigger: 'blur' }\n          ]\n        }\n      };\n    },\n    methods: {\n      // 点击登录时触发\n      submitForm(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            alert('submit!');\n          } else {\n            console.log('error submit!!');\n            return false;\n          }\n        });\n      },\n      // 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\n      resetForm(formName) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\nvar Ctor = Vue.extend(Main)\nnew Ctor().$mount('#app')\n```\n\n### CSS\n\n因为懒得写`css`所以引的`element-ui`自带css样式\n\n```css\n@import url(\"//unpkg.com/element-ui@2.0.11/lib/theme-chalk/index.css\");\n```\n\n\n\n### 传送门\n\n戳这里[在线运行](https://jsfiddle.net/eveyyyy/3m5zx8ou/4/)代码\n\n\n\n### 效果图\n\n原始样式\n\n![原始样式](http://p1cjg886l.bkt.clouddn.com/ele1.png)\n\n\n\n当input输入框为空时点击登录或者离开输入框都会提示`不能为空`\n\n![不为空](http://p1cjg886l.bkt.clouddn.com/ele2.png)\n\n\n\n当输入字符超过限定时会提示`最多为xxx字符`\n\n![max](http://p1cjg886l.bkt.clouddn.com/ele3.png)\n\n\n\n当出现非法字符串比如\"?\"也会提醒\n\n![非法字符](http://p1cjg886l.bkt.clouddn.com/ele4.png)\n\n\n\n### 小结\n\n总的来说这个验证插件要比`vuelidate`好用，在当前页面就可以完成验证工作，而vuelidate还需要依赖很多文件，要自定义一个校验方法需要改好几个文件。\n\n最后，校验插件好上手，难的是校验规则，要想校验好正则少不了~","source":"_posts/elemeValidate.md","raw":"---\ntitle: 饿了么element表单验证插件\ndate: 2018-01-20 15:24:03\ntags: [element, 表单验证]\ncategories: validate\n---\n\n![插图](http://p1cjg886l.bkt.clouddn.com/ele5.jpg)\n\n\n\n## 背景\n\n为什么又换表单验证插件，记得上一次是[Vuelidate](https://evey-huang.github.io./2017/12/12/vuelidate/)。emm,没错，我们项目重构了，前端组件库从[quasar](http://quasar-framework.org/)换成了[element](http://element.eleme.io/#/zh-CN)，相应的，把表单验证插件也从`vuelidate`换成了element支持的校验规则[async-validator](https://github.com/yiminghe/async-validator)。\n\n## 介绍\n\nelement表单校验规则很简单，只需要通过 `rules` 属性传入约定的验证规则，并把 Form-Item 的 `prop` 属性设置为需校验的字段名即可，官网写得很详细，很容易上手，传送门—>[表单验证](http://element.eleme.io/#/zh-CN/component/form)\n\n内置的校验规则肯定满足不了工作需求，所以`自定义校验`显得尤为重要，这里主要写自定义规则和内置规则如何搭配使用。\n\n## 开始\n\n### HTML\n\n新建一个表单`Form`包含两个`input`，分别为用户名和密码\n\n```html\n<script src=\"//unpkg.com/vue/dist/vue.js\"></script>\n<script src=\"//unpkg.com/element-ui@2.0.11/lib/index.js\"></script>\n<div id=\"app\">\n<el-form :model=\"ruleForm2\" status-icon :rules=\"rules2\" ref=\"ruleForm2\" label-width=\"100px\" class=\"demo-ruleForm\">\n\n  <el-form-item label=\"用户名\" prop=\"username\">\n    <el-input type=\"text\" v-model=\"ruleForm2.username\" auto-complete=\"off\"></el-input>\n  </el-form-item>\n  \n  <el-form-item label=\"密码\" prop=\"pass\">\n    <el-input type=\"password\" v-model=\"ruleForm2.pass\" auto-complete=\"off\"></el-input>\n  </el-form-item>\n\n  <el-form-item>\n    <el-button type=\"primary\" @click=\"submitForm('ruleForm2')\">登录</el-button>\n    <el-button @click=\"resetForm('ruleForm2')\">重置</el-button>\n  </el-form-item>\n</el-form>\n</div>\n```\n\n### JS\n\n用户名校验规则为：\n\n- 必填，不能为空\n- 最长为5个字符（写的数比较小是为了用于测试）\n- 由字母数字下划线还有短横线组成\n\n密码校验规则为：\n\n- 必填，不能为空\n- 最长6个字符（同上）\n- 由字母数字下划线组成\n\n```js\nvar Main = {\n    data() {\n      var validateUser = (rule, value, callback) => {\n        if (value === '') {\n          return callback(new Error('用户名不能为空'));\n        }\n        if (!/^[\\w-]+$/.test(value)) {\n          callback(new Error('用户名由字母、数字及下划线或者短横线组成'))\n        } else {\n          callback()\n        }\n      };\n      var validatePass = (rule, value, callback) => {\n        if (value === '') {\n          callback(new Error('请输入密码'))\n        }\n        if (!/^\\w+$/.test(value)) {\n          callback(new Error('密码由字母、数字及下划线组成'))\n        } else {\n          callback()\n        }\n      };\n      return {\n        ruleForm2: {\n          pass: '',\n          username: ''\n        },\n        rules2: {\n          pass: [\n            { required: true，validator: validatePass, trigger: 'blur' },\n            { max: 6, message: '密码最多为6个字符', trigger: 'blur' }\n            \n          ],\n          username: [\n            { required: true，validator: validateUser, trigger: 'blur' },\n            { max: 5, message: '用户名最多为5个字符', trigger: 'blur' }\n          ]\n        }\n      };\n    },\n    methods: {\n      // 点击登录时触发\n      submitForm(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            alert('submit!');\n          } else {\n            console.log('error submit!!');\n            return false;\n          }\n        });\n      },\n      // 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果\n      resetForm(formName) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\nvar Ctor = Vue.extend(Main)\nnew Ctor().$mount('#app')\n```\n\n### CSS\n\n因为懒得写`css`所以引的`element-ui`自带css样式\n\n```css\n@import url(\"//unpkg.com/element-ui@2.0.11/lib/theme-chalk/index.css\");\n```\n\n\n\n### 传送门\n\n戳这里[在线运行](https://jsfiddle.net/eveyyyy/3m5zx8ou/4/)代码\n\n\n\n### 效果图\n\n原始样式\n\n![原始样式](http://p1cjg886l.bkt.clouddn.com/ele1.png)\n\n\n\n当input输入框为空时点击登录或者离开输入框都会提示`不能为空`\n\n![不为空](http://p1cjg886l.bkt.clouddn.com/ele2.png)\n\n\n\n当输入字符超过限定时会提示`最多为xxx字符`\n\n![max](http://p1cjg886l.bkt.clouddn.com/ele3.png)\n\n\n\n当出现非法字符串比如\"?\"也会提醒\n\n![非法字符](http://p1cjg886l.bkt.clouddn.com/ele4.png)\n\n\n\n### 小结\n\n总的来说这个验证插件要比`vuelidate`好用，在当前页面就可以完成验证工作，而vuelidate还需要依赖很多文件，要自定义一个校验方法需要改好几个文件。\n\n最后，校验插件好上手，难的是校验规则，要想校验好正则少不了~","slug":"elemeValidate","published":1,"updated":"2018-01-24T10:34:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0s000aflfyl356ue03","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele5.jpg\" alt=\"插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>为什么又换表单验证插件，记得上一次是<a href=\"https://evey-huang.github.io./2017/12/12/vuelidate/\" target=\"_blank\" rel=\"noopener\">Vuelidate</a>。emm,没错，我们项目重构了，前端组件库从<a href=\"http://quasar-framework.org/\" target=\"_blank\" rel=\"noopener\">quasar</a>换成了<a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"noopener\">element</a>，相应的，把表单验证插件也从<code>vuelidate</code>换成了element支持的校验规则<a href=\"https://github.com/yiminghe/async-validator\" target=\"_blank\" rel=\"noopener\">async-validator</a>。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>element表单校验规则很简单，只需要通过 <code>rules</code> 属性传入约定的验证规则，并把 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可，官网写得很详细，很容易上手，传送门—&gt;<a href=\"http://element.eleme.io/#/zh-CN/component/form\" target=\"_blank\" rel=\"noopener\">表单验证</a></p>\n<p>内置的校验规则肯定满足不了工作需求，所以<code>自定义校验</code>显得尤为重要，这里主要写自定义规则和内置规则如何搭配使用。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>新建一个表单<code>Form</code>包含两个<code>input</code>，分别为用户名和密码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//unpkg.com/element-ui@2.0.11/lib/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"ruleForm2\"</span> <span class=\"attr\">status-icon</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"rules2\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ruleForm2\"</span> <span class=\"attr\">label-width</span>=<span class=\"string\">\"100px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo-ruleForm\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"ruleForm2.username\"</span> <span class=\"attr\">auto-complete</span>=<span class=\"string\">\"off\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"pass\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"ruleForm2.pass\"</span> <span class=\"attr\">auto-complete</span>=<span class=\"string\">\"off\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"submitForm('ruleForm2')\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"resetForm('ruleForm2')\"</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>用户名校验规则为：</p>\n<ul>\n<li>必填，不能为空</li>\n<li>最长为5个字符（写的数比较小是为了用于测试）</li>\n<li>由字母数字下划线还有短横线组成</li>\n</ul>\n<p>密码校验规则为：</p>\n<ul>\n<li>必填，不能为空</li>\n<li>最长6个字符（同上）</li>\n<li>由字母数字下划线组成</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Main = &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> validateUser = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户名不能为空'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^[\\w-]+$/</span>.test(value)) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户名由字母、数字及下划线或者短横线组成'</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> validatePass = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请输入密码'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^\\w+$/</span>.test(value)) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'密码由字母、数字及下划线组成'</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ruleForm2: &#123;</span><br><span class=\"line\">          pass: <span class=\"string\">''</span>,</span><br><span class=\"line\">          username: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rules2: &#123;</span><br><span class=\"line\">          pass: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>，validator: validatePass, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">max</span>: <span class=\"number\">6</span>, <span class=\"attr\">message</span>: <span class=\"string\">'密码最多为6个字符'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">          ],</span><br><span class=\"line\">          username: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>，validator: validateUser, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">max</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: <span class=\"string\">'用户名最多为5个字符'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 点击登录时触发</span></span><br><span class=\"line\">      submitForm(formName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[formName].validate(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit!'</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'error submit!!'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</span></span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Ctor = Vue.extend(Main)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Ctor().$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>因为懒得写<code>css</code>所以引的<code>element-ui</code>自带css样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"//unpkg.com/element-ui@2.0.11/lib/theme-chalk/index.css\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><p>戳这里<a href=\"https://jsfiddle.net/eveyyyy/3m5zx8ou/4/\" target=\"_blank\" rel=\"noopener\">在线运行</a>代码</p>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p>原始样式</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele1.png\" alt=\"原始样式\"></p>\n<p>当input输入框为空时点击登录或者离开输入框都会提示<code>不能为空</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele2.png\" alt=\"不为空\"></p>\n<p>当输入字符超过限定时会提示<code>最多为xxx字符</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele3.png\" alt=\"max\"></p>\n<p>当出现非法字符串比如”?”也会提醒</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele4.png\" alt=\"非法字符\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>总的来说这个验证插件要比<code>vuelidate</code>好用，在当前页面就可以完成验证工作，而vuelidate还需要依赖很多文件，要自定义一个校验方法需要改好几个文件。</p>\n<p>最后，校验插件好上手，难的是校验规则，要想校验好正则少不了~</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele5.jpg\" alt=\"插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>为什么又换表单验证插件，记得上一次是<a href=\"https://evey-huang.github.io./2017/12/12/vuelidate/\" target=\"_blank\" rel=\"noopener\">Vuelidate</a>。emm,没错，我们项目重构了，前端组件库从<a href=\"http://quasar-framework.org/\" target=\"_blank\" rel=\"noopener\">quasar</a>换成了<a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"noopener\">element</a>，相应的，把表单验证插件也从<code>vuelidate</code>换成了element支持的校验规则<a href=\"https://github.com/yiminghe/async-validator\" target=\"_blank\" rel=\"noopener\">async-validator</a>。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>element表单校验规则很简单，只需要通过 <code>rules</code> 属性传入约定的验证规则，并把 Form-Item 的 <code>prop</code> 属性设置为需校验的字段名即可，官网写得很详细，很容易上手，传送门—&gt;<a href=\"http://element.eleme.io/#/zh-CN/component/form\" target=\"_blank\" rel=\"noopener\">表单验证</a></p>\n<p>内置的校验规则肯定满足不了工作需求，所以<code>自定义校验</code>显得尤为重要，这里主要写自定义规则和内置规则如何搭配使用。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>新建一个表单<code>Form</code>包含两个<code>input</code>，分别为用户名和密码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//unpkg.com/vue/dist/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//unpkg.com/element-ui@2.0.11/lib/index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form</span> <span class=\"attr\">:model</span>=<span class=\"string\">\"ruleForm2\"</span> <span class=\"attr\">status-icon</span> <span class=\"attr\">:rules</span>=<span class=\"string\">\"rules2\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ruleForm2\"</span> <span class=\"attr\">label-width</span>=<span class=\"string\">\"100px\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"demo-ruleForm\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"用户名\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"ruleForm2.username\"</span> <span class=\"attr\">auto-complete</span>=<span class=\"string\">\"off\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">\"密码\"</span> <span class=\"attr\">prop</span>=<span class=\"string\">\"pass\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"ruleForm2.pass\"</span> <span class=\"attr\">auto-complete</span>=<span class=\"string\">\"off\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"primary\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"submitForm('ruleForm2')\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"resetForm('ruleForm2')\"</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>用户名校验规则为：</p>\n<ul>\n<li>必填，不能为空</li>\n<li>最长为5个字符（写的数比较小是为了用于测试）</li>\n<li>由字母数字下划线还有短横线组成</li>\n</ul>\n<p>密码校验规则为：</p>\n<ul>\n<li>必填，不能为空</li>\n<li>最长6个字符（同上）</li>\n<li>由字母数字下划线组成</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Main = &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> validateUser = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户名不能为空'</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^[\\w-]+$/</span>.test(value)) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'用户名由字母、数字及下划线或者短横线组成'</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> validatePass = <span class=\"function\">(<span class=\"params\">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value === <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'请输入密码'</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"regexp\">/^\\w+$/</span>.test(value)) &#123;</span><br><span class=\"line\">          callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'密码由字母、数字及下划线组成'</span>))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ruleForm2: &#123;</span><br><span class=\"line\">          pass: <span class=\"string\">''</span>,</span><br><span class=\"line\">          username: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rules2: &#123;</span><br><span class=\"line\">          pass: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>，validator: validatePass, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">max</span>: <span class=\"number\">6</span>, <span class=\"attr\">message</span>: <span class=\"string\">'密码最多为6个字符'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">          ],</span><br><span class=\"line\">          username: [</span><br><span class=\"line\">            &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>，validator: validateUser, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">max</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: <span class=\"string\">'用户名最多为5个字符'</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">'blur'</span> &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 点击登录时触发</span></span><br><span class=\"line\">      submitForm(formName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[formName].validate(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'submit!'</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'error submit!!'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对整个表单进行重置，将所有字段值重置为初始值并移除校验结果</span></span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Ctor = Vue.extend(Main)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Ctor().$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>因为懒得写<code>css</code>所以引的<code>element-ui</code>自带css样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"//unpkg.com/element-ui@2.0.11/lib/theme-chalk/index.css\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h3><p>戳这里<a href=\"https://jsfiddle.net/eveyyyy/3m5zx8ou/4/\" target=\"_blank\" rel=\"noopener\">在线运行</a>代码</p>\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p>原始样式</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele1.png\" alt=\"原始样式\"></p>\n<p>当input输入框为空时点击登录或者离开输入框都会提示<code>不能为空</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele2.png\" alt=\"不为空\"></p>\n<p>当输入字符超过限定时会提示<code>最多为xxx字符</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele3.png\" alt=\"max\"></p>\n<p>当出现非法字符串比如”?”也会提醒</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/ele4.png\" alt=\"非法字符\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>总的来说这个验证插件要比<code>vuelidate</code>好用，在当前页面就可以完成验证工作，而vuelidate还需要依赖很多文件，要自定义一个校验方法需要改好几个文件。</p>\n<p>最后，校验插件好上手，难的是校验规则，要想校验好正则少不了~</p>\n"},{"title":"使用ES6的浏览器兼容性问题","date":"2018-01-20T03:38:18.000Z","_content":"\n![插图](http://p1cjg886l.bkt.clouddn.com/es1.jpg)\n\n## 背景\n\n最近项目重构需要添加单元测试环境到项目中去，由于之前已经有了经验和写了教程，直接照着来就是了，但是却出现了bug。\n\n![es6 bug](http://p1cjg886l.bkt.clouddn.com/es.png)\n\n## 问题\n\nGoogle发现这是一个<u>es6浏览器兼容性问题</u>。\n\n### polyfill\n\n由于Babel默认只转换各种ES2015语法，而不转换新的API，比如`Promise`，这时我们需要提供一些`ployfill`来模拟出这样一个提供原生支持功能的浏览器环境。主要有两种方式：`babel-runtime`和`babel-polyfill`，这里主要讲`babel-polyfill`。\n\n#### babel-polypill\n\n`babel-polyfill`是针对全局环境的，引入它浏览器就好像具备了规范里定义的完整的特性，一旦引入，就会跑一个`babel-polyfill`实例。\n\n##### 用法：\n\n1. 安装\n\n```shell\nnpm install --save-dev babel-polyfill\n```\n\n1. 在入口文件引入\n\n```js\nimport 'babel-polyfill'\n```\n\n\n\n## 解决方案\n\n本次bug的引起主要是因为添加了单元测试环境，所以引入的时候应该在单元测试环境配置文件里引入，在`karma.conf.js`中`files`字段中引入：\n\n```js\n'../../node_modules/babel-polyfill/dist/polyfill.js'\n```\n\n具体这样：\n\n```js\nfiles: [\n  '../../node_modules/babel-polyfill/dist/polyfill.js',\n  './index.js' // 入口文件\n],\n```\n\n\n\n## 小结\n\n浏览器兼容是个坑。","source":"_posts/es6.md","raw":"---\ntitle: 使用ES6的浏览器兼容性问题\ndate: 2018-01-20 11:38:18\ntags: [ES6, 单元测试]\ncategories: 单元测试\n---\n\n![插图](http://p1cjg886l.bkt.clouddn.com/es1.jpg)\n\n## 背景\n\n最近项目重构需要添加单元测试环境到项目中去，由于之前已经有了经验和写了教程，直接照着来就是了，但是却出现了bug。\n\n![es6 bug](http://p1cjg886l.bkt.clouddn.com/es.png)\n\n## 问题\n\nGoogle发现这是一个<u>es6浏览器兼容性问题</u>。\n\n### polyfill\n\n由于Babel默认只转换各种ES2015语法，而不转换新的API，比如`Promise`，这时我们需要提供一些`ployfill`来模拟出这样一个提供原生支持功能的浏览器环境。主要有两种方式：`babel-runtime`和`babel-polyfill`，这里主要讲`babel-polyfill`。\n\n#### babel-polypill\n\n`babel-polyfill`是针对全局环境的，引入它浏览器就好像具备了规范里定义的完整的特性，一旦引入，就会跑一个`babel-polyfill`实例。\n\n##### 用法：\n\n1. 安装\n\n```shell\nnpm install --save-dev babel-polyfill\n```\n\n1. 在入口文件引入\n\n```js\nimport 'babel-polyfill'\n```\n\n\n\n## 解决方案\n\n本次bug的引起主要是因为添加了单元测试环境，所以引入的时候应该在单元测试环境配置文件里引入，在`karma.conf.js`中`files`字段中引入：\n\n```js\n'../../node_modules/babel-polyfill/dist/polyfill.js'\n```\n\n具体这样：\n\n```js\nfiles: [\n  '../../node_modules/babel-polyfill/dist/polyfill.js',\n  './index.js' // 入口文件\n],\n```\n\n\n\n## 小结\n\n浏览器兼容是个坑。","slug":"es6","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0u000bflfy4nmycxof","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/es1.jpg\" alt=\"插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近项目重构需要添加单元测试环境到项目中去，由于之前已经有了经验和写了教程，直接照着来就是了，但是却出现了bug。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/es.png\" alt=\"es6 bug\"></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Google发现这是一个<u>es6浏览器兼容性问题</u>。</p>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>由于Babel默认只转换各种ES2015语法，而不转换新的API，比如<code>Promise</code>，这时我们需要提供一些<code>ployfill</code>来模拟出这样一个提供原生支持功能的浏览器环境。主要有两种方式：<code>babel-runtime</code>和<code>babel-polyfill</code>，这里主要讲<code>babel-polyfill</code>。</p>\n<h4 id=\"babel-polypill\"><a href=\"#babel-polypill\" class=\"headerlink\" title=\"babel-polypill\"></a>babel-polypill</h4><p><code>babel-polyfill</code>是针对全局环境的，引入它浏览器就好像具备了规范里定义的完整的特性，一旦引入，就会跑一个<code>babel-polyfill</code>实例。</p>\n<h5 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h5><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-polyfill</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在入口文件引入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>本次bug的引起主要是因为添加了单元测试环境，所以引入的时候应该在单元测试环境配置文件里引入，在<code>karma.conf.js</code>中<code>files</code>字段中引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'../../node_modules/babel-polyfill/dist/polyfill.js'</span></span><br></pre></td></tr></table></figure>\n<p>具体这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files: [</span><br><span class=\"line\">  <span class=\"string\">'../../node_modules/babel-polyfill/dist/polyfill.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>浏览器兼容是个坑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/es1.jpg\" alt=\"插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近项目重构需要添加单元测试环境到项目中去，由于之前已经有了经验和写了教程，直接照着来就是了，但是却出现了bug。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/es.png\" alt=\"es6 bug\"></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>Google发现这是一个<u>es6浏览器兼容性问题</u>。</p>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>由于Babel默认只转换各种ES2015语法，而不转换新的API，比如<code>Promise</code>，这时我们需要提供一些<code>ployfill</code>来模拟出这样一个提供原生支持功能的浏览器环境。主要有两种方式：<code>babel-runtime</code>和<code>babel-polyfill</code>，这里主要讲<code>babel-polyfill</code>。</p>\n<h4 id=\"babel-polypill\"><a href=\"#babel-polypill\" class=\"headerlink\" title=\"babel-polypill\"></a>babel-polypill</h4><p><code>babel-polyfill</code>是针对全局环境的，引入它浏览器就好像具备了规范里定义的完整的特性，一旦引入，就会跑一个<code>babel-polyfill</code>实例。</p>\n<h5 id=\"用法：\"><a href=\"#用法：\" class=\"headerlink\" title=\"用法：\"></a>用法：</h5><ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-polyfill</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在入口文件引入</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>本次bug的引起主要是因为添加了单元测试环境，所以引入的时候应该在单元测试环境配置文件里引入，在<code>karma.conf.js</code>中<code>files</code>字段中引入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'../../node_modules/babel-polyfill/dist/polyfill.js'</span></span><br></pre></td></tr></table></figure>\n<p>具体这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files: [</span><br><span class=\"line\">  <span class=\"string\">'../../node_modules/babel-polyfill/dist/polyfill.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'./index.js'</span> <span class=\"comment\">// 入口文件</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>浏览器兼容是个坑。</p>\n"},{"title":"《恶意》读后感","date":"2017-12-25T08:29:43.000Z","_content":"\n![恶意封面](http://p1cjg886l.bkt.clouddn.com/eyi.jpg)\n\n\n\n“也没有什么特别的原因，就是看他不爽！”\n\n《恶意》中的野野口修，只是出于根本说不清道不明、不知从何而起却无法终止的恶意，精心设计了一场谋杀。更让人可怕的，不是他所杀害的是一直帮助自己的好朋友日高邦彦，而是他穷尽最后的岁月也要玷污日高的整个人生。甚至，杀害他都只不过是一个开始步骤。\n\n日高和野野口从小学就是形影不离，直到高中开始疏远，当他们再次相遇时日高已经是一个小有成就的作家而野野口仍然籍籍无名，虽一心想成为作家但这条路走的并不顺畅。在日高的帮助下，野野口修成为了一位专门写儿童读物的作家。\n\n但是野野口却杀了如恩人一般的日高，作案动机不明。\n\n野野口把日高塑造成一个伪善的变态的形象。他将野野口的作品占为己有还借此成为畅销书作家，他还拍下野野口想要刺杀自己的录像，收藏好留有野野口指纹的凶器，野野口与日高的前妻初美产生了一个暧昧的关系，这一切都成为日高要挟野野口成为日高的影子作家的条件。\n\n加之身患绝症时日不多，野野口成为了让人同情的杀手，觉得日高的死是咎由自取。但是在加贺警官的坚持不懈下，真相一点一点地浮出水面。\n\n这一切都是阴谋，没有婚外情，没有代笔，没有威胁。这只是野野口精心策划的阴谋，这样的费尽心思，昭示着结束日高的生命只是一个开始，野野口真正想要的是谋杀他的一生。拍好录像带，藏好刀具，收好初美的照片，抄好日高写过的每一本书，他用了整整一年的时间，以一个创作者的想象力和营造力，缓慢而又孜孜不倦地进行着剧情的设计和完善。他甚至提前毒死了日高隔壁邻居的猫，只为了让大家相信，日高本就是一个视生命如草芥，残忍暴戾的人。\n\n日高已经死去，但这却无法消磨野野口在黑暗肆虐生长的恶意。\n\n“即使赌上自己所剩无几的人生，也要贬低对方的人格，这是怎样一种心态啊？”\n\n看似很难理解，但是联系起校园暴力好像又能理解了。记得看过一期《今日说法》一群问题少年少女肆意地对弱小的同龄人施暴，问及为什么要这么做的时候他们的回答大同小异“没什么，就是看他们不爽啊”。看似很任性的话却让人毛骨悚然不寒而栗。\n\n但从人物关系看日高简直是野野口的救世主。他们住在一个街区，上了同一所小学和初中，野野口因为校园暴力不想上学，是日高天天找他结伴去上学。日高为人谦和乐于助人而且有正义感敢于直面校园暴力而野野口胆小、内向，为了逃避被暴力主动去做了恶人的跟班还参与欺负日高的行动。即便如此日高在成为畅销书作家后仍然想着提携野野口，甚至在得到野野口参与校园暴力的证据后还帮助他隐瞒事实。可惜，恨意却早已深植，圣经说，人生下来就带有原罪，即七宗罪，“嫉妒”就是之一。大概野野口的作案动机来自嫉妒吧。\n\n为什么日高能成为畅销书作家而不是我？\n\n为什么他握着关系我名誉的证据？\n\n为什么。。\n\n不甘与嫉妒让他的心理最终变得畸形，恨意疯狂地生长就像野野口体内的癌细胞一样，最终让他失去了自己。\n\n无法想象说不清道不明的恶意可以这么可怕。其实，生活中的我们可能更甚于此。毫无来由地讨厌一个热，也许仅仅是一句话一个动作甚至是气味又或许他什么也没有做但就是讨厌他。上天从来没有赋予我们判断一个人的权利，上天也没有给予我们任何优于其他人的特质。虽然我们总是在标榜着人人平等，可是现实中我们却没有做到，我们冷漠的眼神，小小掩鼻的动作，不经意的话，无不透露着内心微小的恶意。\n\n\n\n\n\n愿这种无来由的恶意越来越少。\n\n\n\n","source":"_posts/eyi.md","raw":"---\ntitle: 《恶意》读后感\ndate: 2017-12-25 16:29:43\ntags: [东野圭吾, 恶意]\ncategories: 读书\n---\n\n![恶意封面](http://p1cjg886l.bkt.clouddn.com/eyi.jpg)\n\n\n\n“也没有什么特别的原因，就是看他不爽！”\n\n《恶意》中的野野口修，只是出于根本说不清道不明、不知从何而起却无法终止的恶意，精心设计了一场谋杀。更让人可怕的，不是他所杀害的是一直帮助自己的好朋友日高邦彦，而是他穷尽最后的岁月也要玷污日高的整个人生。甚至，杀害他都只不过是一个开始步骤。\n\n日高和野野口从小学就是形影不离，直到高中开始疏远，当他们再次相遇时日高已经是一个小有成就的作家而野野口仍然籍籍无名，虽一心想成为作家但这条路走的并不顺畅。在日高的帮助下，野野口修成为了一位专门写儿童读物的作家。\n\n但是野野口却杀了如恩人一般的日高，作案动机不明。\n\n野野口把日高塑造成一个伪善的变态的形象。他将野野口的作品占为己有还借此成为畅销书作家，他还拍下野野口想要刺杀自己的录像，收藏好留有野野口指纹的凶器，野野口与日高的前妻初美产生了一个暧昧的关系，这一切都成为日高要挟野野口成为日高的影子作家的条件。\n\n加之身患绝症时日不多，野野口成为了让人同情的杀手，觉得日高的死是咎由自取。但是在加贺警官的坚持不懈下，真相一点一点地浮出水面。\n\n这一切都是阴谋，没有婚外情，没有代笔，没有威胁。这只是野野口精心策划的阴谋，这样的费尽心思，昭示着结束日高的生命只是一个开始，野野口真正想要的是谋杀他的一生。拍好录像带，藏好刀具，收好初美的照片，抄好日高写过的每一本书，他用了整整一年的时间，以一个创作者的想象力和营造力，缓慢而又孜孜不倦地进行着剧情的设计和完善。他甚至提前毒死了日高隔壁邻居的猫，只为了让大家相信，日高本就是一个视生命如草芥，残忍暴戾的人。\n\n日高已经死去，但这却无法消磨野野口在黑暗肆虐生长的恶意。\n\n“即使赌上自己所剩无几的人生，也要贬低对方的人格，这是怎样一种心态啊？”\n\n看似很难理解，但是联系起校园暴力好像又能理解了。记得看过一期《今日说法》一群问题少年少女肆意地对弱小的同龄人施暴，问及为什么要这么做的时候他们的回答大同小异“没什么，就是看他们不爽啊”。看似很任性的话却让人毛骨悚然不寒而栗。\n\n但从人物关系看日高简直是野野口的救世主。他们住在一个街区，上了同一所小学和初中，野野口因为校园暴力不想上学，是日高天天找他结伴去上学。日高为人谦和乐于助人而且有正义感敢于直面校园暴力而野野口胆小、内向，为了逃避被暴力主动去做了恶人的跟班还参与欺负日高的行动。即便如此日高在成为畅销书作家后仍然想着提携野野口，甚至在得到野野口参与校园暴力的证据后还帮助他隐瞒事实。可惜，恨意却早已深植，圣经说，人生下来就带有原罪，即七宗罪，“嫉妒”就是之一。大概野野口的作案动机来自嫉妒吧。\n\n为什么日高能成为畅销书作家而不是我？\n\n为什么他握着关系我名誉的证据？\n\n为什么。。\n\n不甘与嫉妒让他的心理最终变得畸形，恨意疯狂地生长就像野野口体内的癌细胞一样，最终让他失去了自己。\n\n无法想象说不清道不明的恶意可以这么可怕。其实，生活中的我们可能更甚于此。毫无来由地讨厌一个热，也许仅仅是一句话一个动作甚至是气味又或许他什么也没有做但就是讨厌他。上天从来没有赋予我们判断一个人的权利，上天也没有给予我们任何优于其他人的特质。虽然我们总是在标榜着人人平等，可是现实中我们却没有做到，我们冷漠的眼神，小小掩鼻的动作，不经意的话，无不透露着内心微小的恶意。\n\n\n\n\n\n愿这种无来由的恶意越来越少。\n\n\n\n","slug":"eyi","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d0y000fflfyczey3stw","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/eyi.jpg\" alt=\"恶意封面\"></p>\n<p>“也没有什么特别的原因，就是看他不爽！”</p>\n<p>《恶意》中的野野口修，只是出于根本说不清道不明、不知从何而起却无法终止的恶意，精心设计了一场谋杀。更让人可怕的，不是他所杀害的是一直帮助自己的好朋友日高邦彦，而是他穷尽最后的岁月也要玷污日高的整个人生。甚至，杀害他都只不过是一个开始步骤。</p>\n<p>日高和野野口从小学就是形影不离，直到高中开始疏远，当他们再次相遇时日高已经是一个小有成就的作家而野野口仍然籍籍无名，虽一心想成为作家但这条路走的并不顺畅。在日高的帮助下，野野口修成为了一位专门写儿童读物的作家。</p>\n<p>但是野野口却杀了如恩人一般的日高，作案动机不明。</p>\n<p>野野口把日高塑造成一个伪善的变态的形象。他将野野口的作品占为己有还借此成为畅销书作家，他还拍下野野口想要刺杀自己的录像，收藏好留有野野口指纹的凶器，野野口与日高的前妻初美产生了一个暧昧的关系，这一切都成为日高要挟野野口成为日高的影子作家的条件。</p>\n<p>加之身患绝症时日不多，野野口成为了让人同情的杀手，觉得日高的死是咎由自取。但是在加贺警官的坚持不懈下，真相一点一点地浮出水面。</p>\n<p>这一切都是阴谋，没有婚外情，没有代笔，没有威胁。这只是野野口精心策划的阴谋，这样的费尽心思，昭示着结束日高的生命只是一个开始，野野口真正想要的是谋杀他的一生。拍好录像带，藏好刀具，收好初美的照片，抄好日高写过的每一本书，他用了整整一年的时间，以一个创作者的想象力和营造力，缓慢而又孜孜不倦地进行着剧情的设计和完善。他甚至提前毒死了日高隔壁邻居的猫，只为了让大家相信，日高本就是一个视生命如草芥，残忍暴戾的人。</p>\n<p>日高已经死去，但这却无法消磨野野口在黑暗肆虐生长的恶意。</p>\n<p>“即使赌上自己所剩无几的人生，也要贬低对方的人格，这是怎样一种心态啊？”</p>\n<p>看似很难理解，但是联系起校园暴力好像又能理解了。记得看过一期《今日说法》一群问题少年少女肆意地对弱小的同龄人施暴，问及为什么要这么做的时候他们的回答大同小异“没什么，就是看他们不爽啊”。看似很任性的话却让人毛骨悚然不寒而栗。</p>\n<p>但从人物关系看日高简直是野野口的救世主。他们住在一个街区，上了同一所小学和初中，野野口因为校园暴力不想上学，是日高天天找他结伴去上学。日高为人谦和乐于助人而且有正义感敢于直面校园暴力而野野口胆小、内向，为了逃避被暴力主动去做了恶人的跟班还参与欺负日高的行动。即便如此日高在成为畅销书作家后仍然想着提携野野口，甚至在得到野野口参与校园暴力的证据后还帮助他隐瞒事实。可惜，恨意却早已深植，圣经说，人生下来就带有原罪，即七宗罪，“嫉妒”就是之一。大概野野口的作案动机来自嫉妒吧。</p>\n<p>为什么日高能成为畅销书作家而不是我？</p>\n<p>为什么他握着关系我名誉的证据？</p>\n<p>为什么。。</p>\n<p>不甘与嫉妒让他的心理最终变得畸形，恨意疯狂地生长就像野野口体内的癌细胞一样，最终让他失去了自己。</p>\n<p>无法想象说不清道不明的恶意可以这么可怕。其实，生活中的我们可能更甚于此。毫无来由地讨厌一个热，也许仅仅是一句话一个动作甚至是气味又或许他什么也没有做但就是讨厌他。上天从来没有赋予我们判断一个人的权利，上天也没有给予我们任何优于其他人的特质。虽然我们总是在标榜着人人平等，可是现实中我们却没有做到，我们冷漠的眼神，小小掩鼻的动作，不经意的话，无不透露着内心微小的恶意。</p>\n<p>愿这种无来由的恶意越来越少。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/eyi.jpg\" alt=\"恶意封面\"></p>\n<p>“也没有什么特别的原因，就是看他不爽！”</p>\n<p>《恶意》中的野野口修，只是出于根本说不清道不明、不知从何而起却无法终止的恶意，精心设计了一场谋杀。更让人可怕的，不是他所杀害的是一直帮助自己的好朋友日高邦彦，而是他穷尽最后的岁月也要玷污日高的整个人生。甚至，杀害他都只不过是一个开始步骤。</p>\n<p>日高和野野口从小学就是形影不离，直到高中开始疏远，当他们再次相遇时日高已经是一个小有成就的作家而野野口仍然籍籍无名，虽一心想成为作家但这条路走的并不顺畅。在日高的帮助下，野野口修成为了一位专门写儿童读物的作家。</p>\n<p>但是野野口却杀了如恩人一般的日高，作案动机不明。</p>\n<p>野野口把日高塑造成一个伪善的变态的形象。他将野野口的作品占为己有还借此成为畅销书作家，他还拍下野野口想要刺杀自己的录像，收藏好留有野野口指纹的凶器，野野口与日高的前妻初美产生了一个暧昧的关系，这一切都成为日高要挟野野口成为日高的影子作家的条件。</p>\n<p>加之身患绝症时日不多，野野口成为了让人同情的杀手，觉得日高的死是咎由自取。但是在加贺警官的坚持不懈下，真相一点一点地浮出水面。</p>\n<p>这一切都是阴谋，没有婚外情，没有代笔，没有威胁。这只是野野口精心策划的阴谋，这样的费尽心思，昭示着结束日高的生命只是一个开始，野野口真正想要的是谋杀他的一生。拍好录像带，藏好刀具，收好初美的照片，抄好日高写过的每一本书，他用了整整一年的时间，以一个创作者的想象力和营造力，缓慢而又孜孜不倦地进行着剧情的设计和完善。他甚至提前毒死了日高隔壁邻居的猫，只为了让大家相信，日高本就是一个视生命如草芥，残忍暴戾的人。</p>\n<p>日高已经死去，但这却无法消磨野野口在黑暗肆虐生长的恶意。</p>\n<p>“即使赌上自己所剩无几的人生，也要贬低对方的人格，这是怎样一种心态啊？”</p>\n<p>看似很难理解，但是联系起校园暴力好像又能理解了。记得看过一期《今日说法》一群问题少年少女肆意地对弱小的同龄人施暴，问及为什么要这么做的时候他们的回答大同小异“没什么，就是看他们不爽啊”。看似很任性的话却让人毛骨悚然不寒而栗。</p>\n<p>但从人物关系看日高简直是野野口的救世主。他们住在一个街区，上了同一所小学和初中，野野口因为校园暴力不想上学，是日高天天找他结伴去上学。日高为人谦和乐于助人而且有正义感敢于直面校园暴力而野野口胆小、内向，为了逃避被暴力主动去做了恶人的跟班还参与欺负日高的行动。即便如此日高在成为畅销书作家后仍然想着提携野野口，甚至在得到野野口参与校园暴力的证据后还帮助他隐瞒事实。可惜，恨意却早已深植，圣经说，人生下来就带有原罪，即七宗罪，“嫉妒”就是之一。大概野野口的作案动机来自嫉妒吧。</p>\n<p>为什么日高能成为畅销书作家而不是我？</p>\n<p>为什么他握着关系我名誉的证据？</p>\n<p>为什么。。</p>\n<p>不甘与嫉妒让他的心理最终变得畸形，恨意疯狂地生长就像野野口体内的癌细胞一样，最终让他失去了自己。</p>\n<p>无法想象说不清道不明的恶意可以这么可怕。其实，生活中的我们可能更甚于此。毫无来由地讨厌一个热，也许仅仅是一句话一个动作甚至是气味又或许他什么也没有做但就是讨厌他。上天从来没有赋予我们判断一个人的权利，上天也没有给予我们任何优于其他人的特质。虽然我们总是在标榜着人人平等，可是现实中我们却没有做到，我们冷漠的眼神，小小掩鼻的动作，不经意的话，无不透露着内心微小的恶意。</p>\n<p>愿这种无来由的恶意越来越少。</p>\n"},{"title":"将本地项目上传到github","date":"2017-12-10T14:31:25.000Z","_content":"\n#### 本地创建一个项目\n\n比如我本地新建了一个项目，名为myBlog\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-1.png)\n\n#### 建立本地仓库\n\n###### 初始化\n\n进入myBlog文件夹执行\n\n```\ngit init\n```\n\n初始化项目成功后文件夹下会新增`.git`隐藏文件夹\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-2.png)\n\n###### 添加到仓库\n\n执行指令\n\n```\ngit add .\n```\n\n将项目添加到版本库\n\n###### 生成commit\n\n执行指令\n\n```\ngit commit -m \"myblog\"\n```\n\n#### 关联github仓库\n\n在github新建一个仓库\n\n###### 添加github远程仓库地址\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-3.png)\n\n执行指令\n\n```\ngit remote add origin https://github.com/Evey-huang/myBlog.git\n```\n\n###### 上传本地代码\n\n```\ngit push -u origin master\n```\n\n###### Fix Bug\n\n在上传代码的时候出了点错误提示“Pushing to Git returning Error Code 403 fatal: HTTP request failed”\n\n解决办法是修改.git/config文件\n\n执行指令\n\n```\nvim .git/config\n```\n\n将\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-5.png)\n\n修改为\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-4.png)\n\n\n\n再次执行\n\n```\ngit push -u origin master\n```\n\n即可上传成功，去github就可以看到提交记录啦~","source":"_posts/github1.md","raw":"---\ntitle: 将本地项目上传到github\ndate: 2017-12-10 22:31:25\ntags: github\ncategories: 教程\n---\n\n#### 本地创建一个项目\n\n比如我本地新建了一个项目，名为myBlog\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-1.png)\n\n#### 建立本地仓库\n\n###### 初始化\n\n进入myBlog文件夹执行\n\n```\ngit init\n```\n\n初始化项目成功后文件夹下会新增`.git`隐藏文件夹\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-2.png)\n\n###### 添加到仓库\n\n执行指令\n\n```\ngit add .\n```\n\n将项目添加到版本库\n\n###### 生成commit\n\n执行指令\n\n```\ngit commit -m \"myblog\"\n```\n\n#### 关联github仓库\n\n在github新建一个仓库\n\n###### 添加github远程仓库地址\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-3.png)\n\n执行指令\n\n```\ngit remote add origin https://github.com/Evey-huang/myBlog.git\n```\n\n###### 上传本地代码\n\n```\ngit push -u origin master\n```\n\n###### Fix Bug\n\n在上传代码的时候出了点错误提示“Pushing to Git returning Error Code 403 fatal: HTTP request failed”\n\n解决办法是修改.git/config文件\n\n执行指令\n\n```\nvim .git/config\n```\n\n将\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-5.png)\n\n修改为\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/github1-4.png)\n\n\n\n再次执行\n\n```\ngit push -u origin master\n```\n\n即可上传成功，去github就可以看到提交记录啦~","slug":"github1","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d10000hflfyc3cudzom","content":"<h4 id=\"本地创建一个项目\"><a href=\"#本地创建一个项目\" class=\"headerlink\" title=\"本地创建一个项目\"></a>本地创建一个项目</h4><p>比如我本地新建了一个项目，名为myBlog</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-1.png\" alt=\"PNG\"></p>\n<h4 id=\"建立本地仓库\"><a href=\"#建立本地仓库\" class=\"headerlink\" title=\"建立本地仓库\"></a>建立本地仓库</h4><h6 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h6><p>进入myBlog文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>初始化项目成功后文件夹下会新增<code>.git</code>隐藏文件夹</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-2.png\" alt=\"PNG\"></p>\n<h6 id=\"添加到仓库\"><a href=\"#添加到仓库\" class=\"headerlink\" title=\"添加到仓库\"></a>添加到仓库</h6><p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<p>将项目添加到版本库</p>\n<h6 id=\"生成commit\"><a href=\"#生成commit\" class=\"headerlink\" title=\"生成commit\"></a>生成commit</h6><p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;myblog&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关联github仓库\"><a href=\"#关联github仓库\" class=\"headerlink\" title=\"关联github仓库\"></a>关联github仓库</h4><p>在github新建一个仓库</p>\n<h6 id=\"添加github远程仓库地址\"><a href=\"#添加github远程仓库地址\" class=\"headerlink\" title=\"添加github远程仓库地址\"></a>添加github远程仓库地址</h6><p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-3.png\" alt=\"PNG\"></p>\n<p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/Evey-huang/myBlog.git</span><br></pre></td></tr></table></figure>\n<h6 id=\"上传本地代码\"><a href=\"#上传本地代码\" class=\"headerlink\" title=\"上传本地代码\"></a>上传本地代码</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h6 id=\"Fix-Bug\"><a href=\"#Fix-Bug\" class=\"headerlink\" title=\"Fix Bug\"></a>Fix Bug</h6><p>在上传代码的时候出了点错误提示“Pushing to Git returning Error Code 403 fatal: HTTP request failed”</p>\n<p>解决办法是修改.git/config文件</p>\n<p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .git/config</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-5.png\" alt=\"PNG\"></p>\n<p>修改为</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-4.png\" alt=\"PNG\"></p>\n<p>再次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>即可上传成功，去github就可以看到提交记录啦~</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"本地创建一个项目\"><a href=\"#本地创建一个项目\" class=\"headerlink\" title=\"本地创建一个项目\"></a>本地创建一个项目</h4><p>比如我本地新建了一个项目，名为myBlog</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-1.png\" alt=\"PNG\"></p>\n<h4 id=\"建立本地仓库\"><a href=\"#建立本地仓库\" class=\"headerlink\" title=\"建立本地仓库\"></a>建立本地仓库</h4><h6 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h6><p>进入myBlog文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>初始化项目成功后文件夹下会新增<code>.git</code>隐藏文件夹</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-2.png\" alt=\"PNG\"></p>\n<h6 id=\"添加到仓库\"><a href=\"#添加到仓库\" class=\"headerlink\" title=\"添加到仓库\"></a>添加到仓库</h6><p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<p>将项目添加到版本库</p>\n<h6 id=\"生成commit\"><a href=\"#生成commit\" class=\"headerlink\" title=\"生成commit\"></a>生成commit</h6><p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;myblog&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关联github仓库\"><a href=\"#关联github仓库\" class=\"headerlink\" title=\"关联github仓库\"></a>关联github仓库</h4><p>在github新建一个仓库</p>\n<h6 id=\"添加github远程仓库地址\"><a href=\"#添加github远程仓库地址\" class=\"headerlink\" title=\"添加github远程仓库地址\"></a>添加github远程仓库地址</h6><p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-3.png\" alt=\"PNG\"></p>\n<p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/Evey-huang/myBlog.git</span><br></pre></td></tr></table></figure>\n<h6 id=\"上传本地代码\"><a href=\"#上传本地代码\" class=\"headerlink\" title=\"上传本地代码\"></a>上传本地代码</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h6 id=\"Fix-Bug\"><a href=\"#Fix-Bug\" class=\"headerlink\" title=\"Fix Bug\"></a>Fix Bug</h6><p>在上传代码的时候出了点错误提示“Pushing to Git returning Error Code 403 fatal: HTTP request failed”</p>\n<p>解决办法是修改.git/config文件</p>\n<p>执行指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim .git/config</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-5.png\" alt=\"PNG\"></p>\n<p>修改为</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/github1-4.png\" alt=\"PNG\"></p>\n<p>再次执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>即可上传成功，去github就可以看到提交记录啦~</p>\n"},{"title":"从自动化测试到持续集成","date":"2017-12-20T08:53:47.000Z","_content":"\n## 背景\n\n简单直接点，这篇文章就是写如何将自动化测试跟持续集成挂钩起来，怎么将单元测试在jenkins上跑起来。\n\n持续集成整个过程大概是这样：\n\ndeveloper在本地工作，将本地工作push到代码仓库（可以是github公有仓库也可以是bitbucket私有仓库），然后会触发CI服务器（CI即持续集成服务器，CI服务器有很多，这里以jenkins做例子。）事先写好的脚本，脚本可以完成编译、单元测试等工作。最后如果代码没有问题则部署到开发环境。\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/jenkins13.jpg)\n\n\n\n## 过程\n\n### 准备\n\n1. 在本地安装好jenkins并顺利跑起来\n2. 有jenkins账号\n\n### 创建jenkins项目\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins1.png)\n\n\n\n新建一个pipeline风格的项目，名称为unit-test\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins2.png)\n\n\n\n### Jenkins Job的基本配置\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins3.png)\n\n\n\npipeline script写的是需要执行的脚本，`git branch`是指要拉取的测试分支，`credentialsId`指拉取代码时需要的密钥，`url`指存放代码的仓库地址。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins4.png)\n\n点击`pipeline syntax`进入添加插件的页面\n\n### 如何配置在jenkins生成测试覆盖率报告\n\n进入添加插件页面后，选择`publish HTML reports`插件\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins5.png)\n\n填写单元测试覆盖率报告路径和jenkins生成测试报告存放路径，点击`代码段生成器`按钮生成代码\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins6.png)\n\n\n\n将代码生成器生成的代码粘贴到`pipeline script`\n\n```shell\npipeline {\n    agent { label 'slave0' }\n    stages {\n        stage('prepare') {\n            steps {\n                git branch: '需要测试的分支', credentialsId: '用于拉取代码的密钥', url: 'ssh://代码仓库地址'\n            }\n        }\n        stage('build') {\n            steps {\n                sh 'cnpm install'\n                sh 'npm run test' // 执行单元测试\n                publishHTML (target: [\n                  allowMissing: false,\n                  alwaysLinkToLastBuild: false,\n                  keepAll: true,\n                  reportDir: 'test/unit/coverage/lcov-report', // 项目单元测试覆盖率报告存放路径\n                  reportFiles: 'index.html', // 项目单元测试覆盖率报告文件\n                  reportName: \"RCov Report\" // 在jenkins生成的测试报告\n                ])\n            }\n        }\n    }\n}\n```\n\n\n\n### 执行pipeline脚本\n\n保存后点击`立即构建`开始执行pipeline脚本。若是pipeline脚本有变动则需点`立即构建`，如果只是测试代码有变动则点`Replay`即可。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins9.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins10.png)\n\n不管构建成不成功都会有一个日志`Logs`。若成功点开可查看测试结果，若失败可以查看失败原因然后调整再次进行构建。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins11.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins12.png)\n\n\n\n### 查看测试报告\n\n构建成功后会生成测试报告，点击`RCov Report`查看单元测试覆盖率。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins7.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins8.png)\n\n\n\n## 最后\n\n写了这么多，又是自动化测试又是持续集成什么的看似很高大上，但是做完这些也仅仅是入门而已，没错就是入门。离真正做到自动化还远着呢。私以为，搭环境这些都不难，难的是如何把单元测试用例写好，如何坚持下去。","source":"_posts/jenkins.md","raw":"---\ntitle: 从自动化测试到持续集成\ndate: 2017-12-20 16:53:47\ntags: [jenkins, 持续集成, 自动化测试]\ncategories: 单元测试\n---\n\n## 背景\n\n简单直接点，这篇文章就是写如何将自动化测试跟持续集成挂钩起来，怎么将单元测试在jenkins上跑起来。\n\n持续集成整个过程大概是这样：\n\ndeveloper在本地工作，将本地工作push到代码仓库（可以是github公有仓库也可以是bitbucket私有仓库），然后会触发CI服务器（CI即持续集成服务器，CI服务器有很多，这里以jenkins做例子。）事先写好的脚本，脚本可以完成编译、单元测试等工作。最后如果代码没有问题则部署到开发环境。\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/jenkins13.jpg)\n\n\n\n## 过程\n\n### 准备\n\n1. 在本地安装好jenkins并顺利跑起来\n2. 有jenkins账号\n\n### 创建jenkins项目\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins1.png)\n\n\n\n新建一个pipeline风格的项目，名称为unit-test\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins2.png)\n\n\n\n### Jenkins Job的基本配置\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins3.png)\n\n\n\npipeline script写的是需要执行的脚本，`git branch`是指要拉取的测试分支，`credentialsId`指拉取代码时需要的密钥，`url`指存放代码的仓库地址。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins4.png)\n\n点击`pipeline syntax`进入添加插件的页面\n\n### 如何配置在jenkins生成测试覆盖率报告\n\n进入添加插件页面后，选择`publish HTML reports`插件\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins5.png)\n\n填写单元测试覆盖率报告路径和jenkins生成测试报告存放路径，点击`代码段生成器`按钮生成代码\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins6.png)\n\n\n\n将代码生成器生成的代码粘贴到`pipeline script`\n\n```shell\npipeline {\n    agent { label 'slave0' }\n    stages {\n        stage('prepare') {\n            steps {\n                git branch: '需要测试的分支', credentialsId: '用于拉取代码的密钥', url: 'ssh://代码仓库地址'\n            }\n        }\n        stage('build') {\n            steps {\n                sh 'cnpm install'\n                sh 'npm run test' // 执行单元测试\n                publishHTML (target: [\n                  allowMissing: false,\n                  alwaysLinkToLastBuild: false,\n                  keepAll: true,\n                  reportDir: 'test/unit/coverage/lcov-report', // 项目单元测试覆盖率报告存放路径\n                  reportFiles: 'index.html', // 项目单元测试覆盖率报告文件\n                  reportName: \"RCov Report\" // 在jenkins生成的测试报告\n                ])\n            }\n        }\n    }\n}\n```\n\n\n\n### 执行pipeline脚本\n\n保存后点击`立即构建`开始执行pipeline脚本。若是pipeline脚本有变动则需点`立即构建`，如果只是测试代码有变动则点`Replay`即可。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins9.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins10.png)\n\n不管构建成不成功都会有一个日志`Logs`。若成功点开可查看测试结果，若失败可以查看失败原因然后调整再次进行构建。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins11.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins12.png)\n\n\n\n### 查看测试报告\n\n构建成功后会生成测试报告，点击`RCov Report`查看单元测试覆盖率。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins7.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/jenkins8.png)\n\n\n\n## 最后\n\n写了这么多，又是自动化测试又是持续集成什么的看似很高大上，但是做完这些也仅仅是入门而已，没错就是入门。离真正做到自动化还远着呢。私以为，搭环境这些都不难，难的是如何把单元测试用例写好，如何坚持下去。","slug":"jenkins","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d12000mflfye7q2hzke","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>简单直接点，这篇文章就是写如何将自动化测试跟持续集成挂钩起来，怎么将单元测试在jenkins上跑起来。</p>\n<p>持续集成整个过程大概是这样：</p>\n<p>developer在本地工作，将本地工作push到代码仓库（可以是github公有仓库也可以是bitbucket私有仓库），然后会触发CI服务器（CI即持续集成服务器，CI服务器有很多，这里以jenkins做例子。）事先写好的脚本，脚本可以完成编译、单元测试等工作。最后如果代码没有问题则部署到开发环境。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins13.jpg\" alt=\"JPG\"></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>在本地安装好jenkins并顺利跑起来</li>\n<li>有jenkins账号</li>\n</ol>\n<h3 id=\"创建jenkins项目\"><a href=\"#创建jenkins项目\" class=\"headerlink\" title=\"创建jenkins项目\"></a>创建jenkins项目</h3><p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins1.png\" alt=\"PNG\"></p>\n<p>新建一个pipeline风格的项目，名称为unit-test</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins2.png\" alt=\"PNG\"></p>\n<h3 id=\"Jenkins-Job的基本配置\"><a href=\"#Jenkins-Job的基本配置\" class=\"headerlink\" title=\"Jenkins Job的基本配置\"></a>Jenkins Job的基本配置</h3><p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins3.png\" alt=\"PNG\"></p>\n<p>pipeline script写的是需要执行的脚本，<code>git branch</code>是指要拉取的测试分支，<code>credentialsId</code>指拉取代码时需要的密钥，<code>url</code>指存放代码的仓库地址。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins4.png\" alt=\"PNG\"></p>\n<p>点击<code>pipeline syntax</code>进入添加插件的页面</p>\n<h3 id=\"如何配置在jenkins生成测试覆盖率报告\"><a href=\"#如何配置在jenkins生成测试覆盖率报告\" class=\"headerlink\" title=\"如何配置在jenkins生成测试覆盖率报告\"></a>如何配置在jenkins生成测试覆盖率报告</h3><p>进入添加插件页面后，选择<code>publish HTML reports</code>插件</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins5.png\" alt=\"PNG\"></p>\n<p>填写单元测试覆盖率报告路径和jenkins生成测试报告存放路径，点击<code>代码段生成器</code>按钮生成代码</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins6.png\" alt=\"PNG\"></p>\n<p>将代码生成器生成的代码粘贴到<code>pipeline script</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label 'slave0' &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage('prepare') &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                git branch: '需要测试的分支', credentialsId: '用于拉取代码的密钥', url: 'ssh://代码仓库地址'</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage('build') &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh 'cnpm install'</span><br><span class=\"line\">                sh 'npm run test' // 执行单元测试</span><br><span class=\"line\">                publishHTML (target: [</span><br><span class=\"line\">                  allowMissing: false,</span><br><span class=\"line\">                  alwaysLinkToLastBuild: false,</span><br><span class=\"line\">                  keepAll: true,</span><br><span class=\"line\">                  reportDir: 'test/unit/coverage/lcov-report', // 项目单元测试覆盖率报告存放路径</span><br><span class=\"line\">                  reportFiles: 'index.html', // 项目单元测试覆盖率报告文件</span><br><span class=\"line\">                  reportName: \"RCov Report\" // 在jenkins生成的测试报告</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行pipeline脚本\"><a href=\"#执行pipeline脚本\" class=\"headerlink\" title=\"执行pipeline脚本\"></a>执行pipeline脚本</h3><p>保存后点击<code>立即构建</code>开始执行pipeline脚本。若是pipeline脚本有变动则需点<code>立即构建</code>，如果只是测试代码有变动则点<code>Replay</code>即可。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins9.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins10.png\" alt=\"PNG\"></p>\n<p>不管构建成不成功都会有一个日志<code>Logs</code>。若成功点开可查看测试结果，若失败可以查看失败原因然后调整再次进行构建。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins11.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins12.png\" alt=\"PNG\"></p>\n<h3 id=\"查看测试报告\"><a href=\"#查看测试报告\" class=\"headerlink\" title=\"查看测试报告\"></a>查看测试报告</h3><p>构建成功后会生成测试报告，点击<code>RCov Report</code>查看单元测试覆盖率。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins7.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins8.png\" alt=\"PNG\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写了这么多，又是自动化测试又是持续集成什么的看似很高大上，但是做完这些也仅仅是入门而已，没错就是入门。离真正做到自动化还远着呢。私以为，搭环境这些都不难，难的是如何把单元测试用例写好，如何坚持下去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>简单直接点，这篇文章就是写如何将自动化测试跟持续集成挂钩起来，怎么将单元测试在jenkins上跑起来。</p>\n<p>持续集成整个过程大概是这样：</p>\n<p>developer在本地工作，将本地工作push到代码仓库（可以是github公有仓库也可以是bitbucket私有仓库），然后会触发CI服务器（CI即持续集成服务器，CI服务器有很多，这里以jenkins做例子。）事先写好的脚本，脚本可以完成编译、单元测试等工作。最后如果代码没有问题则部署到开发环境。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins13.jpg\" alt=\"JPG\"></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>在本地安装好jenkins并顺利跑起来</li>\n<li>有jenkins账号</li>\n</ol>\n<h3 id=\"创建jenkins项目\"><a href=\"#创建jenkins项目\" class=\"headerlink\" title=\"创建jenkins项目\"></a>创建jenkins项目</h3><p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins1.png\" alt=\"PNG\"></p>\n<p>新建一个pipeline风格的项目，名称为unit-test</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins2.png\" alt=\"PNG\"></p>\n<h3 id=\"Jenkins-Job的基本配置\"><a href=\"#Jenkins-Job的基本配置\" class=\"headerlink\" title=\"Jenkins Job的基本配置\"></a>Jenkins Job的基本配置</h3><p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins3.png\" alt=\"PNG\"></p>\n<p>pipeline script写的是需要执行的脚本，<code>git branch</code>是指要拉取的测试分支，<code>credentialsId</code>指拉取代码时需要的密钥，<code>url</code>指存放代码的仓库地址。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins4.png\" alt=\"PNG\"></p>\n<p>点击<code>pipeline syntax</code>进入添加插件的页面</p>\n<h3 id=\"如何配置在jenkins生成测试覆盖率报告\"><a href=\"#如何配置在jenkins生成测试覆盖率报告\" class=\"headerlink\" title=\"如何配置在jenkins生成测试覆盖率报告\"></a>如何配置在jenkins生成测试覆盖率报告</h3><p>进入添加插件页面后，选择<code>publish HTML reports</code>插件</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins5.png\" alt=\"PNG\"></p>\n<p>填写单元测试覆盖率报告路径和jenkins生成测试报告存放路径，点击<code>代码段生成器</code>按钮生成代码</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins6.png\" alt=\"PNG\"></p>\n<p>将代码生成器生成的代码粘贴到<code>pipeline script</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123; label 'slave0' &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage('prepare') &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                git branch: '需要测试的分支', credentialsId: '用于拉取代码的密钥', url: 'ssh://代码仓库地址'</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage('build') &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh 'cnpm install'</span><br><span class=\"line\">                sh 'npm run test' // 执行单元测试</span><br><span class=\"line\">                publishHTML (target: [</span><br><span class=\"line\">                  allowMissing: false,</span><br><span class=\"line\">                  alwaysLinkToLastBuild: false,</span><br><span class=\"line\">                  keepAll: true,</span><br><span class=\"line\">                  reportDir: 'test/unit/coverage/lcov-report', // 项目单元测试覆盖率报告存放路径</span><br><span class=\"line\">                  reportFiles: 'index.html', // 项目单元测试覆盖率报告文件</span><br><span class=\"line\">                  reportName: \"RCov Report\" // 在jenkins生成的测试报告</span><br><span class=\"line\">                ])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行pipeline脚本\"><a href=\"#执行pipeline脚本\" class=\"headerlink\" title=\"执行pipeline脚本\"></a>执行pipeline脚本</h3><p>保存后点击<code>立即构建</code>开始执行pipeline脚本。若是pipeline脚本有变动则需点<code>立即构建</code>，如果只是测试代码有变动则点<code>Replay</code>即可。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins9.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins10.png\" alt=\"PNG\"></p>\n<p>不管构建成不成功都会有一个日志<code>Logs</code>。若成功点开可查看测试结果，若失败可以查看失败原因然后调整再次进行构建。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins11.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins12.png\" alt=\"PNG\"></p>\n<h3 id=\"查看测试报告\"><a href=\"#查看测试报告\" class=\"headerlink\" title=\"查看测试报告\"></a>查看测试报告</h3><p>构建成功后会生成测试报告，点击<code>RCov Report</code>查看单元测试覆盖率。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins7.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/jenkins8.png\" alt=\"PNG\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写了这么多，又是自动化测试又是持续集成什么的看似很高大上，但是做完这些也仅仅是入门而已，没错就是入门。离真正做到自动化还远着呢。私以为，搭环境这些都不难，难的是如何把单元测试用例写好，如何坚持下去。</p>\n"},{"title":"谈谈2017-12读书","date":"2018-01-04T10:31:15.000Z","_content":"\n![十二月读书](http://p1cjg886l.bkt.clouddn.com/read-12.png)\n\n最近看了六本书，也就是封面的这六本，说好的看《南京大屠杀》也是没看几页，光是看个序都泪眼朦胧分分钟要决堤那种。\n\n## 当你的才华还撑不起你的梦想时\n\n这本书光看题目就知道是鸡汤类型的了，作者是`特立独行的猫`，反正没听过，据说是微博大V可惜我不玩微博。整体来说还算正能量吧，但是来来去去都是讲的那几个故事，实在没新意，而且别人的人生别人的成功是不可复制的，还是少看这类书好了。\n\n## 老了依旧可以谈谈未来\n\n蔡澜老先生的书，无处不透露着他的洒脱。很稀松平常的家常话但又透露着人生哲理，值得思考。[老了依然可以谈未来读后感](https://evey-huang.github.io./2017/12/14/cailan/#more)\n\n## 恶意\n\n恶意总是让我想起有校园暴力的青少年们，总是不能理解他们怎么可以狠得下心去欺负那些无辜的人，也许是我没有经历他们所经历的，我的愿望是世界和平。[恶意读后感](https://evey-huang.github.io./2017/12/25/eyi/#more)\n\n## 白夜行\n\n白夜行这本书看了蛮久了大概有一周多的时间，人物网拉得很大错综复杂。看完这本书五味杂陈，既为亮司和雪穗之间的爱情故事感到惋惜——他们最终没有在一起。也为他们所犯下的罪行感到愤怒——这19年间为了“扫除障碍”不断地杀人，而他们杀的第一个人就是他们的父母。如果不耐心看下去，了解这些背景，可能会觉得他们就是十恶不赦的人，了解了背景以后又开始心疼他们。我也有去看一些书评，很多都在批判他们两个人罪大恶极，视人命为草芥，我自己也和朋友交流了一下感想，最终结论就是保留自己的看法也不拒绝其他看法。\n\n\n\n## 看见\n\n看这本书是哭得最多次的，从非典那一段开始哭，在地铁上哭得跟傻逼一样。看这本书思考很多，年轻时候的柴静让我想到了现在的自己，很菜鸟，初入职场，会怀疑自己的能力也会自信心爆棚，有听不进别人的建议的时候也有跪求建议的时候，总之这本书让我受益良多，看完以后跟销售一样跟周围朋友使劲安利这本书，不知道有多少个会去看，但是就是忍不住hh。\n\n## 愿你成为最好的女子\n\n这本书跳着看的，觉得还好吧，实在无聊可以看，但是不怎么推荐看。","source":"_posts/kanjian.md","raw":"---\ntitle: 谈谈2017-12读书\ndate: 2018-01-04 18:31:15\ntags: [读书, 柴静 ]\ncategories: 读书\n---\n\n![十二月读书](http://p1cjg886l.bkt.clouddn.com/read-12.png)\n\n最近看了六本书，也就是封面的这六本，说好的看《南京大屠杀》也是没看几页，光是看个序都泪眼朦胧分分钟要决堤那种。\n\n## 当你的才华还撑不起你的梦想时\n\n这本书光看题目就知道是鸡汤类型的了，作者是`特立独行的猫`，反正没听过，据说是微博大V可惜我不玩微博。整体来说还算正能量吧，但是来来去去都是讲的那几个故事，实在没新意，而且别人的人生别人的成功是不可复制的，还是少看这类书好了。\n\n## 老了依旧可以谈谈未来\n\n蔡澜老先生的书，无处不透露着他的洒脱。很稀松平常的家常话但又透露着人生哲理，值得思考。[老了依然可以谈未来读后感](https://evey-huang.github.io./2017/12/14/cailan/#more)\n\n## 恶意\n\n恶意总是让我想起有校园暴力的青少年们，总是不能理解他们怎么可以狠得下心去欺负那些无辜的人，也许是我没有经历他们所经历的，我的愿望是世界和平。[恶意读后感](https://evey-huang.github.io./2017/12/25/eyi/#more)\n\n## 白夜行\n\n白夜行这本书看了蛮久了大概有一周多的时间，人物网拉得很大错综复杂。看完这本书五味杂陈，既为亮司和雪穗之间的爱情故事感到惋惜——他们最终没有在一起。也为他们所犯下的罪行感到愤怒——这19年间为了“扫除障碍”不断地杀人，而他们杀的第一个人就是他们的父母。如果不耐心看下去，了解这些背景，可能会觉得他们就是十恶不赦的人，了解了背景以后又开始心疼他们。我也有去看一些书评，很多都在批判他们两个人罪大恶极，视人命为草芥，我自己也和朋友交流了一下感想，最终结论就是保留自己的看法也不拒绝其他看法。\n\n\n\n## 看见\n\n看这本书是哭得最多次的，从非典那一段开始哭，在地铁上哭得跟傻逼一样。看这本书思考很多，年轻时候的柴静让我想到了现在的自己，很菜鸟，初入职场，会怀疑自己的能力也会自信心爆棚，有听不进别人的建议的时候也有跪求建议的时候，总之这本书让我受益良多，看完以后跟销售一样跟周围朋友使劲安利这本书，不知道有多少个会去看，但是就是忍不住hh。\n\n## 愿你成为最好的女子\n\n这本书跳着看的，觉得还好吧，实在无聊可以看，但是不怎么推荐看。","slug":"kanjian","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d13000nflfyf4ejy6g4","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/read-12.png\" alt=\"十二月读书\"></p>\n<p>最近看了六本书，也就是封面的这六本，说好的看《南京大屠杀》也是没看几页，光是看个序都泪眼朦胧分分钟要决堤那种。</p>\n<h2 id=\"当你的才华还撑不起你的梦想时\"><a href=\"#当你的才华还撑不起你的梦想时\" class=\"headerlink\" title=\"当你的才华还撑不起你的梦想时\"></a>当你的才华还撑不起你的梦想时</h2><p>这本书光看题目就知道是鸡汤类型的了，作者是<code>特立独行的猫</code>，反正没听过，据说是微博大V可惜我不玩微博。整体来说还算正能量吧，但是来来去去都是讲的那几个故事，实在没新意，而且别人的人生别人的成功是不可复制的，还是少看这类书好了。</p>\n<h2 id=\"老了依旧可以谈谈未来\"><a href=\"#老了依旧可以谈谈未来\" class=\"headerlink\" title=\"老了依旧可以谈谈未来\"></a>老了依旧可以谈谈未来</h2><p>蔡澜老先生的书，无处不透露着他的洒脱。很稀松平常的家常话但又透露着人生哲理，值得思考。<a href=\"https://evey-huang.github.io./2017/12/14/cailan/#more\" target=\"_blank\" rel=\"noopener\">老了依然可以谈未来读后感</a></p>\n<h2 id=\"恶意\"><a href=\"#恶意\" class=\"headerlink\" title=\"恶意\"></a>恶意</h2><p>恶意总是让我想起有校园暴力的青少年们，总是不能理解他们怎么可以狠得下心去欺负那些无辜的人，也许是我没有经历他们所经历的，我的愿望是世界和平。<a href=\"https://evey-huang.github.io./2017/12/25/eyi/#more\" target=\"_blank\" rel=\"noopener\">恶意读后感</a></p>\n<h2 id=\"白夜行\"><a href=\"#白夜行\" class=\"headerlink\" title=\"白夜行\"></a>白夜行</h2><p>白夜行这本书看了蛮久了大概有一周多的时间，人物网拉得很大错综复杂。看完这本书五味杂陈，既为亮司和雪穗之间的爱情故事感到惋惜——他们最终没有在一起。也为他们所犯下的罪行感到愤怒——这19年间为了“扫除障碍”不断地杀人，而他们杀的第一个人就是他们的父母。如果不耐心看下去，了解这些背景，可能会觉得他们就是十恶不赦的人，了解了背景以后又开始心疼他们。我也有去看一些书评，很多都在批判他们两个人罪大恶极，视人命为草芥，我自己也和朋友交流了一下感想，最终结论就是保留自己的看法也不拒绝其他看法。</p>\n<h2 id=\"看见\"><a href=\"#看见\" class=\"headerlink\" title=\"看见\"></a>看见</h2><p>看这本书是哭得最多次的，从非典那一段开始哭，在地铁上哭得跟傻逼一样。看这本书思考很多，年轻时候的柴静让我想到了现在的自己，很菜鸟，初入职场，会怀疑自己的能力也会自信心爆棚，有听不进别人的建议的时候也有跪求建议的时候，总之这本书让我受益良多，看完以后跟销售一样跟周围朋友使劲安利这本书，不知道有多少个会去看，但是就是忍不住hh。</p>\n<h2 id=\"愿你成为最好的女子\"><a href=\"#愿你成为最好的女子\" class=\"headerlink\" title=\"愿你成为最好的女子\"></a>愿你成为最好的女子</h2><p>这本书跳着看的，觉得还好吧，实在无聊可以看，但是不怎么推荐看。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/read-12.png\" alt=\"十二月读书\"></p>\n<p>最近看了六本书，也就是封面的这六本，说好的看《南京大屠杀》也是没看几页，光是看个序都泪眼朦胧分分钟要决堤那种。</p>\n<h2 id=\"当你的才华还撑不起你的梦想时\"><a href=\"#当你的才华还撑不起你的梦想时\" class=\"headerlink\" title=\"当你的才华还撑不起你的梦想时\"></a>当你的才华还撑不起你的梦想时</h2><p>这本书光看题目就知道是鸡汤类型的了，作者是<code>特立独行的猫</code>，反正没听过，据说是微博大V可惜我不玩微博。整体来说还算正能量吧，但是来来去去都是讲的那几个故事，实在没新意，而且别人的人生别人的成功是不可复制的，还是少看这类书好了。</p>\n<h2 id=\"老了依旧可以谈谈未来\"><a href=\"#老了依旧可以谈谈未来\" class=\"headerlink\" title=\"老了依旧可以谈谈未来\"></a>老了依旧可以谈谈未来</h2><p>蔡澜老先生的书，无处不透露着他的洒脱。很稀松平常的家常话但又透露着人生哲理，值得思考。<a href=\"https://evey-huang.github.io./2017/12/14/cailan/#more\" target=\"_blank\" rel=\"noopener\">老了依然可以谈未来读后感</a></p>\n<h2 id=\"恶意\"><a href=\"#恶意\" class=\"headerlink\" title=\"恶意\"></a>恶意</h2><p>恶意总是让我想起有校园暴力的青少年们，总是不能理解他们怎么可以狠得下心去欺负那些无辜的人，也许是我没有经历他们所经历的，我的愿望是世界和平。<a href=\"https://evey-huang.github.io./2017/12/25/eyi/#more\" target=\"_blank\" rel=\"noopener\">恶意读后感</a></p>\n<h2 id=\"白夜行\"><a href=\"#白夜行\" class=\"headerlink\" title=\"白夜行\"></a>白夜行</h2><p>白夜行这本书看了蛮久了大概有一周多的时间，人物网拉得很大错综复杂。看完这本书五味杂陈，既为亮司和雪穗之间的爱情故事感到惋惜——他们最终没有在一起。也为他们所犯下的罪行感到愤怒——这19年间为了“扫除障碍”不断地杀人，而他们杀的第一个人就是他们的父母。如果不耐心看下去，了解这些背景，可能会觉得他们就是十恶不赦的人，了解了背景以后又开始心疼他们。我也有去看一些书评，很多都在批判他们两个人罪大恶极，视人命为草芥，我自己也和朋友交流了一下感想，最终结论就是保留自己的看法也不拒绝其他看法。</p>\n<h2 id=\"看见\"><a href=\"#看见\" class=\"headerlink\" title=\"看见\"></a>看见</h2><p>看这本书是哭得最多次的，从非典那一段开始哭，在地铁上哭得跟傻逼一样。看这本书思考很多，年轻时候的柴静让我想到了现在的自己，很菜鸟，初入职场，会怀疑自己的能力也会自信心爆棚，有听不进别人的建议的时候也有跪求建议的时候，总之这本书让我受益良多，看完以后跟销售一样跟周围朋友使劲安利这本书，不知道有多少个会去看，但是就是忍不住hh。</p>\n<h2 id=\"愿你成为最好的女子\"><a href=\"#愿你成为最好的女子\" class=\"headerlink\" title=\"愿你成为最好的女子\"></a>愿你成为最好的女子</h2><p>这本书跳着看的，觉得还好吧，实在无聊可以看，但是不怎么推荐看。</p>\n"},{"title":"如何正确“反孔”","date":"2018-01-04T10:53:44.000Z","_content":"\n## 写这篇文章的起因\n\n今天朋友问有什么好的化妆棉推荐（女孩子最喜欢吃安利）。我说看是有什么用途咯，不同用途都有不同的化妆棉推荐，比如卸妆用一般化妆随便什么都无所谓啦，湿敷的话只用过一款就是尤妮佳省水1/2那一款。朋友就说用来敷城野医生控油收缩毛孔化妆水，觉得这个可以收缩毛孔，而且觉得毛孔好像真的变小了（都是假象！），听到这里我按捺不住跳起来就是一波科普，我要让我的朋友们科学护肤。\n\n## 什么才是毛孔粗大的真正原因\n\n我对毛孔很关心的一大原因在于我也受困于毛孔粗大问题，没错！就是小时候不懂事仗着有大把胶原蛋白使劲折腾什么也敢往脸上呼还使劲晒太阳把脸折腾坏了，靠近鼻子的脸颊毛孔比较粗大。再加上身边朋友的吐槽，让我知道我不是一个人，有很多人很在意毛孔粗大问题，而且！很多人对毛孔都没有正确的认识，不从根本去解决而采用简单粗暴的方法——化妆，使用厚厚的粉底遮住了毛孔，但是素颜的时候毛孔还是这么粗大。（废话讲的有点多）\n\n毛孔粗大的原因不外乎有三：\n\n- 皮脂分泌旺盛\n- 日光照射\n- 老化\n\n### 皮脂分泌旺盛\n\n皮脂分泌旺盛讲大白话就是出油多。\n\n我们每个毛孔里面不仅只有一根汗毛，它的侧壁上面往往连接着一个`皮脂腺`。皮脂腺最重要的作用是分泌`皮脂`（皮脂是皮肤屏障功能的重要组成），这些`皮脂`会从皮脂腺中流到毛囊的管道中，然后一路向上到达皮肤表面。均匀分布在皮肤表面的`皮脂`不仅仅能够润泽皮肤还有一定抗菌作用。\n\n![插皮脂图](http://p1cjg886l.bkt.clouddn.com/maokong3.jpg)\n\n#### 皮脂分泌旺盛为什么导致毛孔粗大\n\n`毛孔粗大`的原因，很大程度上是由于`皮脂`量大，来不及流出被堵住，原来排列得很紧致均匀的胶原蛋白队列，长期被一颗堵在毛孔里面的油脂挤压之后变性无法复原，然后毛孔就变大了。\n\n至于为什么会导致皮脂分泌量大，原因可能是多种的，有可能是激素原因，也有可能是由于不正当地使用产品导致，还有可能是因为身体疾病。\n\n#### 如何控制皮脂分泌\n\n想要控制油脂分泌达到控制毛孔的目的，一方面是注意身体健康和饮食均衡（很多皮肤问题这条都适用），另一方面可以通过护肤品来实现，比如`维A醇（醛）`、`果酸`、`水杨酸`、`烟酰胺`和`PCA锌`。目前只用过`烟酰胺`和`PCA锌`，对应的产品是ISDIN怡思丁控油调理乳液和OLAY小绿瓶（没有广告费没有广告费！！）个人体验，PCA锌见效快，烟酰胺就走温和持续路线，要坚持用很久才能见效。\n\n### 日光照射\n\n除了堵塞的油脂能伤害胶原蛋白之外，日光是另一个真正的杀手。日光中的紫外线激发出来的大量`氧自由基`不停进攻胶原蛋白，这样会造成大面积的皮肤松弛，而松弛的结果之一就是毛孔粗大。\n\nSo！！要注意防晒！！要防晒！！要防晒！！（重要的事情说三遍），听说我朋友从来不涂防晒霜老衲的心里一阵痛。\n\n### 老化\n\n基于以上两条，如果没有皮脂分泌过量和阳光照射，毛孔是不是不会粗大？想得美！！\n\n随着年龄的增长，我们终究是要老去的，我们慢慢地会失去皮肤的弹性，新生的胶原蛋白也没有原来的那么规整（胶原蛋白更新的周期是十年，可不可怕），这样毛孔就会慢慢变粗大。\n\nSo！使用抗老化的产品也可以缓解毛孔粗大的问题。抗老化的成分比如有`维生素C`、维A醇等。\n\n## 已经形成的粗大毛孔\n\n对于已经形成的粗大毛孔该怎么办？没什么办法，只有医美了。所以预防很重要！\n\n回到最初朋友讲的城野医生控油收缩毛孔化妆水可以收缩毛孔，其实这个产品主要是用`酸`来作为主要的功能支撑。\n\n![城野医生](http://p1cjg886l.bkt.clouddn.com/maokong.png)\n\n`乳酸`和`苹果酸`可以加快最表层皮肤老化角质层脱落过程，某种程度上缩小毛孔（已经被撑大了的毛孔是很难通过护肤品达到真正的缩小）。\n\n还有`薄荷氧基丙二醇`和`辣薄荷提取物`，这两个的主要功能就和`冰敷`差不多，有清凉感，让你在使用后能够短暂地感觉到效果，觉得毛孔有变小（醒醒吧，别骗自己了！！）\n\n\n\n讲这么多就是想让姑娘们理性护肤，别听微博大V安利了你就屁颠屁颠也去买来用，把脸作坏了不说，主要是我心疼钱啊。\n\n![](http://p1cjg886l.bkt.clouddn.com/maokong2.png)","source":"_posts/maokong.md","raw":"---\ntitle: 如何正确“反孔”\ndate: 2018-01-04 18:53:44\ntags: [毛孔, 护肤]\ncategories: 护肤\n---\n\n## 写这篇文章的起因\n\n今天朋友问有什么好的化妆棉推荐（女孩子最喜欢吃安利）。我说看是有什么用途咯，不同用途都有不同的化妆棉推荐，比如卸妆用一般化妆随便什么都无所谓啦，湿敷的话只用过一款就是尤妮佳省水1/2那一款。朋友就说用来敷城野医生控油收缩毛孔化妆水，觉得这个可以收缩毛孔，而且觉得毛孔好像真的变小了（都是假象！），听到这里我按捺不住跳起来就是一波科普，我要让我的朋友们科学护肤。\n\n## 什么才是毛孔粗大的真正原因\n\n我对毛孔很关心的一大原因在于我也受困于毛孔粗大问题，没错！就是小时候不懂事仗着有大把胶原蛋白使劲折腾什么也敢往脸上呼还使劲晒太阳把脸折腾坏了，靠近鼻子的脸颊毛孔比较粗大。再加上身边朋友的吐槽，让我知道我不是一个人，有很多人很在意毛孔粗大问题，而且！很多人对毛孔都没有正确的认识，不从根本去解决而采用简单粗暴的方法——化妆，使用厚厚的粉底遮住了毛孔，但是素颜的时候毛孔还是这么粗大。（废话讲的有点多）\n\n毛孔粗大的原因不外乎有三：\n\n- 皮脂分泌旺盛\n- 日光照射\n- 老化\n\n### 皮脂分泌旺盛\n\n皮脂分泌旺盛讲大白话就是出油多。\n\n我们每个毛孔里面不仅只有一根汗毛，它的侧壁上面往往连接着一个`皮脂腺`。皮脂腺最重要的作用是分泌`皮脂`（皮脂是皮肤屏障功能的重要组成），这些`皮脂`会从皮脂腺中流到毛囊的管道中，然后一路向上到达皮肤表面。均匀分布在皮肤表面的`皮脂`不仅仅能够润泽皮肤还有一定抗菌作用。\n\n![插皮脂图](http://p1cjg886l.bkt.clouddn.com/maokong3.jpg)\n\n#### 皮脂分泌旺盛为什么导致毛孔粗大\n\n`毛孔粗大`的原因，很大程度上是由于`皮脂`量大，来不及流出被堵住，原来排列得很紧致均匀的胶原蛋白队列，长期被一颗堵在毛孔里面的油脂挤压之后变性无法复原，然后毛孔就变大了。\n\n至于为什么会导致皮脂分泌量大，原因可能是多种的，有可能是激素原因，也有可能是由于不正当地使用产品导致，还有可能是因为身体疾病。\n\n#### 如何控制皮脂分泌\n\n想要控制油脂分泌达到控制毛孔的目的，一方面是注意身体健康和饮食均衡（很多皮肤问题这条都适用），另一方面可以通过护肤品来实现，比如`维A醇（醛）`、`果酸`、`水杨酸`、`烟酰胺`和`PCA锌`。目前只用过`烟酰胺`和`PCA锌`，对应的产品是ISDIN怡思丁控油调理乳液和OLAY小绿瓶（没有广告费没有广告费！！）个人体验，PCA锌见效快，烟酰胺就走温和持续路线，要坚持用很久才能见效。\n\n### 日光照射\n\n除了堵塞的油脂能伤害胶原蛋白之外，日光是另一个真正的杀手。日光中的紫外线激发出来的大量`氧自由基`不停进攻胶原蛋白，这样会造成大面积的皮肤松弛，而松弛的结果之一就是毛孔粗大。\n\nSo！！要注意防晒！！要防晒！！要防晒！！（重要的事情说三遍），听说我朋友从来不涂防晒霜老衲的心里一阵痛。\n\n### 老化\n\n基于以上两条，如果没有皮脂分泌过量和阳光照射，毛孔是不是不会粗大？想得美！！\n\n随着年龄的增长，我们终究是要老去的，我们慢慢地会失去皮肤的弹性，新生的胶原蛋白也没有原来的那么规整（胶原蛋白更新的周期是十年，可不可怕），这样毛孔就会慢慢变粗大。\n\nSo！使用抗老化的产品也可以缓解毛孔粗大的问题。抗老化的成分比如有`维生素C`、维A醇等。\n\n## 已经形成的粗大毛孔\n\n对于已经形成的粗大毛孔该怎么办？没什么办法，只有医美了。所以预防很重要！\n\n回到最初朋友讲的城野医生控油收缩毛孔化妆水可以收缩毛孔，其实这个产品主要是用`酸`来作为主要的功能支撑。\n\n![城野医生](http://p1cjg886l.bkt.clouddn.com/maokong.png)\n\n`乳酸`和`苹果酸`可以加快最表层皮肤老化角质层脱落过程，某种程度上缩小毛孔（已经被撑大了的毛孔是很难通过护肤品达到真正的缩小）。\n\n还有`薄荷氧基丙二醇`和`辣薄荷提取物`，这两个的主要功能就和`冰敷`差不多，有清凉感，让你在使用后能够短暂地感觉到效果，觉得毛孔有变小（醒醒吧，别骗自己了！！）\n\n\n\n讲这么多就是想让姑娘们理性护肤，别听微博大V安利了你就屁颠屁颠也去买来用，把脸作坏了不说，主要是我心疼钱啊。\n\n![](http://p1cjg886l.bkt.clouddn.com/maokong2.png)","slug":"maokong","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d14000rflfy3qc9tggu","content":"<h2 id=\"写这篇文章的起因\"><a href=\"#写这篇文章的起因\" class=\"headerlink\" title=\"写这篇文章的起因\"></a>写这篇文章的起因</h2><p>今天朋友问有什么好的化妆棉推荐（女孩子最喜欢吃安利）。我说看是有什么用途咯，不同用途都有不同的化妆棉推荐，比如卸妆用一般化妆随便什么都无所谓啦，湿敷的话只用过一款就是尤妮佳省水1/2那一款。朋友就说用来敷城野医生控油收缩毛孔化妆水，觉得这个可以收缩毛孔，而且觉得毛孔好像真的变小了（都是假象！），听到这里我按捺不住跳起来就是一波科普，我要让我的朋友们科学护肤。</p>\n<h2 id=\"什么才是毛孔粗大的真正原因\"><a href=\"#什么才是毛孔粗大的真正原因\" class=\"headerlink\" title=\"什么才是毛孔粗大的真正原因\"></a>什么才是毛孔粗大的真正原因</h2><p>我对毛孔很关心的一大原因在于我也受困于毛孔粗大问题，没错！就是小时候不懂事仗着有大把胶原蛋白使劲折腾什么也敢往脸上呼还使劲晒太阳把脸折腾坏了，靠近鼻子的脸颊毛孔比较粗大。再加上身边朋友的吐槽，让我知道我不是一个人，有很多人很在意毛孔粗大问题，而且！很多人对毛孔都没有正确的认识，不从根本去解决而采用简单粗暴的方法——化妆，使用厚厚的粉底遮住了毛孔，但是素颜的时候毛孔还是这么粗大。（废话讲的有点多）</p>\n<p>毛孔粗大的原因不外乎有三：</p>\n<ul>\n<li>皮脂分泌旺盛</li>\n<li>日光照射</li>\n<li>老化</li>\n</ul>\n<h3 id=\"皮脂分泌旺盛\"><a href=\"#皮脂分泌旺盛\" class=\"headerlink\" title=\"皮脂分泌旺盛\"></a>皮脂分泌旺盛</h3><p>皮脂分泌旺盛讲大白话就是出油多。</p>\n<p>我们每个毛孔里面不仅只有一根汗毛，它的侧壁上面往往连接着一个<code>皮脂腺</code>。皮脂腺最重要的作用是分泌<code>皮脂</code>（皮脂是皮肤屏障功能的重要组成），这些<code>皮脂</code>会从皮脂腺中流到毛囊的管道中，然后一路向上到达皮肤表面。均匀分布在皮肤表面的<code>皮脂</code>不仅仅能够润泽皮肤还有一定抗菌作用。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong3.jpg\" alt=\"插皮脂图\"></p>\n<h4 id=\"皮脂分泌旺盛为什么导致毛孔粗大\"><a href=\"#皮脂分泌旺盛为什么导致毛孔粗大\" class=\"headerlink\" title=\"皮脂分泌旺盛为什么导致毛孔粗大\"></a>皮脂分泌旺盛为什么导致毛孔粗大</h4><p><code>毛孔粗大</code>的原因，很大程度上是由于<code>皮脂</code>量大，来不及流出被堵住，原来排列得很紧致均匀的胶原蛋白队列，长期被一颗堵在毛孔里面的油脂挤压之后变性无法复原，然后毛孔就变大了。</p>\n<p>至于为什么会导致皮脂分泌量大，原因可能是多种的，有可能是激素原因，也有可能是由于不正当地使用产品导致，还有可能是因为身体疾病。</p>\n<h4 id=\"如何控制皮脂分泌\"><a href=\"#如何控制皮脂分泌\" class=\"headerlink\" title=\"如何控制皮脂分泌\"></a>如何控制皮脂分泌</h4><p>想要控制油脂分泌达到控制毛孔的目的，一方面是注意身体健康和饮食均衡（很多皮肤问题这条都适用），另一方面可以通过护肤品来实现，比如<code>维A醇（醛）</code>、<code>果酸</code>、<code>水杨酸</code>、<code>烟酰胺</code>和<code>PCA锌</code>。目前只用过<code>烟酰胺</code>和<code>PCA锌</code>，对应的产品是ISDIN怡思丁控油调理乳液和OLAY小绿瓶（没有广告费没有广告费！！）个人体验，PCA锌见效快，烟酰胺就走温和持续路线，要坚持用很久才能见效。</p>\n<h3 id=\"日光照射\"><a href=\"#日光照射\" class=\"headerlink\" title=\"日光照射\"></a>日光照射</h3><p>除了堵塞的油脂能伤害胶原蛋白之外，日光是另一个真正的杀手。日光中的紫外线激发出来的大量<code>氧自由基</code>不停进攻胶原蛋白，这样会造成大面积的皮肤松弛，而松弛的结果之一就是毛孔粗大。</p>\n<p>So！！要注意防晒！！要防晒！！要防晒！！（重要的事情说三遍），听说我朋友从来不涂防晒霜老衲的心里一阵痛。</p>\n<h3 id=\"老化\"><a href=\"#老化\" class=\"headerlink\" title=\"老化\"></a>老化</h3><p>基于以上两条，如果没有皮脂分泌过量和阳光照射，毛孔是不是不会粗大？想得美！！</p>\n<p>随着年龄的增长，我们终究是要老去的，我们慢慢地会失去皮肤的弹性，新生的胶原蛋白也没有原来的那么规整（胶原蛋白更新的周期是十年，可不可怕），这样毛孔就会慢慢变粗大。</p>\n<p>So！使用抗老化的产品也可以缓解毛孔粗大的问题。抗老化的成分比如有<code>维生素C</code>、维A醇等。</p>\n<h2 id=\"已经形成的粗大毛孔\"><a href=\"#已经形成的粗大毛孔\" class=\"headerlink\" title=\"已经形成的粗大毛孔\"></a>已经形成的粗大毛孔</h2><p>对于已经形成的粗大毛孔该怎么办？没什么办法，只有医美了。所以预防很重要！</p>\n<p>回到最初朋友讲的城野医生控油收缩毛孔化妆水可以收缩毛孔，其实这个产品主要是用<code>酸</code>来作为主要的功能支撑。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong.png\" alt=\"城野医生\"></p>\n<p><code>乳酸</code>和<code>苹果酸</code>可以加快最表层皮肤老化角质层脱落过程，某种程度上缩小毛孔（已经被撑大了的毛孔是很难通过护肤品达到真正的缩小）。</p>\n<p>还有<code>薄荷氧基丙二醇</code>和<code>辣薄荷提取物</code>，这两个的主要功能就和<code>冰敷</code>差不多，有清凉感，让你在使用后能够短暂地感觉到效果，觉得毛孔有变小（醒醒吧，别骗自己了！！）</p>\n<p>讲这么多就是想让姑娘们理性护肤，别听微博大V安利了你就屁颠屁颠也去买来用，把脸作坏了不说，主要是我心疼钱啊。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写这篇文章的起因\"><a href=\"#写这篇文章的起因\" class=\"headerlink\" title=\"写这篇文章的起因\"></a>写这篇文章的起因</h2><p>今天朋友问有什么好的化妆棉推荐（女孩子最喜欢吃安利）。我说看是有什么用途咯，不同用途都有不同的化妆棉推荐，比如卸妆用一般化妆随便什么都无所谓啦，湿敷的话只用过一款就是尤妮佳省水1/2那一款。朋友就说用来敷城野医生控油收缩毛孔化妆水，觉得这个可以收缩毛孔，而且觉得毛孔好像真的变小了（都是假象！），听到这里我按捺不住跳起来就是一波科普，我要让我的朋友们科学护肤。</p>\n<h2 id=\"什么才是毛孔粗大的真正原因\"><a href=\"#什么才是毛孔粗大的真正原因\" class=\"headerlink\" title=\"什么才是毛孔粗大的真正原因\"></a>什么才是毛孔粗大的真正原因</h2><p>我对毛孔很关心的一大原因在于我也受困于毛孔粗大问题，没错！就是小时候不懂事仗着有大把胶原蛋白使劲折腾什么也敢往脸上呼还使劲晒太阳把脸折腾坏了，靠近鼻子的脸颊毛孔比较粗大。再加上身边朋友的吐槽，让我知道我不是一个人，有很多人很在意毛孔粗大问题，而且！很多人对毛孔都没有正确的认识，不从根本去解决而采用简单粗暴的方法——化妆，使用厚厚的粉底遮住了毛孔，但是素颜的时候毛孔还是这么粗大。（废话讲的有点多）</p>\n<p>毛孔粗大的原因不外乎有三：</p>\n<ul>\n<li>皮脂分泌旺盛</li>\n<li>日光照射</li>\n<li>老化</li>\n</ul>\n<h3 id=\"皮脂分泌旺盛\"><a href=\"#皮脂分泌旺盛\" class=\"headerlink\" title=\"皮脂分泌旺盛\"></a>皮脂分泌旺盛</h3><p>皮脂分泌旺盛讲大白话就是出油多。</p>\n<p>我们每个毛孔里面不仅只有一根汗毛，它的侧壁上面往往连接着一个<code>皮脂腺</code>。皮脂腺最重要的作用是分泌<code>皮脂</code>（皮脂是皮肤屏障功能的重要组成），这些<code>皮脂</code>会从皮脂腺中流到毛囊的管道中，然后一路向上到达皮肤表面。均匀分布在皮肤表面的<code>皮脂</code>不仅仅能够润泽皮肤还有一定抗菌作用。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong3.jpg\" alt=\"插皮脂图\"></p>\n<h4 id=\"皮脂分泌旺盛为什么导致毛孔粗大\"><a href=\"#皮脂分泌旺盛为什么导致毛孔粗大\" class=\"headerlink\" title=\"皮脂分泌旺盛为什么导致毛孔粗大\"></a>皮脂分泌旺盛为什么导致毛孔粗大</h4><p><code>毛孔粗大</code>的原因，很大程度上是由于<code>皮脂</code>量大，来不及流出被堵住，原来排列得很紧致均匀的胶原蛋白队列，长期被一颗堵在毛孔里面的油脂挤压之后变性无法复原，然后毛孔就变大了。</p>\n<p>至于为什么会导致皮脂分泌量大，原因可能是多种的，有可能是激素原因，也有可能是由于不正当地使用产品导致，还有可能是因为身体疾病。</p>\n<h4 id=\"如何控制皮脂分泌\"><a href=\"#如何控制皮脂分泌\" class=\"headerlink\" title=\"如何控制皮脂分泌\"></a>如何控制皮脂分泌</h4><p>想要控制油脂分泌达到控制毛孔的目的，一方面是注意身体健康和饮食均衡（很多皮肤问题这条都适用），另一方面可以通过护肤品来实现，比如<code>维A醇（醛）</code>、<code>果酸</code>、<code>水杨酸</code>、<code>烟酰胺</code>和<code>PCA锌</code>。目前只用过<code>烟酰胺</code>和<code>PCA锌</code>，对应的产品是ISDIN怡思丁控油调理乳液和OLAY小绿瓶（没有广告费没有广告费！！）个人体验，PCA锌见效快，烟酰胺就走温和持续路线，要坚持用很久才能见效。</p>\n<h3 id=\"日光照射\"><a href=\"#日光照射\" class=\"headerlink\" title=\"日光照射\"></a>日光照射</h3><p>除了堵塞的油脂能伤害胶原蛋白之外，日光是另一个真正的杀手。日光中的紫外线激发出来的大量<code>氧自由基</code>不停进攻胶原蛋白，这样会造成大面积的皮肤松弛，而松弛的结果之一就是毛孔粗大。</p>\n<p>So！！要注意防晒！！要防晒！！要防晒！！（重要的事情说三遍），听说我朋友从来不涂防晒霜老衲的心里一阵痛。</p>\n<h3 id=\"老化\"><a href=\"#老化\" class=\"headerlink\" title=\"老化\"></a>老化</h3><p>基于以上两条，如果没有皮脂分泌过量和阳光照射，毛孔是不是不会粗大？想得美！！</p>\n<p>随着年龄的增长，我们终究是要老去的，我们慢慢地会失去皮肤的弹性，新生的胶原蛋白也没有原来的那么规整（胶原蛋白更新的周期是十年，可不可怕），这样毛孔就会慢慢变粗大。</p>\n<p>So！使用抗老化的产品也可以缓解毛孔粗大的问题。抗老化的成分比如有<code>维生素C</code>、维A醇等。</p>\n<h2 id=\"已经形成的粗大毛孔\"><a href=\"#已经形成的粗大毛孔\" class=\"headerlink\" title=\"已经形成的粗大毛孔\"></a>已经形成的粗大毛孔</h2><p>对于已经形成的粗大毛孔该怎么办？没什么办法，只有医美了。所以预防很重要！</p>\n<p>回到最初朋友讲的城野医生控油收缩毛孔化妆水可以收缩毛孔，其实这个产品主要是用<code>酸</code>来作为主要的功能支撑。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong.png\" alt=\"城野医生\"></p>\n<p><code>乳酸</code>和<code>苹果酸</code>可以加快最表层皮肤老化角质层脱落过程，某种程度上缩小毛孔（已经被撑大了的毛孔是很难通过护肤品达到真正的缩小）。</p>\n<p>还有<code>薄荷氧基丙二醇</code>和<code>辣薄荷提取物</code>，这两个的主要功能就和<code>冰敷</code>差不多，有清凉感，让你在使用后能够短暂地感觉到效果，觉得毛孔有变小（醒醒吧，别骗自己了！！）</p>\n<p>讲这么多就是想让姑娘们理性护肤，别听微博大V安利了你就屁颠屁颠也去买来用，把脸作坏了不说，主要是我心疼钱啊。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/maokong2.png\" alt=\"\"></p>\n"},{"title":"回顾2017","date":"2017-12-14T15:18:38.000Z","_content":"\n2017年快结束了，觉得今年特别值得写一写。\n\n\n\n#### 关于工作\n\n工作有3个月了，这期间学到了很多也认识了很多人。离开象牙塔步入社会让我知道自己有很多不足之处，需要学习的东西特别多。这几个月迷茫的时候沮丧的时候特别多，好在身边的人都没有放弃自己，千言万语说不出，希望自己2018年可以做的更好。\n\n#### 关于生死\n\n明天和意外你不知道哪一个先来。从前只是觉得这是一句很鸡汤的话而已，但是外婆的去世让我渐渐理解这句话。回乡下参加葬礼，很多繁冗的规矩让我觉得反感，逝者已逝哪里知道这些，后面看了蔡澜先生的书才理解，生者是想用这种方式让逝者永远活着，活在我们的脑海里，坚信逝者是有灵魂能看得到我们在用这种方式缅怀他们。就像我时常恍惚爷爷并没有走，脑子里有他鲜活的模样，这次轮到外婆也活在了我的脑海里。珍惜当下，活得开心。\n\n#### 关于2018\n\n这几个月的经历让我回首望去觉得我这大学虚度了，当初在学校信誓旦旦地说我不会怀念在学校的日子，现在我反悔了，我很怀念，让我再回到大一，我决不会过得浑浑噩噩，学习前端也不会只停留在表面，要把基础学扎实，很多很多想法，但回不去了，我们只能往前走。\n\n2018，定个小目标：\n\n- 好好完成毕业设计，开开心心毕业，给大学生涯画个圆满的句号\n- 努力成为一名合格的前端人，好好赚钱\n- 培养一个兴趣，比如射箭比如游泳比如书法\n- 多陪家人\n- 多去看看世界，2018年一定要去趟越南","source":"_posts/newyears.md","raw":"---\ntitle: 回顾2017\ndate: 2017-12-14 23:18:38\ntags: 2017\ncategories: 总结\n---\n\n2017年快结束了，觉得今年特别值得写一写。\n\n\n\n#### 关于工作\n\n工作有3个月了，这期间学到了很多也认识了很多人。离开象牙塔步入社会让我知道自己有很多不足之处，需要学习的东西特别多。这几个月迷茫的时候沮丧的时候特别多，好在身边的人都没有放弃自己，千言万语说不出，希望自己2018年可以做的更好。\n\n#### 关于生死\n\n明天和意外你不知道哪一个先来。从前只是觉得这是一句很鸡汤的话而已，但是外婆的去世让我渐渐理解这句话。回乡下参加葬礼，很多繁冗的规矩让我觉得反感，逝者已逝哪里知道这些，后面看了蔡澜先生的书才理解，生者是想用这种方式让逝者永远活着，活在我们的脑海里，坚信逝者是有灵魂能看得到我们在用这种方式缅怀他们。就像我时常恍惚爷爷并没有走，脑子里有他鲜活的模样，这次轮到外婆也活在了我的脑海里。珍惜当下，活得开心。\n\n#### 关于2018\n\n这几个月的经历让我回首望去觉得我这大学虚度了，当初在学校信誓旦旦地说我不会怀念在学校的日子，现在我反悔了，我很怀念，让我再回到大一，我决不会过得浑浑噩噩，学习前端也不会只停留在表面，要把基础学扎实，很多很多想法，但回不去了，我们只能往前走。\n\n2018，定个小目标：\n\n- 好好完成毕业设计，开开心心毕业，给大学生涯画个圆满的句号\n- 努力成为一名合格的前端人，好好赚钱\n- 培养一个兴趣，比如射箭比如游泳比如书法\n- 多陪家人\n- 多去看看世界，2018年一定要去趟越南","slug":"newyears","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d18000tflfyvq63nkki","content":"<p>2017年快结束了，觉得今年特别值得写一写。</p>\n<h4 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h4><p>工作有3个月了，这期间学到了很多也认识了很多人。离开象牙塔步入社会让我知道自己有很多不足之处，需要学习的东西特别多。这几个月迷茫的时候沮丧的时候特别多，好在身边的人都没有放弃自己，千言万语说不出，希望自己2018年可以做的更好。</p>\n<h4 id=\"关于生死\"><a href=\"#关于生死\" class=\"headerlink\" title=\"关于生死\"></a>关于生死</h4><p>明天和意外你不知道哪一个先来。从前只是觉得这是一句很鸡汤的话而已，但是外婆的去世让我渐渐理解这句话。回乡下参加葬礼，很多繁冗的规矩让我觉得反感，逝者已逝哪里知道这些，后面看了蔡澜先生的书才理解，生者是想用这种方式让逝者永远活着，活在我们的脑海里，坚信逝者是有灵魂能看得到我们在用这种方式缅怀他们。就像我时常恍惚爷爷并没有走，脑子里有他鲜活的模样，这次轮到外婆也活在了我的脑海里。珍惜当下，活得开心。</p>\n<h4 id=\"关于2018\"><a href=\"#关于2018\" class=\"headerlink\" title=\"关于2018\"></a>关于2018</h4><p>这几个月的经历让我回首望去觉得我这大学虚度了，当初在学校信誓旦旦地说我不会怀念在学校的日子，现在我反悔了，我很怀念，让我再回到大一，我决不会过得浑浑噩噩，学习前端也不会只停留在表面，要把基础学扎实，很多很多想法，但回不去了，我们只能往前走。</p>\n<p>2018，定个小目标：</p>\n<ul>\n<li>好好完成毕业设计，开开心心毕业，给大学生涯画个圆满的句号</li>\n<li>努力成为一名合格的前端人，好好赚钱</li>\n<li>培养一个兴趣，比如射箭比如游泳比如书法</li>\n<li>多陪家人</li>\n<li>多去看看世界，2018年一定要去趟越南</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>2017年快结束了，觉得今年特别值得写一写。</p>\n<h4 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h4><p>工作有3个月了，这期间学到了很多也认识了很多人。离开象牙塔步入社会让我知道自己有很多不足之处，需要学习的东西特别多。这几个月迷茫的时候沮丧的时候特别多，好在身边的人都没有放弃自己，千言万语说不出，希望自己2018年可以做的更好。</p>\n<h4 id=\"关于生死\"><a href=\"#关于生死\" class=\"headerlink\" title=\"关于生死\"></a>关于生死</h4><p>明天和意外你不知道哪一个先来。从前只是觉得这是一句很鸡汤的话而已，但是外婆的去世让我渐渐理解这句话。回乡下参加葬礼，很多繁冗的规矩让我觉得反感，逝者已逝哪里知道这些，后面看了蔡澜先生的书才理解，生者是想用这种方式让逝者永远活着，活在我们的脑海里，坚信逝者是有灵魂能看得到我们在用这种方式缅怀他们。就像我时常恍惚爷爷并没有走，脑子里有他鲜活的模样，这次轮到外婆也活在了我的脑海里。珍惜当下，活得开心。</p>\n<h4 id=\"关于2018\"><a href=\"#关于2018\" class=\"headerlink\" title=\"关于2018\"></a>关于2018</h4><p>这几个月的经历让我回首望去觉得我这大学虚度了，当初在学校信誓旦旦地说我不会怀念在学校的日子，现在我反悔了，我很怀念，让我再回到大一，我决不会过得浑浑噩噩，学习前端也不会只停留在表面，要把基础学扎实，很多很多想法，但回不去了，我们只能往前走。</p>\n<p>2018，定个小目标：</p>\n<ul>\n<li>好好完成毕业设计，开开心心毕业，给大学生涯画个圆满的句号</li>\n<li>努力成为一名合格的前端人，好好赚钱</li>\n<li>培养一个兴趣，比如射箭比如游泳比如书法</li>\n<li>多陪家人</li>\n<li>多去看看世界，2018年一定要去趟越南</li>\n</ul>\n"},{"title":"常用正则表达式","date":"2017-12-12T13:58:21.000Z","_content":"\n\n\n- 匹配IP地址，比如192.168.1.1\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n-  匹配subnet（子网掩码），比如192.168.1.1/22\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\/(3[0-2]|[0-2]\\d)/\n```\n\n-  匹配IP范围，比如192.168.0.1~192.168.0.2\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)~((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n- 比如：192.168.1.1~10\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\~(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n\n\n\n\n- 匹配：1.http://{IP}/ 2.http://{IP}:端口/ 3.http://{域名}/ 4.http://{域名}：端口/\n\n\n- 比如：1.http://192.168.0.1/ 2.http://192.168.0.1:8080/ 3.http://www.baidu.com/ 4.http://www.baidu.com:8080/\n\n```\n/^((http|https|ftp):\\/\\/)((((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d))|(a-zA-Z0-9{0,62})((.a-zA-Z0-9{0,62})+?)?):?([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])?\\/$\n```\n\n- 匹配端口号，一般0-65535。两种写法都可以，第一种就是把最大的数提到最前面不需要开始和结尾的符号，第二种就是最小的在最前面需要开始和结尾符号不然匹配不到\n\n```\n1./(6553[0-5]|655[0-2]\\d|65[0-4]\\d{2}|65[0-4]\\d{2}|6[0-4]\\d{3}|[1-5]\\d{4}|[1-9]\\d{3}|[1-9]\\d{2}|[1-9]\\d|[0-9])/\n2./^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/\n```\n\n\n\n\n\n- 匹配ASCII字符串，只匹配ASCII字符，ASCII字符包括什么自行google\n\n```\n/[\\x00-\\xff]+/g\n```\n\n- 匹配字母/数字/下划线/短横线/中文\n\n```\n/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/\n```\n\n- 匹配数字字母下划线及短横线\n\n```\n/[\\w-]+/\n```\n\n- 单个数字\n\n```\n/[0-9]/或/\\d/\n```\n\n- 多个数字\n\n```\n/[0-9]/或/[0-9]+/或/\\d+/或/\\d/\n```\n\n\n\n ","source":"_posts/regexp.md","raw":"---\ntitle: 常用正则表达式\ndate: 2017-12-12 21:58:21\ntags: 正则表达式\ncategories: JS\n---\n\n\n\n- 匹配IP地址，比如192.168.1.1\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n-  匹配subnet（子网掩码），比如192.168.1.1/22\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\/(3[0-2]|[0-2]\\d)/\n```\n\n-  匹配IP范围，比如192.168.0.1~192.168.0.2\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)~((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n- 比如：192.168.1.1~10\n\n```\n/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\~(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/\n```\n\n\n\n\n\n- 匹配：1.http://{IP}/ 2.http://{IP}:端口/ 3.http://{域名}/ 4.http://{域名}：端口/\n\n\n- 比如：1.http://192.168.0.1/ 2.http://192.168.0.1:8080/ 3.http://www.baidu.com/ 4.http://www.baidu.com:8080/\n\n```\n/^((http|https|ftp):\\/\\/)((((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d))|(a-zA-Z0-9{0,62})((.a-zA-Z0-9{0,62})+?)?):?([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])?\\/$\n```\n\n- 匹配端口号，一般0-65535。两种写法都可以，第一种就是把最大的数提到最前面不需要开始和结尾的符号，第二种就是最小的在最前面需要开始和结尾符号不然匹配不到\n\n```\n1./(6553[0-5]|655[0-2]\\d|65[0-4]\\d{2}|65[0-4]\\d{2}|6[0-4]\\d{3}|[1-5]\\d{4}|[1-9]\\d{3}|[1-9]\\d{2}|[1-9]\\d|[0-9])/\n2./^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/\n```\n\n\n\n\n\n- 匹配ASCII字符串，只匹配ASCII字符，ASCII字符包括什么自行google\n\n```\n/[\\x00-\\xff]+/g\n```\n\n- 匹配字母/数字/下划线/短横线/中文\n\n```\n/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/\n```\n\n- 匹配数字字母下划线及短横线\n\n```\n/[\\w-]+/\n```\n\n- 单个数字\n\n```\n/[0-9]/或/\\d/\n```\n\n- 多个数字\n\n```\n/[0-9]/或/[0-9]+/或/\\d+/或/\\d/\n```\n\n\n\n ","slug":"regexp","published":1,"updated":"2018-01-24T08:32:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1b000wflfyhc5fsyn8","content":"<ul>\n<li>匹配IP地址，比如192.168.1.1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配subnet（子网掩码），比如192.168.1.1/22</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\/(3[0-2]|[0-2]\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配IP范围，比如192.168.0.1~192.168.0.2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)~((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>比如：192.168.1.1~10</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\~(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配：1.<a href=\"http://{IP}/\" target=\"_blank\" rel=\"noopener\">http://{IP}/</a> 2.<a href=\"http://{IP}:端口/\" target=\"_blank\" rel=\"noopener\">http://{IP}:端口/</a> 3.<a href=\"http://{域名}/\" target=\"_blank\" rel=\"noopener\">http://{域名}/</a> 4.<a href=\"http://{域名}：端口/\" target=\"_blank\" rel=\"noopener\">http://{域名}：端口/</a></li>\n</ul>\n<ul>\n<li>比如：1.<a href=\"http://192.168.0.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1/</a> 2.<a href=\"http://192.168.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1:8080/</a> 3.<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> 4.<a href=\"http://www.baidu.com:8080/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com:8080/</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((http|https|ftp):\\/\\/)((((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d))|(a-zA-Z0-9&#123;0,62&#125;)((.a-zA-Z0-9&#123;0,62&#125;)+?)?):?([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])?\\/$</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配端口号，一般0-65535。两种写法都可以，第一种就是把最大的数提到最前面不需要开始和结尾的符号，第二种就是最小的在最前面需要开始和结尾符号不然匹配不到</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1./(6553[0-5]|655[0-2]\\d|65[0-4]\\d&#123;2&#125;|65[0-4]\\d&#123;2&#125;|6[0-4]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|[1-9]\\d&#123;3&#125;|[1-9]\\d&#123;2&#125;|[1-9]\\d|[0-9])/</span><br><span class=\"line\">2./^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配ASCII字符串，只匹配ASCII字符，ASCII字符包括什么自行google</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[\\x00-\\xff]+/g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配字母/数字/下划线/短横线/中文</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配数字字母下划线及短横线</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[\\w-]+/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单个数字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[0-9]/或/\\d/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多个数字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[0-9]/或/[0-9]+/或/\\d+/或/\\d/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>匹配IP地址，比如192.168.1.1</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配subnet（子网掩码），比如192.168.1.1/22</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\/(3[0-2]|[0-2]\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配IP范围，比如192.168.0.1~192.168.0.2</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)~((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>比如：192.168.1.1~10</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\~(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配：1.<a href=\"http://{IP}/\" target=\"_blank\" rel=\"noopener\">http://{IP}/</a> 2.<a href=\"http://{IP}:端口/\" target=\"_blank\" rel=\"noopener\">http://{IP}:端口/</a> 3.<a href=\"http://{域名}/\" target=\"_blank\" rel=\"noopener\">http://{域名}/</a> 4.<a href=\"http://{域名}：端口/\" target=\"_blank\" rel=\"noopener\">http://{域名}：端口/</a></li>\n</ul>\n<ul>\n<li>比如：1.<a href=\"http://192.168.0.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1/</a> 2.<a href=\"http://192.168.0.1:8080/\" target=\"_blank\" rel=\"noopener\">http://192.168.0.1:8080/</a> 3.<a href=\"http://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com/</a> 4.<a href=\"http://www.baidu.com:8080/\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com:8080/</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^((http|https|ftp):\\/\\/)((((25[0-5]|2[0-4]\\d|[01]?\\d?\\d).)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d))|(a-zA-Z0-9&#123;0,62&#125;)((.a-zA-Z0-9&#123;0,62&#125;)+?)?):?([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])?\\/$</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配端口号，一般0-65535。两种写法都可以，第一种就是把最大的数提到最前面不需要开始和结尾的符号，第二种就是最小的在最前面需要开始和结尾符号不然匹配不到</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1./(6553[0-5]|655[0-2]\\d|65[0-4]\\d&#123;2&#125;|65[0-4]\\d&#123;2&#125;|6[0-4]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|[1-9]\\d&#123;3&#125;|[1-9]\\d&#123;2&#125;|[1-9]\\d|[0-9])/</span><br><span class=\"line\">2./^([0-9]|[1-9]\\d|[1-9]\\d&#123;2&#125;|[1-9]\\d&#123;3&#125;|[1-5]\\d&#123;4&#125;|6[0-4]\\d&#123;3&#125;|65[0-4]\\d&#123;2&#125;|655[0-2]\\d|6553[0-5])$/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配ASCII字符串，只匹配ASCII字符，ASCII字符包括什么自行google</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[\\x00-\\xff]+/g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配字母/数字/下划线/短横线/中文</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^([\\w-]+|[\\u4e00-\\u9fa5]+)$/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>匹配数字字母下划线及短横线</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[\\w-]+/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>单个数字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[0-9]/或/\\d/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多个数字</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[0-9]/或/[0-9]+/或/\\d+/或/\\d/</span><br></pre></td></tr></table></figure>\n"},{"title":"RegExp正则表达式基本使用","date":"2017-12-12T14:08:02.000Z","_content":"\n\n\n## 正则表达式是什么？\n\n正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 [`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp) 的 [`exec`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) 和 [`test`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) 方法, 以及 [`String`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String) 的 [`match`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match)、[`replace`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)、[`search`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search) 和 [`split`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split) 方法。本章介绍JavaScript的正则表达式（因为目前我只学过JavaScript的正则表达式呀）。\n\n## 可以做什么？\n\n### 检验格式\n\n比如判断某字符串是否全部由数字组成\n\n```\n/^\\d+$/.test('12345');\n// true\n\n/^\\d+$/.test('12345abc');\n// false\n```\n\n### 内容替换\n\n比如将字符串中的数字替换成$号\n\n```\n'abcd1234'.replace(/\\d/g,'$');\n// \"abcd$$$$\"\n```\n\n### 提取内容\n\n字符串的 `match` 方法可以将匹配到的字符串片段复制到数据中并返回\n\n```\n'abcd1234'.match('cd12');\n// [\"cd12\", index: 2, input: \"abcd1234\"]\n```\n\n### 确定位置\n\n用下面两种方法可以获得被匹配字符串片段的起始和终止位置。\n\n```\nvar regexp = /<span>.*?<\\/span>/g;\nregexp.exec('aabb');\n\n// [\"<span>aa</span>\", index: 5, input: \"aabb\"](从1数起，第一个span结尾>的位置)\n'aabb'.search(regexp);\n// 5(从0数起，第一个span的<的位置)\n```\n\n### 分割字符串\n\n一般的字符串分割都是基于固定的分隔符，但是在某些场景下需要用正则做更复杂的处理， 比如用空格来分割字符串，如果有两个连续的空格出来的结果可能不是我们期待的， 这时就要用正则来处理。\n\n```\n'a   b c'.split(' ');\n// [\"a\", \"\", \"\", \"b\", \"c\"]\n```\n\n## 怎么玩？\n\n### 创建正则\n\n两种方式，一种是使用一个正则表达式字面量，其由包含在斜杠之间的模式组成\n\n```\nconst regex = /ab+c/;\nconst regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;\n```\n\n另一种是调用`RegExp`对象的构造函数\n\n```\nlet regex = new RegExp(\"ab+c\");\nlet regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, \"gi\");\n```\n\n###### 参数\n\n- g :全局匹配;找到所有匹配，而不是在第一个匹配后停止\n- i :忽略大小写\n- m :多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。\n- u :Unicode; 将模式视为Unicode序列点的序列\n- y :粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。\n\n### 特殊字符\n\n特殊字符有很多，其含义和用法可以参考MDN文档\n\n### RegExp对象方法\n\n这里想讲test、match、exec和replace这四种方法，因为这几种非常常见和常用也是我学习正则时遇到的难点。\n\n| 用法                                  | 说明                                      | 返回值                      |\n| ----------------------------------- | --------------------------------------- | ------------------------ |\n| `pattern.test(str)`                 | 判断`str`是否包含匹配结果                         | 包含返回`true`，不包含返回`false`。 |\n| `pattern.exec(str)`                 | 根据`pattern`对`str`进行正则匹配                 | 返回匹配结果数组,如匹配不到返回`null`   |\n| `str.match(pattern)`                | 根据`pattern`对str进行正则匹配                   | 返回匹配结果数组,如匹配不到返回`null`   |\n| `str.replace(pattern, replacement)` | 根据`pattern`进行正则匹配,把匹配结果替换为`replacement` | 一个新的字符串                  |\n\n###### test()\n\n字符串的`test`方法，比较常用在判断语句中，用于检测一个字符串是否匹配某个模式：\n\n```\nRegExpObject.test(string)\n```\n\n例：如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false：\n\n```\n/\\d/.test('asdf2')\n// true （字符串中含有数字所以返回true）\n```\n\n###### match()\n\n`match()` 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n\n- 非全局匹配\n\n  例：\n\n  ```\n  var a = 'abcd'.match(/\\w/);\n  console.log(a);\n  // [\"a\", index: 0, input: \"abcd\"] （只匹配第一个就停止了）\n  ```\n\n- 全局匹配\n\n  例：\n\n  ```\n  var a = 'abcd'.match(/\\w/g);\n  console.log(a);\n  // [\"a\", \"b\", \"c\", \"d\"] （匹配全部才停止）\n  ```\n\n###### exec()\n\nexec()方法用于比较复杂的模式匹配或者是说你为你提供更多的信息：\n\n```\nRegExpObject.exec(string)\n```\n\n如果在string中找到了匹配的文本，则返回一个包含这些文本的数组，否侧返回`null`。\n\n- 返回的数组的第一个元素是与整个正则匹配的文本，然后数组的第二个元素是与整个正则的第一个子表达式(分组)相匹配的文本，数组的第三个元素整个正则的第二个子表达式(分组)相匹配的文本，以此类推。例：\n\n```\nvar result = /(\\d+)-(\\w+)/.exec('12-ab');\nconsole.log(result);\n// [\"12-ab\", \"12\", \"ab\", index: 0, input: \"12-ab\"]\n```\n\n- 从上面返回的数组结果可知，数组添加了两个额外的属性，分别是：`index, input`\n\n  `index:` 匹配文本的第一个字符的位置。\n\n  `input:` 指输入的整体的文本。\n\n  例：\n\n  ```\n  console.log(result.index)\n  // 0\n  console.log(result.input)\n  // 12-ab\n  ```\n\n  ​\n\n- 执行exec函数时，尽管是全局匹配的正则表达式，但是exec方法只对指定的字符串进行一次匹配，\n\n  获取字符串中第一个与正则表达式想匹配的内容，并且将匹配内容和子匹配的结果存储到返回的数组中。\n\n  例：\n\n  ```\n  /\\d/g.exec('aa22')\n  // [\"2\", index: 2, input: \"aa22\"] （只匹配一个数字就停止了）\n  ```\n\n  ​\n\n###### replace()\n\nreplace()方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。这个方法接收两个必须的参数：\n\n- `pattern:` 这个参数可以是字符串或是RegExp对象。\n- `replacement：` 替换匹配项的字符串或处理函数的返回值\n\n返回结果：\n\n- 当未找到匹配项的时候，返回原始字符串。\n\n  例：\n\n  ```\n  'aaaa'.replace('bbb', 'b')\n  // \"aaaa\"\n  ```\n\n- 当pattern为字符串或者为非全局的RegExp对象的时候，只替换找到的第一项匹配项。\n\n  例：\n\n  ```\n  'aaaa'.replace('a', 'b')\n  // \"baaa\"\n  ```\n\n- 当pattern为全局的RegExp对象的时候，替换每一项匹配项。\n\n  例：\n\n  ```\n  'aaaa'.replace(/\\w/g, 'b')\n  // \"bbbb\"\n  ```\n\n- replacement为函数时，函数的返回值将作为替换字符串;函数的第一个参数的值是每一个匹配项,当然还有第二个参数，它的值是每个匹配项在原始字符串的中位置，从0开始。\n\n  例：\n\n  ```\n  aaaa'.replace(/\\w/g, function() {\n      return 'b';\n  });\n  // \"bbbb\"\n  ```\n\n  ​\n\n## 最后\n\n学习正则最重要的就是正则表达式要写对，我比较笨有时候会写很久。这里推荐两个比较有用的好帮手帮助更有效率地学习正则。\n\n- <http://regex.zjmainstay.cn/>（可以在线检测表达式写的是否正确）\n- <https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24>（可以看到清晰明了的逻辑图）","source":"_posts/regexp1.md","raw":"---\ntitle: RegExp正则表达式基本使用\ndate: 2017-12-12 22:08:02\ntags: 正则基本使用\ncategories: JS\n---\n\n\n\n## 正则表达式是什么？\n\n正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 [`RegExp`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp) 的 [`exec`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) 和 [`test`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) 方法, 以及 [`String`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String) 的 [`match`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match)、[`replace`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)、[`search`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search) 和 [`split`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split) 方法。本章介绍JavaScript的正则表达式（因为目前我只学过JavaScript的正则表达式呀）。\n\n## 可以做什么？\n\n### 检验格式\n\n比如判断某字符串是否全部由数字组成\n\n```\n/^\\d+$/.test('12345');\n// true\n\n/^\\d+$/.test('12345abc');\n// false\n```\n\n### 内容替换\n\n比如将字符串中的数字替换成$号\n\n```\n'abcd1234'.replace(/\\d/g,'$');\n// \"abcd$$$$\"\n```\n\n### 提取内容\n\n字符串的 `match` 方法可以将匹配到的字符串片段复制到数据中并返回\n\n```\n'abcd1234'.match('cd12');\n// [\"cd12\", index: 2, input: \"abcd1234\"]\n```\n\n### 确定位置\n\n用下面两种方法可以获得被匹配字符串片段的起始和终止位置。\n\n```\nvar regexp = /<span>.*?<\\/span>/g;\nregexp.exec('aabb');\n\n// [\"<span>aa</span>\", index: 5, input: \"aabb\"](从1数起，第一个span结尾>的位置)\n'aabb'.search(regexp);\n// 5(从0数起，第一个span的<的位置)\n```\n\n### 分割字符串\n\n一般的字符串分割都是基于固定的分隔符，但是在某些场景下需要用正则做更复杂的处理， 比如用空格来分割字符串，如果有两个连续的空格出来的结果可能不是我们期待的， 这时就要用正则来处理。\n\n```\n'a   b c'.split(' ');\n// [\"a\", \"\", \"\", \"b\", \"c\"]\n```\n\n## 怎么玩？\n\n### 创建正则\n\n两种方式，一种是使用一个正则表达式字面量，其由包含在斜杠之间的模式组成\n\n```\nconst regex = /ab+c/;\nconst regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;\n```\n\n另一种是调用`RegExp`对象的构造函数\n\n```\nlet regex = new RegExp(\"ab+c\");\nlet regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, \"gi\");\n```\n\n###### 参数\n\n- g :全局匹配;找到所有匹配，而不是在第一个匹配后停止\n- i :忽略大小写\n- m :多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。\n- u :Unicode; 将模式视为Unicode序列点的序列\n- y :粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。\n\n### 特殊字符\n\n特殊字符有很多，其含义和用法可以参考MDN文档\n\n### RegExp对象方法\n\n这里想讲test、match、exec和replace这四种方法，因为这几种非常常见和常用也是我学习正则时遇到的难点。\n\n| 用法                                  | 说明                                      | 返回值                      |\n| ----------------------------------- | --------------------------------------- | ------------------------ |\n| `pattern.test(str)`                 | 判断`str`是否包含匹配结果                         | 包含返回`true`，不包含返回`false`。 |\n| `pattern.exec(str)`                 | 根据`pattern`对`str`进行正则匹配                 | 返回匹配结果数组,如匹配不到返回`null`   |\n| `str.match(pattern)`                | 根据`pattern`对str进行正则匹配                   | 返回匹配结果数组,如匹配不到返回`null`   |\n| `str.replace(pattern, replacement)` | 根据`pattern`进行正则匹配,把匹配结果替换为`replacement` | 一个新的字符串                  |\n\n###### test()\n\n字符串的`test`方法，比较常用在判断语句中，用于检测一个字符串是否匹配某个模式：\n\n```\nRegExpObject.test(string)\n```\n\n例：如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false：\n\n```\n/\\d/.test('asdf2')\n// true （字符串中含有数字所以返回true）\n```\n\n###### match()\n\n`match()` 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n\n- 非全局匹配\n\n  例：\n\n  ```\n  var a = 'abcd'.match(/\\w/);\n  console.log(a);\n  // [\"a\", index: 0, input: \"abcd\"] （只匹配第一个就停止了）\n  ```\n\n- 全局匹配\n\n  例：\n\n  ```\n  var a = 'abcd'.match(/\\w/g);\n  console.log(a);\n  // [\"a\", \"b\", \"c\", \"d\"] （匹配全部才停止）\n  ```\n\n###### exec()\n\nexec()方法用于比较复杂的模式匹配或者是说你为你提供更多的信息：\n\n```\nRegExpObject.exec(string)\n```\n\n如果在string中找到了匹配的文本，则返回一个包含这些文本的数组，否侧返回`null`。\n\n- 返回的数组的第一个元素是与整个正则匹配的文本，然后数组的第二个元素是与整个正则的第一个子表达式(分组)相匹配的文本，数组的第三个元素整个正则的第二个子表达式(分组)相匹配的文本，以此类推。例：\n\n```\nvar result = /(\\d+)-(\\w+)/.exec('12-ab');\nconsole.log(result);\n// [\"12-ab\", \"12\", \"ab\", index: 0, input: \"12-ab\"]\n```\n\n- 从上面返回的数组结果可知，数组添加了两个额外的属性，分别是：`index, input`\n\n  `index:` 匹配文本的第一个字符的位置。\n\n  `input:` 指输入的整体的文本。\n\n  例：\n\n  ```\n  console.log(result.index)\n  // 0\n  console.log(result.input)\n  // 12-ab\n  ```\n\n  ​\n\n- 执行exec函数时，尽管是全局匹配的正则表达式，但是exec方法只对指定的字符串进行一次匹配，\n\n  获取字符串中第一个与正则表达式想匹配的内容，并且将匹配内容和子匹配的结果存储到返回的数组中。\n\n  例：\n\n  ```\n  /\\d/g.exec('aa22')\n  // [\"2\", index: 2, input: \"aa22\"] （只匹配一个数字就停止了）\n  ```\n\n  ​\n\n###### replace()\n\nreplace()方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。这个方法接收两个必须的参数：\n\n- `pattern:` 这个参数可以是字符串或是RegExp对象。\n- `replacement：` 替换匹配项的字符串或处理函数的返回值\n\n返回结果：\n\n- 当未找到匹配项的时候，返回原始字符串。\n\n  例：\n\n  ```\n  'aaaa'.replace('bbb', 'b')\n  // \"aaaa\"\n  ```\n\n- 当pattern为字符串或者为非全局的RegExp对象的时候，只替换找到的第一项匹配项。\n\n  例：\n\n  ```\n  'aaaa'.replace('a', 'b')\n  // \"baaa\"\n  ```\n\n- 当pattern为全局的RegExp对象的时候，替换每一项匹配项。\n\n  例：\n\n  ```\n  'aaaa'.replace(/\\w/g, 'b')\n  // \"bbbb\"\n  ```\n\n- replacement为函数时，函数的返回值将作为替换字符串;函数的第一个参数的值是每一个匹配项,当然还有第二个参数，它的值是每个匹配项在原始字符串的中位置，从0开始。\n\n  例：\n\n  ```\n  aaaa'.replace(/\\w/g, function() {\n      return 'b';\n  });\n  // \"bbbb\"\n  ```\n\n  ​\n\n## 最后\n\n学习正则最重要的就是正则表达式要写对，我比较笨有时候会写很久。这里推荐两个比较有用的好帮手帮助更有效率地学习正则。\n\n- <http://regex.zjmainstay.cn/>（可以在线检测表达式写的是否正确）\n- <https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24>（可以看到清晰明了的逻辑图）","slug":"regexp1","published":1,"updated":"2018-01-24T08:12:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1d0010flfy8te3cc5i","content":"<h2 id=\"正则表达式是什么？\"><a href=\"#正则表达式是什么？\" class=\"headerlink\" title=\"正则表达式是什么？\"></a>正则表达式是什么？</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\"><code>exec</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"noopener\"><code>test</code></a> 方法, 以及 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String\" target=\"_blank\" rel=\"noopener\"><code>String</code></a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\" target=\"_blank\" rel=\"noopener\"><code>match</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"noopener\"><code>replace</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\"><code>search</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\"><code>split</code></a> 方法。本章介绍JavaScript的正则表达式（因为目前我只学过JavaScript的正则表达式呀）。</p>\n<h2 id=\"可以做什么？\"><a href=\"#可以做什么？\" class=\"headerlink\" title=\"可以做什么？\"></a>可以做什么？</h2><h3 id=\"检验格式\"><a href=\"#检验格式\" class=\"headerlink\" title=\"检验格式\"></a>检验格式</h3><p>比如判断某字符串是否全部由数字组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^\\d+$/.test(&apos;12345&apos;);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">/^\\d+$/.test(&apos;12345abc&apos;);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure>\n<h3 id=\"内容替换\"><a href=\"#内容替换\" class=\"headerlink\" title=\"内容替换\"></a>内容替换</h3><p>比如将字符串中的数字替换成$号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;abcd1234&apos;.replace(/\\d/g,&apos;$&apos;);</span><br><span class=\"line\">// &quot;abcd$$$$&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取内容\"><a href=\"#提取内容\" class=\"headerlink\" title=\"提取内容\"></a>提取内容</h3><p>字符串的 <code>match</code> 方法可以将匹配到的字符串片段复制到数据中并返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;abcd1234&apos;.match(&apos;cd12&apos;);</span><br><span class=\"line\">// [&quot;cd12&quot;, index: 2, input: &quot;abcd1234&quot;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"确定位置\"><a href=\"#确定位置\" class=\"headerlink\" title=\"确定位置\"></a>确定位置</h3><p>用下面两种方法可以获得被匹配字符串片段的起始和终止位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regexp = /&lt;span&gt;.*?&lt;\\/span&gt;/g;</span><br><span class=\"line\">regexp.exec(&apos;aabb&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// [&quot;&lt;span&gt;aa&lt;/span&gt;&quot;, index: 5, input: &quot;aabb&quot;](从1数起，第一个span结尾&gt;的位置)</span><br><span class=\"line\">&apos;aabb&apos;.search(regexp);</span><br><span class=\"line\">// 5(从0数起，第一个span的&lt;的位置)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分割字符串\"><a href=\"#分割字符串\" class=\"headerlink\" title=\"分割字符串\"></a>分割字符串</h3><p>一般的字符串分割都是基于固定的分隔符，但是在某些场景下需要用正则做更复杂的处理， 比如用空格来分割字符串，如果有两个连续的空格出来的结果可能不是我们期待的， 这时就要用正则来处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a   b c&apos;.split(&apos; &apos;);</span><br><span class=\"line\">// [&quot;a&quot;, &quot;&quot;, &quot;&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"怎么玩？\"><a href=\"#怎么玩？\" class=\"headerlink\" title=\"怎么玩？\"></a>怎么玩？</h2><h3 id=\"创建正则\"><a href=\"#创建正则\" class=\"headerlink\" title=\"创建正则\"></a>创建正则</h3><p>两种方式，一种是使用一个正则表达式字面量，其由包含在斜杠之间的模式组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const regex = /ab+c/;</span><br><span class=\"line\">const regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;</span><br></pre></td></tr></table></figure>\n<p>另一种是调用<code>RegExp</code>对象的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = new RegExp(&quot;ab+c&quot;);</span><br><span class=\"line\">let regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, &quot;gi&quot;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>g :全局匹配;找到所有匹配，而不是在第一个匹配后停止</li>\n<li>i :忽略大小写</li>\n<li>m :多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。</li>\n<li>u :Unicode; 将模式视为Unicode序列点的序列</li>\n<li>y :粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</li>\n</ul>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><p>特殊字符有很多，其含义和用法可以参考MDN文档</p>\n<h3 id=\"RegExp对象方法\"><a href=\"#RegExp对象方法\" class=\"headerlink\" title=\"RegExp对象方法\"></a>RegExp对象方法</h3><p>这里想讲test、match、exec和replace这四种方法，因为这几种非常常见和常用也是我学习正则时遇到的难点。</p>\n<table>\n<thead>\n<tr>\n<th>用法</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pattern.test(str)</code></td>\n<td>判断<code>str</code>是否包含匹配结果</td>\n<td>包含返回<code>true</code>，不包含返回<code>false</code>。</td>\n</tr>\n<tr>\n<td><code>pattern.exec(str)</code></td>\n<td>根据<code>pattern</code>对<code>str</code>进行正则匹配</td>\n<td>返回匹配结果数组,如匹配不到返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>str.match(pattern)</code></td>\n<td>根据<code>pattern</code>对str进行正则匹配</td>\n<td>返回匹配结果数组,如匹配不到返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>str.replace(pattern, replacement)</code></td>\n<td>根据<code>pattern</code>进行正则匹配,把匹配结果替换为<code>replacement</code></td>\n<td>一个新的字符串</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h6><p>字符串的<code>test</code>方法，比较常用在判断语句中，用于检测一个字符串是否匹配某个模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExpObject.test(string)</span><br></pre></td></tr></table></figure>\n<p>例：如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/.test(&apos;asdf2&apos;)</span><br><span class=\"line\">// true （字符串中含有数字所以返回true）</span><br></pre></td></tr></table></figure>\n<h6 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h6><p><code>match()</code> 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>\n<ul>\n<li><p>非全局匹配</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;abcd&apos;.match(/\\w/);</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">// [&quot;a&quot;, index: 0, input: &quot;abcd&quot;] （只匹配第一个就停止了）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局匹配</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;abcd&apos;.match(/\\w/g);</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] （匹配全部才停止）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h6><p>exec()方法用于比较复杂的模式匹配或者是说你为你提供更多的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExpObject.exec(string)</span><br></pre></td></tr></table></figure>\n<p>如果在string中找到了匹配的文本，则返回一个包含这些文本的数组，否侧返回<code>null</code>。</p>\n<ul>\n<li>返回的数组的第一个元素是与整个正则匹配的文本，然后数组的第二个元素是与整个正则的第一个子表达式(分组)相匹配的文本，数组的第三个元素整个正则的第二个子表达式(分组)相匹配的文本，以此类推。例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = /(\\d+)-(\\w+)/.exec(&apos;12-ab&apos;);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">// [&quot;12-ab&quot;, &quot;12&quot;, &quot;ab&quot;, index: 0, input: &quot;12-ab&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>从上面返回的数组结果可知，数组添加了两个额外的属性，分别是：<code>index, input</code></p>\n<p><code>index:</code> 匹配文本的第一个字符的位置。</p>\n<p><code>input:</code> 指输入的整体的文本。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(result.index)</span><br><span class=\"line\">// 0</span><br><span class=\"line\">console.log(result.input)</span><br><span class=\"line\">// 12-ab</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p>执行exec函数时，尽管是全局匹配的正则表达式，但是exec方法只对指定的字符串进行一次匹配，</p>\n<p>获取字符串中第一个与正则表达式想匹配的内容，并且将匹配内容和子匹配的结果存储到返回的数组中。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/g.exec(&apos;aa22&apos;)</span><br><span class=\"line\">// [&quot;2&quot;, index: 2, input: &quot;aa22&quot;] （只匹配一个数字就停止了）</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h6 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h6><p>replace()方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。这个方法接收两个必须的参数：</p>\n<ul>\n<li><code>pattern:</code> 这个参数可以是字符串或是RegExp对象。</li>\n<li><code>replacement：</code> 替换匹配项的字符串或处理函数的返回值</li>\n</ul>\n<p>返回结果：</p>\n<ul>\n<li><p>当未找到匹配项的时候，返回原始字符串。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(&apos;bbb&apos;, &apos;b&apos;)</span><br><span class=\"line\">// &quot;aaaa&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当pattern为字符串或者为非全局的RegExp对象的时候，只替换找到的第一项匹配项。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(&apos;a&apos;, &apos;b&apos;)</span><br><span class=\"line\">// &quot;baaa&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当pattern为全局的RegExp对象的时候，替换每一项匹配项。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(/\\w/g, &apos;b&apos;)</span><br><span class=\"line\">// &quot;bbbb&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replacement为函数时，函数的返回值将作为替换字符串;函数的第一个参数的值是每一个匹配项,当然还有第二个参数，它的值是每个匹配项在原始字符串的中位置，从0开始。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaaa&apos;.replace(/\\w/g, function() &#123;</span><br><span class=\"line\">    return &apos;b&apos;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// &quot;bbbb&quot;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>学习正则最重要的就是正则表达式要写对，我比较笨有时候会写很久。这里推荐两个比较有用的好帮手帮助更有效率地学习正则。</p>\n<ul>\n<li><a href=\"http://regex.zjmainstay.cn/\" target=\"_blank\" rel=\"noopener\">http://regex.zjmainstay.cn/</a>（可以在线检测表达式写的是否正确）</li>\n<li><a href=\"https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24\" target=\"_blank\" rel=\"noopener\">https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24</a>（可以看到清晰明了的逻辑图）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则表达式是什么？\"><a href=\"#正则表达式是什么？\" class=\"headerlink\" title=\"正则表达式是什么？\"></a>正则表达式是什么？</h2><p>正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp\" target=\"_blank\" rel=\"noopener\"><code>RegExp</code></a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener\"><code>exec</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"noopener\"><code>test</code></a> 方法, 以及 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String\" target=\"_blank\" rel=\"noopener\"><code>String</code></a> 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\" target=\"_blank\" rel=\"noopener\"><code>match</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"noopener\"><code>replace</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\" target=\"_blank\" rel=\"noopener\"><code>search</code></a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\"><code>split</code></a> 方法。本章介绍JavaScript的正则表达式（因为目前我只学过JavaScript的正则表达式呀）。</p>\n<h2 id=\"可以做什么？\"><a href=\"#可以做什么？\" class=\"headerlink\" title=\"可以做什么？\"></a>可以做什么？</h2><h3 id=\"检验格式\"><a href=\"#检验格式\" class=\"headerlink\" title=\"检验格式\"></a>检验格式</h3><p>比如判断某字符串是否全部由数字组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^\\d+$/.test(&apos;12345&apos;);</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">/^\\d+$/.test(&apos;12345abc&apos;);</span><br><span class=\"line\">// false</span><br></pre></td></tr></table></figure>\n<h3 id=\"内容替换\"><a href=\"#内容替换\" class=\"headerlink\" title=\"内容替换\"></a>内容替换</h3><p>比如将字符串中的数字替换成$号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;abcd1234&apos;.replace(/\\d/g,&apos;$&apos;);</span><br><span class=\"line\">// &quot;abcd$$$$&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提取内容\"><a href=\"#提取内容\" class=\"headerlink\" title=\"提取内容\"></a>提取内容</h3><p>字符串的 <code>match</code> 方法可以将匹配到的字符串片段复制到数据中并返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;abcd1234&apos;.match(&apos;cd12&apos;);</span><br><span class=\"line\">// [&quot;cd12&quot;, index: 2, input: &quot;abcd1234&quot;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"确定位置\"><a href=\"#确定位置\" class=\"headerlink\" title=\"确定位置\"></a>确定位置</h3><p>用下面两种方法可以获得被匹配字符串片段的起始和终止位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var regexp = /&lt;span&gt;.*?&lt;\\/span&gt;/g;</span><br><span class=\"line\">regexp.exec(&apos;aabb&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// [&quot;&lt;span&gt;aa&lt;/span&gt;&quot;, index: 5, input: &quot;aabb&quot;](从1数起，第一个span结尾&gt;的位置)</span><br><span class=\"line\">&apos;aabb&apos;.search(regexp);</span><br><span class=\"line\">// 5(从0数起，第一个span的&lt;的位置)</span><br></pre></td></tr></table></figure>\n<h3 id=\"分割字符串\"><a href=\"#分割字符串\" class=\"headerlink\" title=\"分割字符串\"></a>分割字符串</h3><p>一般的字符串分割都是基于固定的分隔符，但是在某些场景下需要用正则做更复杂的处理， 比如用空格来分割字符串，如果有两个连续的空格出来的结果可能不是我们期待的， 这时就要用正则来处理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;a   b c&apos;.split(&apos; &apos;);</span><br><span class=\"line\">// [&quot;a&quot;, &quot;&quot;, &quot;&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"怎么玩？\"><a href=\"#怎么玩？\" class=\"headerlink\" title=\"怎么玩？\"></a>怎么玩？</h2><h3 id=\"创建正则\"><a href=\"#创建正则\" class=\"headerlink\" title=\"创建正则\"></a>创建正则</h3><p>两种方式，一种是使用一个正则表达式字面量，其由包含在斜杠之间的模式组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const regex = /ab+c/;</span><br><span class=\"line\">const regex = /^[a-zA-Z]+[0-9]*\\W?_$/gi;</span><br></pre></td></tr></table></figure>\n<p>另一种是调用<code>RegExp</code>对象的构造函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let regex = new RegExp(&quot;ab+c&quot;);</span><br><span class=\"line\">let regex = new RegExp(/^[a-zA-Z]+[0-9]*\\W?_$/, &quot;gi&quot;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>g :全局匹配;找到所有匹配，而不是在第一个匹配后停止</li>\n<li>i :忽略大小写</li>\n<li>m :多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。</li>\n<li>u :Unicode; 将模式视为Unicode序列点的序列</li>\n<li>y :粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</li>\n</ul>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><p>特殊字符有很多，其含义和用法可以参考MDN文档</p>\n<h3 id=\"RegExp对象方法\"><a href=\"#RegExp对象方法\" class=\"headerlink\" title=\"RegExp对象方法\"></a>RegExp对象方法</h3><p>这里想讲test、match、exec和replace这四种方法，因为这几种非常常见和常用也是我学习正则时遇到的难点。</p>\n<table>\n<thead>\n<tr>\n<th>用法</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pattern.test(str)</code></td>\n<td>判断<code>str</code>是否包含匹配结果</td>\n<td>包含返回<code>true</code>，不包含返回<code>false</code>。</td>\n</tr>\n<tr>\n<td><code>pattern.exec(str)</code></td>\n<td>根据<code>pattern</code>对<code>str</code>进行正则匹配</td>\n<td>返回匹配结果数组,如匹配不到返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>str.match(pattern)</code></td>\n<td>根据<code>pattern</code>对str进行正则匹配</td>\n<td>返回匹配结果数组,如匹配不到返回<code>null</code></td>\n</tr>\n<tr>\n<td><code>str.replace(pattern, replacement)</code></td>\n<td>根据<code>pattern</code>进行正则匹配,把匹配结果替换为<code>replacement</code></td>\n<td>一个新的字符串</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test()\"></a>test()</h6><p>字符串的<code>test</code>方法，比较常用在判断语句中，用于检测一个字符串是否匹配某个模式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExpObject.test(string)</span><br></pre></td></tr></table></figure>\n<p>例：如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/.test(&apos;asdf2&apos;)</span><br><span class=\"line\">// true （字符串中含有数字所以返回true）</span><br></pre></td></tr></table></figure>\n<h6 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match()\"></a>match()</h6><p><code>match()</code> 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>\n<ul>\n<li><p>非全局匹配</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;abcd&apos;.match(/\\w/);</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">// [&quot;a&quot;, index: 0, input: &quot;abcd&quot;] （只匹配第一个就停止了）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>全局匹配</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &apos;abcd&apos;.match(/\\w/g);</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] （匹配全部才停止）</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec()\"></a>exec()</h6><p>exec()方法用于比较复杂的模式匹配或者是说你为你提供更多的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegExpObject.exec(string)</span><br></pre></td></tr></table></figure>\n<p>如果在string中找到了匹配的文本，则返回一个包含这些文本的数组，否侧返回<code>null</code>。</p>\n<ul>\n<li>返回的数组的第一个元素是与整个正则匹配的文本，然后数组的第二个元素是与整个正则的第一个子表达式(分组)相匹配的文本，数组的第三个元素整个正则的第二个子表达式(分组)相匹配的文本，以此类推。例：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = /(\\d+)-(\\w+)/.exec(&apos;12-ab&apos;);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">// [&quot;12-ab&quot;, &quot;12&quot;, &quot;ab&quot;, index: 0, input: &quot;12-ab&quot;]</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>从上面返回的数组结果可知，数组添加了两个额外的属性，分别是：<code>index, input</code></p>\n<p><code>index:</code> 匹配文本的第一个字符的位置。</p>\n<p><code>input:</code> 指输入的整体的文本。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(result.index)</span><br><span class=\"line\">// 0</span><br><span class=\"line\">console.log(result.input)</span><br><span class=\"line\">// 12-ab</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p>执行exec函数时，尽管是全局匹配的正则表达式，但是exec方法只对指定的字符串进行一次匹配，</p>\n<p>获取字符串中第一个与正则表达式想匹配的内容，并且将匹配内容和子匹配的结果存储到返回的数组中。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\d/g.exec(&apos;aa22&apos;)</span><br><span class=\"line\">// [&quot;2&quot;, index: 2, input: &quot;aa22&quot;] （只匹配一个数字就停止了）</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h6 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h6><p>replace()方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。这个方法接收两个必须的参数：</p>\n<ul>\n<li><code>pattern:</code> 这个参数可以是字符串或是RegExp对象。</li>\n<li><code>replacement：</code> 替换匹配项的字符串或处理函数的返回值</li>\n</ul>\n<p>返回结果：</p>\n<ul>\n<li><p>当未找到匹配项的时候，返回原始字符串。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(&apos;bbb&apos;, &apos;b&apos;)</span><br><span class=\"line\">// &quot;aaaa&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当pattern为字符串或者为非全局的RegExp对象的时候，只替换找到的第一项匹配项。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(&apos;a&apos;, &apos;b&apos;)</span><br><span class=\"line\">// &quot;baaa&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当pattern为全局的RegExp对象的时候，替换每一项匹配项。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;aaaa&apos;.replace(/\\w/g, &apos;b&apos;)</span><br><span class=\"line\">// &quot;bbbb&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>replacement为函数时，函数的返回值将作为替换字符串;函数的第一个参数的值是每一个匹配项,当然还有第二个参数，它的值是每个匹配项在原始字符串的中位置，从0开始。</p>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaaa&apos;.replace(/\\w/g, function() &#123;</span><br><span class=\"line\">    return &apos;b&apos;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// &quot;bbbb&quot;</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>学习正则最重要的就是正则表达式要写对，我比较笨有时候会写很久。这里推荐两个比较有用的好帮手帮助更有效率地学习正则。</p>\n<ul>\n<li><a href=\"http://regex.zjmainstay.cn/\" target=\"_blank\" rel=\"noopener\">http://regex.zjmainstay.cn/</a>（可以在线检测表达式写的是否正确）</li>\n<li><a href=\"https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24\" target=\"_blank\" rel=\"noopener\">https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24</a>（可以看到清晰明了的逻辑图）</li>\n</ul>\n"},{"title":"Submodules子模块解决Hexo第三方主题同步更新问题","date":"2018-01-24T08:10:17.000Z","_content":"\n![最近的状态](http://p1cjg886l.bkt.clouddn.com/cry1.jpg)\n\n\n\n\n\n## 现象\n\n从远程仓库clone到本地的hexo博客无法启动，提示“WARN：NO layout：index”\n\n## 问题\n\nhexo博客的next主题不能更新到远程仓库（github），远程仓库的主题文件夹为空。\n\n## 解决方案\n\n### 一：重新clone一个新的next主题到本地\n\n从github上clone博客代码到本地后，重新clone一次next主题到本地。\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)\n$ cd Blog (进入博客根目录)\n$ npm install (视情况而定，安装依赖)\n$ rm -rf themes/next/ (移除空的主题目录)\n$ git clone https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)\n$ hexo g (部署)\n$ hexo s (启动)\n```\n\n弊端：每次都要这么做，如果你的主题有自定义，那么每次都要更新配置文件，因为重新clone下来的主题是初始的。\n\n\n\n### 二：使用git submodule管理子模块\n\n什么是[submodule](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)？`git submodule`是一个多项目使用共同类库的工具，允许类库项目做为`repository`，子项目作为一个单独的`git项目`存在父项目中，子项目可以有自己独立的`commit`，`push`，`pull`。而父项目以`submodule`的形式包含子项目，父项目可以指定子项目`header`，父项目中的提交信息包含`submodule`的信息，在`clone父项目`的时候可以把`submodule`初始化。\n\n在这里，博客`Blog`为父项目，`hexo next主题`为子项目独立存在于Blog中。\n\n**解决第三方库更新问题就是`fork+submodule`。即先在github上fork next主题仓库，然后再使用submodule。**\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)\n$ cd Blog (进入博客根目录)\n$ npm install (视情况而定，安装依赖)\n$ rm -rf themes/next/ (移除空的主题文件夹)\n$ git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)\n```\n\n\n\n在执行第5步时出现了下面这个问题：\n\n```\n'themes/next' already exists in the index\n```\n\n**解决方案：**\n\n```shell\n$ git rm -r --cached themes/next\n```\n\n\n\n然后再次执行第5步：\n\n```shell\n$ git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next\n```\n\n\n\n修改.git/config和.git/module/themes/next/config文件，在`github`前面加上自己的github名称`Evey-huang@`（不修改的话提交代码会因为没有权限而失败）：\n\n```shell\n$ vim .git/config\n```\n\n![](http://p1cjg886l.bkt.clouddn.com/submodule1.png)\n\n\n\n```shell\n$ vim .git/module/themes/next/config\n```\n\n![](http://p1cjg886l.bkt.clouddn.com/submodule2.png)\n\n\n\n做完以上修改后，可以更新next主题的配置，将自己的自定义配置覆盖原来的配置，然后提交到远程仓库`Evey-huang/hexo-theme-next`\n\n```shell\n$ cd themes/next\n$ git add .\n$ git commit -m \"update\"\n$ git push origin master\n```\n\n提交成功可以在github上看到有更改：\n![](http://p1cjg886l.bkt.clouddn.com/submodule3.png)\n\n\n\n分割线——————————————————————————\n\n以上是添加submodule以及更新next主题的全部步骤，做完这些，无论你换多少台电脑都可以快速地开始工作更新文章啦~\n\n换了电脑后如何快速开始工作？\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git\n$ cd Blog\n$ git submodule update --init\n$ cd themes/next\n$ git pull origin master (如果不做这一步，就不能更新到最新的配置)\n$ hexo g\n$ hexo s\n```\n\n\n\n## 小结\n\n其实之前就已经发现每次next主题都不能更新到github，但是工作没有受到影响就忽略了，一直拖着不解决这个问题，直到遇到了才去解决，一开始就胡乱去google得到很多教程，跟着几遍下来发现都不成功，觉得自己大概是[中了邪了]，后面仔细看了[官方解释](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)才对submodule有深入的了解，知道其工作原理，然后梳理一下思路才慢慢做成功了，于是有了这篇文章，回过头去看步骤真的很简单，只怪自己当时没看清。","source":"_posts/submodules.md","raw":"---\ntitle: Submodules子模块解决Hexo第三方主题同步更新问题\ndate: 2018-01-24 16:10:17\ntags: [git, submodule]\ncategories: git\n---\n\n![最近的状态](http://p1cjg886l.bkt.clouddn.com/cry1.jpg)\n\n\n\n\n\n## 现象\n\n从远程仓库clone到本地的hexo博客无法启动，提示“WARN：NO layout：index”\n\n## 问题\n\nhexo博客的next主题不能更新到远程仓库（github），远程仓库的主题文件夹为空。\n\n## 解决方案\n\n### 一：重新clone一个新的next主题到本地\n\n从github上clone博客代码到本地后，重新clone一次next主题到本地。\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)\n$ cd Blog (进入博客根目录)\n$ npm install (视情况而定，安装依赖)\n$ rm -rf themes/next/ (移除空的主题目录)\n$ git clone https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)\n$ hexo g (部署)\n$ hexo s (启动)\n```\n\n弊端：每次都要这么做，如果你的主题有自定义，那么每次都要更新配置文件，因为重新clone下来的主题是初始的。\n\n\n\n### 二：使用git submodule管理子模块\n\n什么是[submodule](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)？`git submodule`是一个多项目使用共同类库的工具，允许类库项目做为`repository`，子项目作为一个单独的`git项目`存在父项目中，子项目可以有自己独立的`commit`，`push`，`pull`。而父项目以`submodule`的形式包含子项目，父项目可以指定子项目`header`，父项目中的提交信息包含`submodule`的信息，在`clone父项目`的时候可以把`submodule`初始化。\n\n在这里，博客`Blog`为父项目，`hexo next主题`为子项目独立存在于Blog中。\n\n**解决第三方库更新问题就是`fork+submodule`。即先在github上fork next主题仓库，然后再使用submodule。**\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)\n$ cd Blog (进入博客根目录)\n$ npm install (视情况而定，安装依赖)\n$ rm -rf themes/next/ (移除空的主题文件夹)\n$ git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)\n```\n\n\n\n在执行第5步时出现了下面这个问题：\n\n```\n'themes/next' already exists in the index\n```\n\n**解决方案：**\n\n```shell\n$ git rm -r --cached themes/next\n```\n\n\n\n然后再次执行第5步：\n\n```shell\n$ git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next\n```\n\n\n\n修改.git/config和.git/module/themes/next/config文件，在`github`前面加上自己的github名称`Evey-huang@`（不修改的话提交代码会因为没有权限而失败）：\n\n```shell\n$ vim .git/config\n```\n\n![](http://p1cjg886l.bkt.clouddn.com/submodule1.png)\n\n\n\n```shell\n$ vim .git/module/themes/next/config\n```\n\n![](http://p1cjg886l.bkt.clouddn.com/submodule2.png)\n\n\n\n做完以上修改后，可以更新next主题的配置，将自己的自定义配置覆盖原来的配置，然后提交到远程仓库`Evey-huang/hexo-theme-next`\n\n```shell\n$ cd themes/next\n$ git add .\n$ git commit -m \"update\"\n$ git push origin master\n```\n\n提交成功可以在github上看到有更改：\n![](http://p1cjg886l.bkt.clouddn.com/submodule3.png)\n\n\n\n分割线——————————————————————————\n\n以上是添加submodule以及更新next主题的全部步骤，做完这些，无论你换多少台电脑都可以快速地开始工作更新文章啦~\n\n换了电脑后如何快速开始工作？\n\n具体操作：\n\n```shell\n$ git clone https://github.com/Evey-huang/Blog.git\n$ cd Blog\n$ git submodule update --init\n$ cd themes/next\n$ git pull origin master (如果不做这一步，就不能更新到最新的配置)\n$ hexo g\n$ hexo s\n```\n\n\n\n## 小结\n\n其实之前就已经发现每次next主题都不能更新到github，但是工作没有受到影响就忽略了，一直拖着不解决这个问题，直到遇到了才去解决，一开始就胡乱去google得到很多教程，跟着几遍下来发现都不成功，觉得自己大概是[中了邪了]，后面仔细看了[官方解释](https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97)才对submodule有深入的了解，知道其工作原理，然后梳理一下思路才慢慢做成功了，于是有了这篇文章，回过头去看步骤真的很简单，只怪自己当时没看清。","slug":"submodules","published":1,"updated":"2018-01-31T11:44:10.000Z","_id":"cjcx18d1e0014flfyywz9ddx8","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/cry1.jpg\" alt=\"最近的状态\"></p>\n<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>从远程仓库clone到本地的hexo博客无法启动，提示“WARN：NO layout：index”</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>hexo博客的next主题不能更新到远程仓库（github），远程仓库的主题文件夹为空。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"一：重新clone一个新的next主题到本地\"><a href=\"#一：重新clone一个新的next主题到本地\" class=\"headerlink\" title=\"一：重新clone一个新的next主题到本地\"></a>一：重新clone一个新的next主题到本地</h3><p>从github上clone博客代码到本地后，重新clone一次next主题到本地。</p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog (进入博客根目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install (视情况而定，安装依赖)</span><br><span class=\"line\"><span class=\"meta\">$</span> rm -rf themes/next/ (移除空的主题目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g (部署)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo s (启动)</span><br></pre></td></tr></table></figure>\n<p>弊端：每次都要这么做，如果你的主题有自定义，那么每次都要更新配置文件，因为重新clone下来的主题是初始的。</p>\n<h3 id=\"二：使用git-submodule管理子模块\"><a href=\"#二：使用git-submodule管理子模块\" class=\"headerlink\" title=\"二：使用git submodule管理子模块\"></a>二：使用git submodule管理子模块</h3><p>什么是<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">submodule</a>？<code>git submodule</code>是一个多项目使用共同类库的工具，允许类库项目做为<code>repository</code>，子项目作为一个单独的<code>git项目</code>存在父项目中，子项目可以有自己独立的<code>commit</code>，<code>push</code>，<code>pull</code>。而父项目以<code>submodule</code>的形式包含子项目，父项目可以指定子项目<code>header</code>，父项目中的提交信息包含<code>submodule</code>的信息，在<code>clone父项目</code>的时候可以把<code>submodule</code>初始化。</p>\n<p>在这里，博客<code>Blog</code>为父项目，<code>hexo next主题</code>为子项目独立存在于Blog中。</p>\n<p><strong>解决第三方库更新问题就是<code>fork+submodule</code>。即先在github上fork next主题仓库，然后再使用submodule。</strong></p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog (进入博客根目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install (视情况而定，安装依赖)</span><br><span class=\"line\"><span class=\"meta\">$</span> rm -rf themes/next/ (移除空的主题文件夹)</span><br><span class=\"line\"><span class=\"meta\">$</span> git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)</span><br></pre></td></tr></table></figure>\n<p>在执行第5步时出现了下面这个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;themes/next&apos; already exists in the index</span><br></pre></td></tr></table></figure>\n<p><strong>解决方案：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git rm -r --cached themes/next</span><br></pre></td></tr></table></figure>\n<p>然后再次执行第5步：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\n<p>修改.git/config和.git/module/themes/next/config文件，在<code>github</code>前面加上自己的github名称<code>Evey-huang@</code>（不修改的话提交代码会因为没有权限而失败）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/config</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule1.png\" alt=\"\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/module/themes/next/config</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule2.png\" alt=\"\"></p>\n<p>做完以上修改后，可以更新next主题的配置，将自己的自定义配置覆盖原来的配置，然后提交到远程仓库<code>Evey-huang/hexo-theme-next</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd themes/next</span><br><span class=\"line\"><span class=\"meta\">$</span> git add .</span><br><span class=\"line\"><span class=\"meta\">$</span> git commit -m \"update\"</span><br><span class=\"line\"><span class=\"meta\">$</span> git push origin master</span><br></pre></td></tr></table></figure>\n<p>提交成功可以在github上看到有更改：<br><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule3.png\" alt=\"\"></p>\n<p>分割线——————————————————————————</p>\n<p>以上是添加submodule以及更新next主题的全部步骤，做完这些，无论你换多少台电脑都可以快速地开始工作更新文章啦~</p>\n<p>换了电脑后如何快速开始工作？</p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog</span><br><span class=\"line\"><span class=\"meta\">$</span> git submodule update --init</span><br><span class=\"line\"><span class=\"meta\">$</span> cd themes/next</span><br><span class=\"line\"><span class=\"meta\">$</span> git pull origin master (如果不做这一步，就不能更新到最新的配置)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实之前就已经发现每次next主题都不能更新到github，但是工作没有受到影响就忽略了，一直拖着不解决这个问题，直到遇到了才去解决，一开始就胡乱去google得到很多教程，跟着几遍下来发现都不成功，觉得自己大概是[中了邪了]，后面仔细看了<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">官方解释</a>才对submodule有深入的了解，知道其工作原理，然后梳理一下思路才慢慢做成功了，于是有了这篇文章，回过头去看步骤真的很简单，只怪自己当时没看清。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/cry1.jpg\" alt=\"最近的状态\"></p>\n<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>从远程仓库clone到本地的hexo博客无法启动，提示“WARN：NO layout：index”</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>hexo博客的next主题不能更新到远程仓库（github），远程仓库的主题文件夹为空。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"一：重新clone一个新的next主题到本地\"><a href=\"#一：重新clone一个新的next主题到本地\" class=\"headerlink\" title=\"一：重新clone一个新的next主题到本地\"></a>一：重新clone一个新的next主题到本地</h3><p>从github上clone博客代码到本地后，重新clone一次next主题到本地。</p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog (进入博客根目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install (视情况而定，安装依赖)</span><br><span class=\"line\"><span class=\"meta\">$</span> rm -rf themes/next/ (移除空的主题目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g (部署)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo s (启动)</span><br></pre></td></tr></table></figure>\n<p>弊端：每次都要这么做，如果你的主题有自定义，那么每次都要更新配置文件，因为重新clone下来的主题是初始的。</p>\n<h3 id=\"二：使用git-submodule管理子模块\"><a href=\"#二：使用git-submodule管理子模块\" class=\"headerlink\" title=\"二：使用git submodule管理子模块\"></a>二：使用git submodule管理子模块</h3><p>什么是<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">submodule</a>？<code>git submodule</code>是一个多项目使用共同类库的工具，允许类库项目做为<code>repository</code>，子项目作为一个单独的<code>git项目</code>存在父项目中，子项目可以有自己独立的<code>commit</code>，<code>push</code>，<code>pull</code>。而父项目以<code>submodule</code>的形式包含子项目，父项目可以指定子项目<code>header</code>，父项目中的提交信息包含<code>submodule</code>的信息，在<code>clone父项目</code>的时候可以把<code>submodule</code>初始化。</p>\n<p>在这里，博客<code>Blog</code>为父项目，<code>hexo next主题</code>为子项目独立存在于Blog中。</p>\n<p><strong>解决第三方库更新问题就是<code>fork+submodule</code>。即先在github上fork next主题仓库，然后再使用submodule。</strong></p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git (克隆远程代码到本地)</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog (进入博客根目录)</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install (视情况而定，安装依赖)</span><br><span class=\"line\"><span class=\"meta\">$</span> rm -rf themes/next/ (移除空的主题文件夹)</span><br><span class=\"line\"><span class=\"meta\">$</span> git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next (克隆新的主题并指定本地存储目录为 themes/next)</span><br></pre></td></tr></table></figure>\n<p>在执行第5步时出现了下面这个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;themes/next&apos; already exists in the index</span><br></pre></td></tr></table></figure>\n<p><strong>解决方案：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git rm -r --cached themes/next</span><br></pre></td></tr></table></figure>\n<p>然后再次执行第5步：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git submodule add https://github.com/Evey-huang/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>\n<p>修改.git/config和.git/module/themes/next/config文件，在<code>github</code>前面加上自己的github名称<code>Evey-huang@</code>（不修改的话提交代码会因为没有权限而失败）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/config</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule1.png\" alt=\"\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vim .git/module/themes/next/config</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule2.png\" alt=\"\"></p>\n<p>做完以上修改后，可以更新next主题的配置，将自己的自定义配置覆盖原来的配置，然后提交到远程仓库<code>Evey-huang/hexo-theme-next</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cd themes/next</span><br><span class=\"line\"><span class=\"meta\">$</span> git add .</span><br><span class=\"line\"><span class=\"meta\">$</span> git commit -m \"update\"</span><br><span class=\"line\"><span class=\"meta\">$</span> git push origin master</span><br></pre></td></tr></table></figure>\n<p>提交成功可以在github上看到有更改：<br><img src=\"http://p1cjg886l.bkt.clouddn.com/submodule3.png\" alt=\"\"></p>\n<p>分割线——————————————————————————</p>\n<p>以上是添加submodule以及更新next主题的全部步骤，做完这些，无论你换多少台电脑都可以快速地开始工作更新文章啦~</p>\n<p>换了电脑后如何快速开始工作？</p>\n<p>具体操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/Evey-huang/Blog.git</span><br><span class=\"line\"><span class=\"meta\">$</span> cd Blog</span><br><span class=\"line\"><span class=\"meta\">$</span> git submodule update --init</span><br><span class=\"line\"><span class=\"meta\">$</span> cd themes/next</span><br><span class=\"line\"><span class=\"meta\">$</span> git pull origin master (如果不做这一步，就不能更新到最新的配置)</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo g</span><br><span class=\"line\"><span class=\"meta\">$</span> hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实之前就已经发现每次next主题都不能更新到github，但是工作没有受到影响就忽略了，一直拖着不解决这个问题，直到遇到了才去解决，一开始就胡乱去google得到很多教程，跟着几遍下来发现都不成功，觉得自己大概是[中了邪了]，后面仔细看了<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">官方解释</a>才对submodule有深入的了解，知道其工作原理，然后梳理一下思路才慢慢做成功了，于是有了这篇文章，回过头去看步骤真的很简单，只怪自己当时没看清。</p>\n"},{"title":"第一个单元测试","date":"2017-12-06T08:42:08.000Z","_content":"\n![JPG](http://p1cjg886l.bkt.clouddn.com/unit-vue1.jpg)\n\n一开始让我学单元测试我是拒绝的，但是无奈师傅交给的任务。看了一早上的测试文章云里雾里差点睡着，下午就决定自己先来动手实践一下单元测试，到底单元测试是什么怎么写结果是怎样。\n\n## 开始\n\n#### 创建项目\n\n使用vue-cli先创建一个vuejs项目，这里就不累赘了，另一篇文章《新建Vue项目》有写。\n\n>注意！npm install安装依赖的时候要有耐心(其实是我网速慢)千万不要随便停止，因为那可能会漏装了东西导致后面会出BUG。我就是心急导致后面测试运行失败，只好默默地把node_modules删了再重新运行npm install\n\n安装好依赖，接下来我们执行下面的命令，这个命令将会在本地运行你的应用并在浏览器中打开。\n\n```\nnpm run dev\n```\n\n在项目中，可以找到下面这些目录：`build`、`config`、`node_modules`、`src`、`static` 和 `test`。对于本教程来说最重要的是`src`，它包括我们应用的代码，用来测试。\n\n#### 第一次测试\n\n我们将从创建简单的列表组件开始。在 `src/components` 里创建一个新文件叫做 `list.vue` 并且将下面代码写进去。\n\n**list.vue**\n\n```\n<template>\n    <div>\n        <h1>My To Do List</h1>\n        <br>\n        <!-- displays list -->\n        <ul>\n            <li v-for=\"item in listItems\">{{item}}</li>\n        </ul>\n    </div>  \n</template>\n\n<script>\nexport default {\n  name: 'list',\n  data () {\n    return {\n      listItems: ['buy food', 'play games', 'sleep']\n    }\n  }\n}\n</script>\n\n```\n\n在这个组件中，列表项被储存在数组（`listItems`）里面。数据被传递到模板，然后被遍历`v-for`，最后展现在页面上。\n\n我们需要看到刚刚创建的列表，所以我们创建一个新的路由来展示这个组件。在`src/router/index.js`中创建一个路由，添加完了代码应该是下面这样的：\n\n```\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\nimport List from '@/components/list'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'HelloWorld',\n      component: HelloWorld\n    },\n    {\n      path: '/to-do',\n      name: 'ToDo',\n      component: List\n    }\n  ]\n})\n```\n\n现在，访问[localhost:8080/#/to-do](http://localhost:8080/#/to-do)，可以看到我们做的页面。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue2.png)\n\n首先，我们要测试的是数据的正确性。在`test/unit/specs`目录下创建一个`list.spec.js`，并且写入下面的代码：\n\n```\n// 在这个文件中我们describing了list.vue组件，并且创建了一个空的测试，\n// 它将要检查这个组件的列表展示，这是一个基本的Mocha测试文件\nimport Vue from 'vue'\nimport List from '@/components/list'\n\ndescribe('list.vue', () => {\n  it('display items from the list', () => {\n    // our test goes here\n    // build component   我们继承了Vue组件并安装了这个组件\n    const Constructor = Vue.extend(List)\n    const ListComponent = new Constructor().$mount()\n    // 下面是第一个断言，我们使用Chai断言提供的'expect'模式还有'should'和'assert'模式。这个断言用来检查HTML列表中的文本是否和组件的data里的数据列表吻合。\n    expect(ListComponent.$el.textContent).to.contain('play game') \n    // 可以使用ListComponent.$el来获取组件的HTML，用ListComponent.$el.textContent获取HTML内的内容\n  })\n})\n\n```\n\n\n\n最后就是使用`npm run unit`来运行`cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run`。\n\n>我就是被卡在了这里，运行`npm run unit`出现错误\n>\n>![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue3.png)\n>\n>综合github和stack overflow的回答，想了想问题可能出现在依赖安装上，我没有等它自己安装完就停止了，后来又用cnpm安装但是应该没装全，所以我把node_modules卸载了重装，现在还在装网速简直慢到不行\n>\n>![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue4.png)\n>\n>保持这个进度已经很久了，简直崩溃。\n>\n>最后建议网络慢的使用cnpm装，我用cnpm装快得飞起。\n\n如果测试都通过了，将会有一个绿色的列表来显示测试报告，让你了解测试都覆盖了哪些代码。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue5.png)\n\n#### 模拟用户输入\n\n上一步做了一个简单的功能，只能展示数据并不能做交互，下一步要做的就是做简单的交互往to-do list中添加新项目。\n\n创建一个Input框来输入内容，一个button用来提交内容。\n\n**list.vue**\n\n```\n<!--使用v-model，输入框里面的内容将和newItem进行双向绑定。\n当按钮被点击后执行addItemToList，将newItem添加到to-do list数组里，并且清空newItem里面的内容，新的项目将会被添加到列表中-->\n<template>\n    <div>\n        <h1>My To Do List</h1>\n        <br>\n        <!-- displays list -->\n        <input type=\"text\" v-model=\"newItem\"> \n        <button @click=\"addItemToList\">Add</button>\n        <ul>\n            <li v-for=\"item in listItems\">{{item}}</li>\n        </ul>\n    </div>  \n</template>\n\n<script>\nexport default {\n  name: 'test',\n  data () {\n    return {\n      listItems: ['buy food', 'play games', 'sleep'],\n      newItem: ''\n    }\n  },\n  methods: {\n    addItemToList () {\n      this.listItems.push(this.newItem)\n      this.newItem = '' // 清空newItem里面的内容\n    }\n  }\n}\n</script>\n```\n\n然后更新测试文件\n\n**list.spec.js**\n\n```\nimport Vue from 'vue'\nimport List from '@/components/list'\n\ndescribe('list.vue', () => {\n  it('add a new item to list on click', () => {\n    // build component   我们继承了Vue组件并安装了这个组件\n    const Constructor = Vue.extend(List)\n    const ListComponent = new Constructor().$mount()\n\n    // set value of new item  给newItem设置内容\n    ListComponent.newItem = 'brush my teeth'\n\n    // find button  querySelector可以像选择真的元素一样选择这个按钮。\n    const button = ListComponent.$el.querySelector('button')\n\n    // simulate click event  模拟点击事件\n    const clickEvent = new window.Event('click')\n    button.dispatchEvent(clickEvent)\n    ListComponent._watcher.run()\n\n    // assert list contains new item  检查断言列表包含新项目\n    expect(ListComponent.$el.textContent).to.contain('brush my teeth')\n    expect(ListComponent.listItems).to.contain('brush my teeth')\n  })\n})\n```\n\n运行这个测试文件`npm run unit`\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue6.png)\n\n一个完整的成功的单元测试就完成啦~","source":"_posts/unit-test.md","raw":"---\ntitle: 第一个单元测试\ndate: 2017-12-06 16:42:08\ntags: [单元测试, unit test]\ncategories: 单元测试\n---\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/unit-vue1.jpg)\n\n一开始让我学单元测试我是拒绝的，但是无奈师傅交给的任务。看了一早上的测试文章云里雾里差点睡着，下午就决定自己先来动手实践一下单元测试，到底单元测试是什么怎么写结果是怎样。\n\n## 开始\n\n#### 创建项目\n\n使用vue-cli先创建一个vuejs项目，这里就不累赘了，另一篇文章《新建Vue项目》有写。\n\n>注意！npm install安装依赖的时候要有耐心(其实是我网速慢)千万不要随便停止，因为那可能会漏装了东西导致后面会出BUG。我就是心急导致后面测试运行失败，只好默默地把node_modules删了再重新运行npm install\n\n安装好依赖，接下来我们执行下面的命令，这个命令将会在本地运行你的应用并在浏览器中打开。\n\n```\nnpm run dev\n```\n\n在项目中，可以找到下面这些目录：`build`、`config`、`node_modules`、`src`、`static` 和 `test`。对于本教程来说最重要的是`src`，它包括我们应用的代码，用来测试。\n\n#### 第一次测试\n\n我们将从创建简单的列表组件开始。在 `src/components` 里创建一个新文件叫做 `list.vue` 并且将下面代码写进去。\n\n**list.vue**\n\n```\n<template>\n    <div>\n        <h1>My To Do List</h1>\n        <br>\n        <!-- displays list -->\n        <ul>\n            <li v-for=\"item in listItems\">{{item}}</li>\n        </ul>\n    </div>  \n</template>\n\n<script>\nexport default {\n  name: 'list',\n  data () {\n    return {\n      listItems: ['buy food', 'play games', 'sleep']\n    }\n  }\n}\n</script>\n\n```\n\n在这个组件中，列表项被储存在数组（`listItems`）里面。数据被传递到模板，然后被遍历`v-for`，最后展现在页面上。\n\n我们需要看到刚刚创建的列表，所以我们创建一个新的路由来展示这个组件。在`src/router/index.js`中创建一个路由，添加完了代码应该是下面这样的：\n\n```\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\nimport List from '@/components/list'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'HelloWorld',\n      component: HelloWorld\n    },\n    {\n      path: '/to-do',\n      name: 'ToDo',\n      component: List\n    }\n  ]\n})\n```\n\n现在，访问[localhost:8080/#/to-do](http://localhost:8080/#/to-do)，可以看到我们做的页面。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue2.png)\n\n首先，我们要测试的是数据的正确性。在`test/unit/specs`目录下创建一个`list.spec.js`，并且写入下面的代码：\n\n```\n// 在这个文件中我们describing了list.vue组件，并且创建了一个空的测试，\n// 它将要检查这个组件的列表展示，这是一个基本的Mocha测试文件\nimport Vue from 'vue'\nimport List from '@/components/list'\n\ndescribe('list.vue', () => {\n  it('display items from the list', () => {\n    // our test goes here\n    // build component   我们继承了Vue组件并安装了这个组件\n    const Constructor = Vue.extend(List)\n    const ListComponent = new Constructor().$mount()\n    // 下面是第一个断言，我们使用Chai断言提供的'expect'模式还有'should'和'assert'模式。这个断言用来检查HTML列表中的文本是否和组件的data里的数据列表吻合。\n    expect(ListComponent.$el.textContent).to.contain('play game') \n    // 可以使用ListComponent.$el来获取组件的HTML，用ListComponent.$el.textContent获取HTML内的内容\n  })\n})\n\n```\n\n\n\n最后就是使用`npm run unit`来运行`cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run`。\n\n>我就是被卡在了这里，运行`npm run unit`出现错误\n>\n>![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue3.png)\n>\n>综合github和stack overflow的回答，想了想问题可能出现在依赖安装上，我没有等它自己安装完就停止了，后来又用cnpm安装但是应该没装全，所以我把node_modules卸载了重装，现在还在装网速简直慢到不行\n>\n>![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue4.png)\n>\n>保持这个进度已经很久了，简直崩溃。\n>\n>最后建议网络慢的使用cnpm装，我用cnpm装快得飞起。\n\n如果测试都通过了，将会有一个绿色的列表来显示测试报告，让你了解测试都覆盖了哪些代码。\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue5.png)\n\n#### 模拟用户输入\n\n上一步做了一个简单的功能，只能展示数据并不能做交互，下一步要做的就是做简单的交互往to-do list中添加新项目。\n\n创建一个Input框来输入内容，一个button用来提交内容。\n\n**list.vue**\n\n```\n<!--使用v-model，输入框里面的内容将和newItem进行双向绑定。\n当按钮被点击后执行addItemToList，将newItem添加到to-do list数组里，并且清空newItem里面的内容，新的项目将会被添加到列表中-->\n<template>\n    <div>\n        <h1>My To Do List</h1>\n        <br>\n        <!-- displays list -->\n        <input type=\"text\" v-model=\"newItem\"> \n        <button @click=\"addItemToList\">Add</button>\n        <ul>\n            <li v-for=\"item in listItems\">{{item}}</li>\n        </ul>\n    </div>  \n</template>\n\n<script>\nexport default {\n  name: 'test',\n  data () {\n    return {\n      listItems: ['buy food', 'play games', 'sleep'],\n      newItem: ''\n    }\n  },\n  methods: {\n    addItemToList () {\n      this.listItems.push(this.newItem)\n      this.newItem = '' // 清空newItem里面的内容\n    }\n  }\n}\n</script>\n```\n\n然后更新测试文件\n\n**list.spec.js**\n\n```\nimport Vue from 'vue'\nimport List from '@/components/list'\n\ndescribe('list.vue', () => {\n  it('add a new item to list on click', () => {\n    // build component   我们继承了Vue组件并安装了这个组件\n    const Constructor = Vue.extend(List)\n    const ListComponent = new Constructor().$mount()\n\n    // set value of new item  给newItem设置内容\n    ListComponent.newItem = 'brush my teeth'\n\n    // find button  querySelector可以像选择真的元素一样选择这个按钮。\n    const button = ListComponent.$el.querySelector('button')\n\n    // simulate click event  模拟点击事件\n    const clickEvent = new window.Event('click')\n    button.dispatchEvent(clickEvent)\n    ListComponent._watcher.run()\n\n    // assert list contains new item  检查断言列表包含新项目\n    expect(ListComponent.$el.textContent).to.contain('brush my teeth')\n    expect(ListComponent.listItems).to.contain('brush my teeth')\n  })\n})\n```\n\n运行这个测试文件`npm run unit`\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit-vue6.png)\n\n一个完整的成功的单元测试就完成啦~","slug":"unit-test","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1g0018flfygef8rj7a","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue1.jpg\" alt=\"JPG\"></p>\n<p>一开始让我学单元测试我是拒绝的，但是无奈师傅交给的任务。看了一早上的测试文章云里雾里差点睡着，下午就决定自己先来动手实践一下单元测试，到底单元测试是什么怎么写结果是怎样。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><p>使用vue-cli先创建一个vuejs项目，这里就不累赘了，另一篇文章《新建Vue项目》有写。</p>\n<blockquote>\n<p>注意！npm install安装依赖的时候要有耐心(其实是我网速慢)千万不要随便停止，因为那可能会漏装了东西导致后面会出BUG。我就是心急导致后面测试运行失败，只好默默地把node_modules删了再重新运行npm install</p>\n</blockquote>\n<p>安装好依赖，接下来我们执行下面的命令，这个命令将会在本地运行你的应用并在浏览器中打开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在项目中，可以找到下面这些目录：<code>build</code>、<code>config</code>、<code>node_modules</code>、<code>src</code>、<code>static</code> 和 <code>test</code>。对于本教程来说最重要的是<code>src</code>，它包括我们应用的代码，用来测试。</p>\n<h4 id=\"第一次测试\"><a href=\"#第一次测试\" class=\"headerlink\" title=\"第一次测试\"></a>第一次测试</h4><p>我们将从创建简单的列表组件开始。在 <code>src/components</code> 里创建一个新文件叫做 <code>list.vue</code> 并且将下面代码写进去。</p>\n<p><strong>list.vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;My To Do List&lt;/h1&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;!-- displays list --&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;item in listItems&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;  </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;list&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      listItems: [&apos;buy food&apos;, &apos;play games&apos;, &apos;sleep&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在这个组件中，列表项被储存在数组（<code>listItems</code>）里面。数据被传递到模板，然后被遍历<code>v-for</code>，最后展现在页面上。</p>\n<p>我们需要看到刚刚创建的列表，所以我们创建一个新的路由来展示这个组件。在<code>src/router/index.js</code>中创建一个路由，添加完了代码应该是下面这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Router from &apos;vue-router&apos;</span><br><span class=\"line\">import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/&apos;,</span><br><span class=\"line\">      name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">      component: HelloWorld</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/to-do&apos;,</span><br><span class=\"line\">      name: &apos;ToDo&apos;,</span><br><span class=\"line\">      component: List</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在，访问<a href=\"http://localhost:8080/#/to-do\" target=\"_blank\" rel=\"noopener\">localhost:8080/#/to-do</a>，可以看到我们做的页面。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue2.png\" alt=\"PNG\"></p>\n<p>首先，我们要测试的是数据的正确性。在<code>test/unit/specs</code>目录下创建一个<code>list.spec.js</code>，并且写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在这个文件中我们describing了list.vue组件，并且创建了一个空的测试，</span><br><span class=\"line\">// 它将要检查这个组件的列表展示，这是一个基本的Mocha测试文件</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;list.vue&apos;, () =&gt; &#123;</span><br><span class=\"line\">  it(&apos;display items from the list&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // our test goes here</span><br><span class=\"line\">    // build component   我们继承了Vue组件并安装了这个组件</span><br><span class=\"line\">    const Constructor = Vue.extend(List)</span><br><span class=\"line\">    const ListComponent = new Constructor().$mount()</span><br><span class=\"line\">    // 下面是第一个断言，我们使用Chai断言提供的&apos;expect&apos;模式还有&apos;should&apos;和&apos;assert&apos;模式。这个断言用来检查HTML列表中的文本是否和组件的data里的数据列表吻合。</span><br><span class=\"line\">    expect(ListComponent.$el.textContent).to.contain(&apos;play game&apos;) </span><br><span class=\"line\">    // 可以使用ListComponent.$el来获取组件的HTML，用ListComponent.$el.textContent获取HTML内的内容</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最后就是使用<code>npm run unit</code>来运行<code>cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run</code>。</p>\n<blockquote>\n<p>我就是被卡在了这里，运行<code>npm run unit</code>出现错误</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue3.png\" alt=\"PNG\"></p>\n<p>综合github和stack overflow的回答，想了想问题可能出现在依赖安装上，我没有等它自己安装完就停止了，后来又用cnpm安装但是应该没装全，所以我把node_modules卸载了重装，现在还在装网速简直慢到不行</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue4.png\" alt=\"PNG\"></p>\n<p>保持这个进度已经很久了，简直崩溃。</p>\n<p>最后建议网络慢的使用cnpm装，我用cnpm装快得飞起。</p>\n</blockquote>\n<p>如果测试都通过了，将会有一个绿色的列表来显示测试报告，让你了解测试都覆盖了哪些代码。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue5.png\" alt=\"PNG\"></p>\n<h4 id=\"模拟用户输入\"><a href=\"#模拟用户输入\" class=\"headerlink\" title=\"模拟用户输入\"></a>模拟用户输入</h4><p>上一步做了一个简单的功能，只能展示数据并不能做交互，下一步要做的就是做简单的交互往to-do list中添加新项目。</p>\n<p>创建一个Input框来输入内容，一个button用来提交内容。</p>\n<p><strong>list.vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--使用v-model，输入框里面的内容将和newItem进行双向绑定。</span><br><span class=\"line\">当按钮被点击后执行addItemToList，将newItem添加到to-do list数组里，并且清空newItem里面的内容，新的项目将会被添加到列表中--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;My To Do List&lt;/h1&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;!-- displays list --&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;newItem&quot;&gt; </span><br><span class=\"line\">        &lt;button @click=&quot;addItemToList&quot;&gt;Add&lt;/button&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;item in listItems&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;  </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;test&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      listItems: [&apos;buy food&apos;, &apos;play games&apos;, &apos;sleep&apos;],</span><br><span class=\"line\">      newItem: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItemToList () &#123;</span><br><span class=\"line\">      this.listItems.push(this.newItem)</span><br><span class=\"line\">      this.newItem = &apos;&apos; // 清空newItem里面的内容</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后更新测试文件</p>\n<p><strong>list.spec.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;list.vue&apos;, () =&gt; &#123;</span><br><span class=\"line\">  it(&apos;add a new item to list on click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // build component   我们继承了Vue组件并安装了这个组件</span><br><span class=\"line\">    const Constructor = Vue.extend(List)</span><br><span class=\"line\">    const ListComponent = new Constructor().$mount()</span><br><span class=\"line\"></span><br><span class=\"line\">    // set value of new item  给newItem设置内容</span><br><span class=\"line\">    ListComponent.newItem = &apos;brush my teeth&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // find button  querySelector可以像选择真的元素一样选择这个按钮。</span><br><span class=\"line\">    const button = ListComponent.$el.querySelector(&apos;button&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // simulate click event  模拟点击事件</span><br><span class=\"line\">    const clickEvent = new window.Event(&apos;click&apos;)</span><br><span class=\"line\">    button.dispatchEvent(clickEvent)</span><br><span class=\"line\">    ListComponent._watcher.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    // assert list contains new item  检查断言列表包含新项目</span><br><span class=\"line\">    expect(ListComponent.$el.textContent).to.contain(&apos;brush my teeth&apos;)</span><br><span class=\"line\">    expect(ListComponent.listItems).to.contain(&apos;brush my teeth&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行这个测试文件<code>npm run unit</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue6.png\" alt=\"PNG\"></p>\n<p>一个完整的成功的单元测试就完成啦~</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue1.jpg\" alt=\"JPG\"></p>\n<p>一开始让我学单元测试我是拒绝的，但是无奈师傅交给的任务。看了一早上的测试文章云里雾里差点睡着，下午就决定自己先来动手实践一下单元测试，到底单元测试是什么怎么写结果是怎样。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><p>使用vue-cli先创建一个vuejs项目，这里就不累赘了，另一篇文章《新建Vue项目》有写。</p>\n<blockquote>\n<p>注意！npm install安装依赖的时候要有耐心(其实是我网速慢)千万不要随便停止，因为那可能会漏装了东西导致后面会出BUG。我就是心急导致后面测试运行失败，只好默默地把node_modules删了再重新运行npm install</p>\n</blockquote>\n<p>安装好依赖，接下来我们执行下面的命令，这个命令将会在本地运行你的应用并在浏览器中打开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在项目中，可以找到下面这些目录：<code>build</code>、<code>config</code>、<code>node_modules</code>、<code>src</code>、<code>static</code> 和 <code>test</code>。对于本教程来说最重要的是<code>src</code>，它包括我们应用的代码，用来测试。</p>\n<h4 id=\"第一次测试\"><a href=\"#第一次测试\" class=\"headerlink\" title=\"第一次测试\"></a>第一次测试</h4><p>我们将从创建简单的列表组件开始。在 <code>src/components</code> 里创建一个新文件叫做 <code>list.vue</code> 并且将下面代码写进去。</p>\n<p><strong>list.vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;My To Do List&lt;/h1&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;!-- displays list --&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;item in listItems&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;  </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;list&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      listItems: [&apos;buy food&apos;, &apos;play games&apos;, &apos;sleep&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在这个组件中，列表项被储存在数组（<code>listItems</code>）里面。数据被传递到模板，然后被遍历<code>v-for</code>，最后展现在页面上。</p>\n<p>我们需要看到刚刚创建的列表，所以我们创建一个新的路由来展示这个组件。在<code>src/router/index.js</code>中创建一个路由，添加完了代码应该是下面这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Router from &apos;vue-router&apos;</span><br><span class=\"line\">import HelloWorld from &apos;@/components/HelloWorld&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/&apos;,</span><br><span class=\"line\">      name: &apos;HelloWorld&apos;,</span><br><span class=\"line\">      component: HelloWorld</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/to-do&apos;,</span><br><span class=\"line\">      name: &apos;ToDo&apos;,</span><br><span class=\"line\">      component: List</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>现在，访问<a href=\"http://localhost:8080/#/to-do\" target=\"_blank\" rel=\"noopener\">localhost:8080/#/to-do</a>，可以看到我们做的页面。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue2.png\" alt=\"PNG\"></p>\n<p>首先，我们要测试的是数据的正确性。在<code>test/unit/specs</code>目录下创建一个<code>list.spec.js</code>，并且写入下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在这个文件中我们describing了list.vue组件，并且创建了一个空的测试，</span><br><span class=\"line\">// 它将要检查这个组件的列表展示，这是一个基本的Mocha测试文件</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;list.vue&apos;, () =&gt; &#123;</span><br><span class=\"line\">  it(&apos;display items from the list&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // our test goes here</span><br><span class=\"line\">    // build component   我们继承了Vue组件并安装了这个组件</span><br><span class=\"line\">    const Constructor = Vue.extend(List)</span><br><span class=\"line\">    const ListComponent = new Constructor().$mount()</span><br><span class=\"line\">    // 下面是第一个断言，我们使用Chai断言提供的&apos;expect&apos;模式还有&apos;should&apos;和&apos;assert&apos;模式。这个断言用来检查HTML列表中的文本是否和组件的data里的数据列表吻合。</span><br><span class=\"line\">    expect(ListComponent.$el.textContent).to.contain(&apos;play game&apos;) </span><br><span class=\"line\">    // 可以使用ListComponent.$el来获取组件的HTML，用ListComponent.$el.textContent获取HTML内的内容</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>最后就是使用<code>npm run unit</code>来运行<code>cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run</code>。</p>\n<blockquote>\n<p>我就是被卡在了这里，运行<code>npm run unit</code>出现错误</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue3.png\" alt=\"PNG\"></p>\n<p>综合github和stack overflow的回答，想了想问题可能出现在依赖安装上，我没有等它自己安装完就停止了，后来又用cnpm安装但是应该没装全，所以我把node_modules卸载了重装，现在还在装网速简直慢到不行</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue4.png\" alt=\"PNG\"></p>\n<p>保持这个进度已经很久了，简直崩溃。</p>\n<p>最后建议网络慢的使用cnpm装，我用cnpm装快得飞起。</p>\n</blockquote>\n<p>如果测试都通过了，将会有一个绿色的列表来显示测试报告，让你了解测试都覆盖了哪些代码。</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue5.png\" alt=\"PNG\"></p>\n<h4 id=\"模拟用户输入\"><a href=\"#模拟用户输入\" class=\"headerlink\" title=\"模拟用户输入\"></a>模拟用户输入</h4><p>上一步做了一个简单的功能，只能展示数据并不能做交互，下一步要做的就是做简单的交互往to-do list中添加新项目。</p>\n<p>创建一个Input框来输入内容，一个button用来提交内容。</p>\n<p><strong>list.vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--使用v-model，输入框里面的内容将和newItem进行双向绑定。</span><br><span class=\"line\">当按钮被点击后执行addItemToList，将newItem添加到to-do list数组里，并且清空newItem里面的内容，新的项目将会被添加到列表中--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;My To Do List&lt;/h1&gt;</span><br><span class=\"line\">        &lt;br&gt;</span><br><span class=\"line\">        &lt;!-- displays list --&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;newItem&quot;&gt; </span><br><span class=\"line\">        &lt;button @click=&quot;addItemToList&quot;&gt;Add&lt;/button&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;item in listItems&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;  </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &apos;test&apos;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      listItems: [&apos;buy food&apos;, &apos;play games&apos;, &apos;sleep&apos;],</span><br><span class=\"line\">      newItem: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    addItemToList () &#123;</span><br><span class=\"line\">      this.listItems.push(this.newItem)</span><br><span class=\"line\">      this.newItem = &apos;&apos; // 清空newItem里面的内容</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后更新测试文件</p>\n<p><strong>list.spec.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import List from &apos;@/components/list&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(&apos;list.vue&apos;, () =&gt; &#123;</span><br><span class=\"line\">  it(&apos;add a new item to list on click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // build component   我们继承了Vue组件并安装了这个组件</span><br><span class=\"line\">    const Constructor = Vue.extend(List)</span><br><span class=\"line\">    const ListComponent = new Constructor().$mount()</span><br><span class=\"line\"></span><br><span class=\"line\">    // set value of new item  给newItem设置内容</span><br><span class=\"line\">    ListComponent.newItem = &apos;brush my teeth&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // find button  querySelector可以像选择真的元素一样选择这个按钮。</span><br><span class=\"line\">    const button = ListComponent.$el.querySelector(&apos;button&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    // simulate click event  模拟点击事件</span><br><span class=\"line\">    const clickEvent = new window.Event(&apos;click&apos;)</span><br><span class=\"line\">    button.dispatchEvent(clickEvent)</span><br><span class=\"line\">    ListComponent._watcher.run()</span><br><span class=\"line\"></span><br><span class=\"line\">    // assert list contains new item  检查断言列表包含新项目</span><br><span class=\"line\">    expect(ListComponent.$el.textContent).to.contain(&apos;brush my teeth&apos;)</span><br><span class=\"line\">    expect(ListComponent.listItems).to.contain(&apos;brush my teeth&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行这个测试文件<code>npm run unit</code></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit-vue6.png\" alt=\"PNG\"></p>\n<p>一个完整的成功的单元测试就完成啦~</p>\n"},{"title":"前端单元测试初探","date":"2017-12-08T06:49:26.000Z","_content":"\n\n\n## 什么是单元测试\n\n来自维基百科的回答\n\n> **单元测试**（英语：Unit Testing）又称为**模块测试**, 是针对**程序的最小单元**来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。一个单元可能是单个程序、函数、过程、方法等。\n\n\n\n## 需不需要写单测\n\n好的单元测试是使你开发的产品走向成功的秘密武器：\n\n1. **有助于设计**：写单元测试首先给了你一个如何设计 API 的清晰视角。\n2. **特性文档**：单元测试描述和记录了代码所要实现的所有需求。\n3. **检查开发者需求理解程度**：是否开发者足够理解问题，在测试代码里描述了所有的关键需求点？\n4. **QA（质量保证）**：依靠人工 QA 容易出错。\n5. **有助于持续交付**：自动化的 QA 能够自动防止将有缺陷的产品构建并发布上线。\n\n\n\n\n<u>**通俗地讲单测可以提高代码质量以及大幅减少bug的存在**</u>\n\n\n\n\n## 如何开始\n\n既然已经确定了单测的必要性，那么如何开始进行单测呢？\n\n\n\n### 单测工具链\n\n#### 框架\n\n目前比较火的测试框架就是[jasmine](https://jasmine.github.io/)和[mocha](https://mochajs.org/)，这里我选用mocha。\n\n##### 什么是Mocha\n\nMocha 是一个功能丰富的javascript测试框架，可以运行在nodejs和浏览器环境，使异步测试变得简单有趣。mocha 串联运行测试，允许灵活和精确地报告结果，同时映射未捕获的异常用来纠正测试用例。\n\n##### 特点\n\n- 简单\n- 灵活\n- 有趣\n\n##### 安装\n\n```shell\nnpm install -g mocha\n```\n\n\n\n#### 断言库\n\n目前比较流行的断言库主要有以下几个：\n\n- [chai](http://chaijs.com/)：`BDD/TDD` 双模 ，同时支持 `should / expect / assert` 三种风格的断言库强大插件机制。\n- [shouldjs](https://shouldjs.github.io/)：`BDD`风格断言库，由TJ Holowaychuk 发起。\n- [expectjs](https://github.com/Automattic/expect.js)：追求极简的 `BDD` 风格断言库，基于 `should.js` 简化。\n- [assert](https://nodejs.org/dist/latest-v8.x/docs/api/assert.html)：风格最保守，node 的核心模块，node 环境可以直接使用。\n\n这里我使用的是`Chai`，因为mocha+chai是黄金搭档呀\n\n##### 安装\n\n```shell\nnpm install -g chai\n```\n\n\n\n#### Mock库\n\n##### 什么是Mock\n\n编写测试的时候，可能需要和系统内的某个模块或系统外某个实体交互，例如数据库读写、邮件发送等。这时就需要使用 mock 技术来模拟。\n\n##### 有哪些Mock库\n\n[sinon.js](http://sinonjs.org/)：只用过这个，其他不大清楚。sinon允许你把代码中难以被测试的部分替换为更容易测试的内容。\n\n##### 安装\n\n```shell\nnpm install sinon\n```\n\n\n\n#### 测试集成工具\n\n[karma](https://karma-runner.github.io/)：Google Angular 团队写的，功能很强大，有很多插件\n\n##### 安装\n\n```shell\nnpm install karma --save-dev\n```\n\n\n\n### 搭建环境\n\n基于vue-cli脚手架生成的项目模板中可以自动添加测试环境，但是这不利于刚接触单测的同学去学习，以下是我从零开始搭建测试环境的经过。\n\n#### 新建项目\n\n参考另一篇文章[新建Vue项目](https://evey-huang.github.io./2017/12/04/vue-start/)也可以了解新建vue项目的步骤。\n\n##### 安装脚手架\n\n```shell\nnpm install vue-cli -g\n```\n\n\n\n##### 创建项目\n\n创建一个名为`unit-test`的项目\n\n```shell\nvue init webpack unit-test\n```\n\n\n\n然后会有询问\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit1-1.png)\n\n>这里在询问需不需要加入`unit`单测的时候选了`no`是因为本文主要是讲怎样从0开始搭建测试环境，所以创建项目的时候先不考虑加入。\n\n\n\n##### 进入项目\n\n```shell\ncd unit-test\n```\n\n\n\n##### 启动项目\n\n```shell\nnpm run dev\n```\n\n>项目正常运行的话可以开始搭建测试环境\n\n\n\n#### 测试环境搭建\n\n##### 项目整体结构\n\n```\n├── unit-test/\n    │—— build //构建脚本目录\n    |     |—— webpack.base.conf.js // wabpack基础配置\n    |     |—— webpack.prod.conf.js // wabpack生产环境配置\n    |     |—— webpack.test.conf.js // webpack测试环境配置\n    |     |—— webpack.dev.conf.js // wabpack开发环境配置\n    |     |—— vue-loader.conf.js\n    |     |—— utils.js // 构建相关工具方法\n    |\n    |—— config // 项目配置\n    |     |—— dev.env.js // 开发环境变量\n    |     |—— prod.env.js // 生产环境变量\n    |     |—— test.env.js // 测试环境变量\n    |     |—— index.js // 项目配置文件\n    |—— src // 源码目录 \n    |    |—— components\n    |            |—— HelloWorld.vue\n    |—— test\n    |    |—— unit\n    |          |—— coverage //自动生成覆盖文件夹\n    |          |—— index.js //测试文件入口\n    |          |—— karma.conf.js // karma配置文件\n    |          |—— .eslintrc //支持断言书写\n    |          |—— specs //测试用例文件夹\n    |                |—— HelloWorld.spec.js\n    |—— package.json // npm包配置文件，定义了项目的npm脚本，依赖包等信息\n```\n\n\n\n##### 安装`karma`\n\n```shell\nnpm install karma --save-dev\n```\n\n\n\n##### 进入unit文件夹\n\n```shell\ncd test/unit/\n```\n\n\n\n##### 初始化karma\n\n```shell\nkarma init\n```\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit3.png)\n\n这样就生成了一个基本的配置文件`karma.conf.js`\n\n##### 相关文件配置\n\n**karma.conf.js**\n\n```js\nvar webpackConfig = require('../../build/webpack.test.conf')\n\nmodule.exports = function (config) {\n  config.set({\n    browsers: ['PhantomJS'], // 浏览器\n    frameworks: ['mocha', 'sinon-chai', 'phantomjs-shim'], // 测试框架\n    reporters: ['spec', 'coverage'], // 测试报告\n    files: ['./index.js'], // 测试入口文件\n    preprocessors: {\n      './index.js': ['webpack', 'coverage'] // 处理测试文件\n    },\n    webpack: webpackConfig, // webpack配置\n    webpackMiddleware: {\n      noInfo: true // 不显示webpack打包日志信息\n    },\n    coverageReporter: { // 代码覆盖率报告\n      dir: './coverage',\n      reporters: [\n        { type: 'lcov', subdir: '.' },\n        { type: 'text-summary' }\n      ]\n    }\n  })\n}\n\n```\n\n\n\n**webpack.test.conf.js**\n\n```js\n\nconst utils = require('./utils')\nconst webpack = require('webpack') // 指定环境需要引入webpack\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders()\n  },\n  devtool: '#inline-source-map',\n  resolveLoader: {\n    alias: {\n      'scss-loader': 'sass-loader'\n    }\n  },\n  // 指定环境\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': require('../config/test.env')\n    })\n  ]\n})\n\n// no need for app entry during tests\ndelete webpackConfig.entry\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n**webpack.prod.conf.js**\n\n在`webpack.prod.conf.js`中引用`test.env`\n\n```js\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n```\n\n\n\n**test.env.js**\n\n```js\n'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n\n```\n\n\n\n**index.js**\n\n```js\nimport Vue from 'vue'\n\nVue.config.productionTip = false\n\nconst testsContext = require.context('./specs', true, /\\.spec$/)\ntestsContext.keys().forEach(testsContext)\n\nconst srcContext = require.context('../../src', true, /^\\.\\/(?!main(\\.js)?$)/)\nsrcContext.keys().forEach(srcContext)\n\n```\n\n\n\n**.eclintrc.js**\n\n```js\n{\n  \"env\": { \n    \"mocha\": true\n  },\n  \"globals\": { \n    \"expect\": true,\n    \"sinon\": true\n  }\n}\n```\n\n\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n  \"test\": \"npm run unit\"\n}\n\"devDependencies\": {\n  \"chai\": \"^4.1.2\",\n  \"cross-env\": \"^5.0.1\",\n  \"karma\": \"^1.7.1\",\n  \"karma-mocha\": \"^1.3.0\",\n  \"karma-coverage\": \"^1.1.1\",\n  \"karma-phantomjs-launcher\": \"^1.0.4\",\n  \"karma-phantomjs-shim\": \"^1.4.0\",\n  \"karma-sinon-chai\": \"^1.3.1\",\n  \"karma-sourcemap-loader\": \"^0.3.7\",\n  \"karma-spec-reporter\": \"0.0.31\",\n  \"karma-webpack\": \"^2.0.2\",\n  \"mocha\": \"^3.2.0\",\n  \"sinon\": \"^4.0.0\",\n  \"sinon-chai\": \"^2.8.0\"\n}\n\n```\n\n##### 安装依赖\n\n```shell\nnpm install\n```\n\n\n\n#### 测试用例\n\n官网[vue单元测试](https://cn.vuejs.org/v2/guide/unit-testing.html)有介绍测试用例怎么写，下面是一个简单的测试用例：\n\n##### 简单测试用例\n\n**HelloWorld.spec.js**\n\n```js\nimport Vue from 'vue'\nimport HelloWorld from '@/components/HelloWorld'\n\ndescribe('HelloWorld.vue', () => {\n  it('should render correct contents', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h1').textContent)\n    .to.equal('Welcome to Your Vue.js App')\n  })\n  it('should be Essential Links', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h2').textContent)\n    .to.equal('Essential Links')\n  })\n})\n\n```\n\n##### 运行测试用例\n\n```shell\nnpm run test\n```\n\n##### 生成测试报告\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit4.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit5.png)\n\n##### 测试报告分析\n\n从图中我们可以看到它有四个指标：\n\n- Statements: 语句覆盖率，执行到每个语句；\n- Branches：分支覆盖率，执行到每个if代码块；\n- Functions：函数覆盖率，调用到程序中的每一个函数；\n- Lines：行覆盖率，执行到程序中的每一行。\n\n从图中我们也可以看出覆盖率极低，打开`coverage`文件夹可以看到:\n\n```\ncoverage/\n├── lcov-report\n│   ├── base.css\n│   ├── index.html\n│   ├── prettify.css\n│   ├── prettify.js\n│   ├── sort-arrow-sprite.png\n│   ├── sorter.js\n│   └── unit\n│       ├── index.html // 测试覆盖率报告\n│       └── index.js.html // 覆盖率低的原因\n└── lcov.info\n```\n\n打开`index.js.html`可以看到覆盖率低的原因\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit6.png)\n\n从图中可以看到红色部分是测试用例没有覆盖到的地方，旁边的`1x`表示执行了`一次`。因为本文所写的测试用例`HelloWorld.spec.js`很简单没有涉及到逻辑，没有覆盖到这些函数很正常。对于实际开发来说，通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。\n\n\n\n打开`lcov.info`文件可以看到(这里我截取了部分)：\n\n```\nFN:50,getDefault\nFN:51,getModuleExports\nFN:57,(anonymous_7)\nFN:68,(anonymous_8)\n....\nFNF:694\nFNH:207\n....\nFNDA:0,simpleNormalizeChildren\nFNDA:0,normalizeChildren\nFNDA:0,isTextNode\nFNDA:0,normalizeArrayChildren\n.....\nDA:633,2\nDA:635,1\nDA:638,1\n```\n\n`FN`: 代表函数,`50` `51` `57` `68`这些行分布对应源代码中的函数开始的行号\n\n`FNF:694`: 代表一共有694个函数\n\n`FNH:207`: 代表其中207个函数被测试所覆盖\n\n`FNDA:0,isTextNode`: 代表了isTextNode这个函数被执行了0次\n\n`DA`: 代表当前被执行到的次数\n\n...\n\n还有很多解析想要了解可以google\n\n\n\n## 再谈单测\n\n完成以上步骤我觉得我懂单元测试了（可是单元测试不懂我，泪眼朦胧.jpg），但是翻过一座山又遇一条河，这条河让我觉得我又不懂单元测试了：\n\n- 在实际项目中单元测试到底测的是什么？\n- 确定了该测什么之后应该怎么去写测试用例？\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/unit2.jpg)\n\n### 单元测试到底测的是什么\n\n就我的认知来看，这些需要测：\n\n- 和安全相关的代码逻辑\n- 核心的功能模块，函数\n- 短期不会发生变化的 UI 组件\n- 提供外部调用的接口\n\n\n\n### 怎么去写测试用例\n\n真的说不好怎样去写测试用例，很多资料只是告诉你怎么写一个简单的测试用例然后跑起来，但怎样去写一个好的测试用例却不知道。目前我经验少也总结不出什么有用的建议，<u>以后再填坑吧。</u>\n\n\n\n### 什么才是一个好的测试失败报告\n\n1. 你测试的是什么？\n2. 它是做什么的？\n3. 它实际输出了什么？（实际行为）\n4. 它本该输出什么？（预期行为）\n\n\n\n## 最后\n\n本文的代码戳这里[单元测试代码](https://github.com/Evey-huang/unit-vue)","source":"_posts/unit.md","raw":"---\ntitle: 前端单元测试初探\ndate: 2017-12-08 14:49:26\ntags: [karma, mocha, chai, 单元测试]\ncategories: 单元测试\n---\n\n\n\n## 什么是单元测试\n\n来自维基百科的回答\n\n> **单元测试**（英语：Unit Testing）又称为**模块测试**, 是针对**程序的最小单元**来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。一个单元可能是单个程序、函数、过程、方法等。\n\n\n\n## 需不需要写单测\n\n好的单元测试是使你开发的产品走向成功的秘密武器：\n\n1. **有助于设计**：写单元测试首先给了你一个如何设计 API 的清晰视角。\n2. **特性文档**：单元测试描述和记录了代码所要实现的所有需求。\n3. **检查开发者需求理解程度**：是否开发者足够理解问题，在测试代码里描述了所有的关键需求点？\n4. **QA（质量保证）**：依靠人工 QA 容易出错。\n5. **有助于持续交付**：自动化的 QA 能够自动防止将有缺陷的产品构建并发布上线。\n\n\n\n\n<u>**通俗地讲单测可以提高代码质量以及大幅减少bug的存在**</u>\n\n\n\n\n## 如何开始\n\n既然已经确定了单测的必要性，那么如何开始进行单测呢？\n\n\n\n### 单测工具链\n\n#### 框架\n\n目前比较火的测试框架就是[jasmine](https://jasmine.github.io/)和[mocha](https://mochajs.org/)，这里我选用mocha。\n\n##### 什么是Mocha\n\nMocha 是一个功能丰富的javascript测试框架，可以运行在nodejs和浏览器环境，使异步测试变得简单有趣。mocha 串联运行测试，允许灵活和精确地报告结果，同时映射未捕获的异常用来纠正测试用例。\n\n##### 特点\n\n- 简单\n- 灵活\n- 有趣\n\n##### 安装\n\n```shell\nnpm install -g mocha\n```\n\n\n\n#### 断言库\n\n目前比较流行的断言库主要有以下几个：\n\n- [chai](http://chaijs.com/)：`BDD/TDD` 双模 ，同时支持 `should / expect / assert` 三种风格的断言库强大插件机制。\n- [shouldjs](https://shouldjs.github.io/)：`BDD`风格断言库，由TJ Holowaychuk 发起。\n- [expectjs](https://github.com/Automattic/expect.js)：追求极简的 `BDD` 风格断言库，基于 `should.js` 简化。\n- [assert](https://nodejs.org/dist/latest-v8.x/docs/api/assert.html)：风格最保守，node 的核心模块，node 环境可以直接使用。\n\n这里我使用的是`Chai`，因为mocha+chai是黄金搭档呀\n\n##### 安装\n\n```shell\nnpm install -g chai\n```\n\n\n\n#### Mock库\n\n##### 什么是Mock\n\n编写测试的时候，可能需要和系统内的某个模块或系统外某个实体交互，例如数据库读写、邮件发送等。这时就需要使用 mock 技术来模拟。\n\n##### 有哪些Mock库\n\n[sinon.js](http://sinonjs.org/)：只用过这个，其他不大清楚。sinon允许你把代码中难以被测试的部分替换为更容易测试的内容。\n\n##### 安装\n\n```shell\nnpm install sinon\n```\n\n\n\n#### 测试集成工具\n\n[karma](https://karma-runner.github.io/)：Google Angular 团队写的，功能很强大，有很多插件\n\n##### 安装\n\n```shell\nnpm install karma --save-dev\n```\n\n\n\n### 搭建环境\n\n基于vue-cli脚手架生成的项目模板中可以自动添加测试环境，但是这不利于刚接触单测的同学去学习，以下是我从零开始搭建测试环境的经过。\n\n#### 新建项目\n\n参考另一篇文章[新建Vue项目](https://evey-huang.github.io./2017/12/04/vue-start/)也可以了解新建vue项目的步骤。\n\n##### 安装脚手架\n\n```shell\nnpm install vue-cli -g\n```\n\n\n\n##### 创建项目\n\n创建一个名为`unit-test`的项目\n\n```shell\nvue init webpack unit-test\n```\n\n\n\n然后会有询问\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit1-1.png)\n\n>这里在询问需不需要加入`unit`单测的时候选了`no`是因为本文主要是讲怎样从0开始搭建测试环境，所以创建项目的时候先不考虑加入。\n\n\n\n##### 进入项目\n\n```shell\ncd unit-test\n```\n\n\n\n##### 启动项目\n\n```shell\nnpm run dev\n```\n\n>项目正常运行的话可以开始搭建测试环境\n\n\n\n#### 测试环境搭建\n\n##### 项目整体结构\n\n```\n├── unit-test/\n    │—— build //构建脚本目录\n    |     |—— webpack.base.conf.js // wabpack基础配置\n    |     |—— webpack.prod.conf.js // wabpack生产环境配置\n    |     |—— webpack.test.conf.js // webpack测试环境配置\n    |     |—— webpack.dev.conf.js // wabpack开发环境配置\n    |     |—— vue-loader.conf.js\n    |     |—— utils.js // 构建相关工具方法\n    |\n    |—— config // 项目配置\n    |     |—— dev.env.js // 开发环境变量\n    |     |—— prod.env.js // 生产环境变量\n    |     |—— test.env.js // 测试环境变量\n    |     |—— index.js // 项目配置文件\n    |—— src // 源码目录 \n    |    |—— components\n    |            |—— HelloWorld.vue\n    |—— test\n    |    |—— unit\n    |          |—— coverage //自动生成覆盖文件夹\n    |          |—— index.js //测试文件入口\n    |          |—— karma.conf.js // karma配置文件\n    |          |—— .eslintrc //支持断言书写\n    |          |—— specs //测试用例文件夹\n    |                |—— HelloWorld.spec.js\n    |—— package.json // npm包配置文件，定义了项目的npm脚本，依赖包等信息\n```\n\n\n\n##### 安装`karma`\n\n```shell\nnpm install karma --save-dev\n```\n\n\n\n##### 进入unit文件夹\n\n```shell\ncd test/unit/\n```\n\n\n\n##### 初始化karma\n\n```shell\nkarma init\n```\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit3.png)\n\n这样就生成了一个基本的配置文件`karma.conf.js`\n\n##### 相关文件配置\n\n**karma.conf.js**\n\n```js\nvar webpackConfig = require('../../build/webpack.test.conf')\n\nmodule.exports = function (config) {\n  config.set({\n    browsers: ['PhantomJS'], // 浏览器\n    frameworks: ['mocha', 'sinon-chai', 'phantomjs-shim'], // 测试框架\n    reporters: ['spec', 'coverage'], // 测试报告\n    files: ['./index.js'], // 测试入口文件\n    preprocessors: {\n      './index.js': ['webpack', 'coverage'] // 处理测试文件\n    },\n    webpack: webpackConfig, // webpack配置\n    webpackMiddleware: {\n      noInfo: true // 不显示webpack打包日志信息\n    },\n    coverageReporter: { // 代码覆盖率报告\n      dir: './coverage',\n      reporters: [\n        { type: 'lcov', subdir: '.' },\n        { type: 'text-summary' }\n      ]\n    }\n  })\n}\n\n```\n\n\n\n**webpack.test.conf.js**\n\n```js\n\nconst utils = require('./utils')\nconst webpack = require('webpack') // 指定环境需要引入webpack\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders()\n  },\n  devtool: '#inline-source-map',\n  resolveLoader: {\n    alias: {\n      'scss-loader': 'sass-loader'\n    }\n  },\n  // 指定环境\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': require('../config/test.env')\n    })\n  ]\n})\n\n// no need for app entry during tests\ndelete webpackConfig.entry\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n**webpack.prod.conf.js**\n\n在`webpack.prod.conf.js`中引用`test.env`\n\n```js\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n```\n\n\n\n**test.env.js**\n\n```js\n'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n\n```\n\n\n\n**index.js**\n\n```js\nimport Vue from 'vue'\n\nVue.config.productionTip = false\n\nconst testsContext = require.context('./specs', true, /\\.spec$/)\ntestsContext.keys().forEach(testsContext)\n\nconst srcContext = require.context('../../src', true, /^\\.\\/(?!main(\\.js)?$)/)\nsrcContext.keys().forEach(srcContext)\n\n```\n\n\n\n**.eclintrc.js**\n\n```js\n{\n  \"env\": { \n    \"mocha\": true\n  },\n  \"globals\": { \n    \"expect\": true,\n    \"sinon\": true\n  }\n}\n```\n\n\n\n**package.json**\n\n```json\n\"scripts\": {\n  \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n  \"test\": \"npm run unit\"\n}\n\"devDependencies\": {\n  \"chai\": \"^4.1.2\",\n  \"cross-env\": \"^5.0.1\",\n  \"karma\": \"^1.7.1\",\n  \"karma-mocha\": \"^1.3.0\",\n  \"karma-coverage\": \"^1.1.1\",\n  \"karma-phantomjs-launcher\": \"^1.0.4\",\n  \"karma-phantomjs-shim\": \"^1.4.0\",\n  \"karma-sinon-chai\": \"^1.3.1\",\n  \"karma-sourcemap-loader\": \"^0.3.7\",\n  \"karma-spec-reporter\": \"0.0.31\",\n  \"karma-webpack\": \"^2.0.2\",\n  \"mocha\": \"^3.2.0\",\n  \"sinon\": \"^4.0.0\",\n  \"sinon-chai\": \"^2.8.0\"\n}\n\n```\n\n##### 安装依赖\n\n```shell\nnpm install\n```\n\n\n\n#### 测试用例\n\n官网[vue单元测试](https://cn.vuejs.org/v2/guide/unit-testing.html)有介绍测试用例怎么写，下面是一个简单的测试用例：\n\n##### 简单测试用例\n\n**HelloWorld.spec.js**\n\n```js\nimport Vue from 'vue'\nimport HelloWorld from '@/components/HelloWorld'\n\ndescribe('HelloWorld.vue', () => {\n  it('should render correct contents', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h1').textContent)\n    .to.equal('Welcome to Your Vue.js App')\n  })\n  it('should be Essential Links', () => {\n    const Constructor = Vue.extend(HelloWorld)\n    const vm = new Constructor().$mount()\n    expect(vm.$el.querySelector('.hello h2').textContent)\n    .to.equal('Essential Links')\n  })\n})\n\n```\n\n##### 运行测试用例\n\n```shell\nnpm run test\n```\n\n##### 生成测试报告\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit4.png)\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit5.png)\n\n##### 测试报告分析\n\n从图中我们可以看到它有四个指标：\n\n- Statements: 语句覆盖率，执行到每个语句；\n- Branches：分支覆盖率，执行到每个if代码块；\n- Functions：函数覆盖率，调用到程序中的每一个函数；\n- Lines：行覆盖率，执行到程序中的每一行。\n\n从图中我们也可以看出覆盖率极低，打开`coverage`文件夹可以看到:\n\n```\ncoverage/\n├── lcov-report\n│   ├── base.css\n│   ├── index.html\n│   ├── prettify.css\n│   ├── prettify.js\n│   ├── sort-arrow-sprite.png\n│   ├── sorter.js\n│   └── unit\n│       ├── index.html // 测试覆盖率报告\n│       └── index.js.html // 覆盖率低的原因\n└── lcov.info\n```\n\n打开`index.js.html`可以看到覆盖率低的原因\n\n![PNG](http://p1cjg886l.bkt.clouddn.com/unit6.png)\n\n从图中可以看到红色部分是测试用例没有覆盖到的地方，旁边的`1x`表示执行了`一次`。因为本文所写的测试用例`HelloWorld.spec.js`很简单没有涉及到逻辑，没有覆盖到这些函数很正常。对于实际开发来说，通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。\n\n\n\n打开`lcov.info`文件可以看到(这里我截取了部分)：\n\n```\nFN:50,getDefault\nFN:51,getModuleExports\nFN:57,(anonymous_7)\nFN:68,(anonymous_8)\n....\nFNF:694\nFNH:207\n....\nFNDA:0,simpleNormalizeChildren\nFNDA:0,normalizeChildren\nFNDA:0,isTextNode\nFNDA:0,normalizeArrayChildren\n.....\nDA:633,2\nDA:635,1\nDA:638,1\n```\n\n`FN`: 代表函数,`50` `51` `57` `68`这些行分布对应源代码中的函数开始的行号\n\n`FNF:694`: 代表一共有694个函数\n\n`FNH:207`: 代表其中207个函数被测试所覆盖\n\n`FNDA:0,isTextNode`: 代表了isTextNode这个函数被执行了0次\n\n`DA`: 代表当前被执行到的次数\n\n...\n\n还有很多解析想要了解可以google\n\n\n\n## 再谈单测\n\n完成以上步骤我觉得我懂单元测试了（可是单元测试不懂我，泪眼朦胧.jpg），但是翻过一座山又遇一条河，这条河让我觉得我又不懂单元测试了：\n\n- 在实际项目中单元测试到底测的是什么？\n- 确定了该测什么之后应该怎么去写测试用例？\n\n![JPG](http://p1cjg886l.bkt.clouddn.com/unit2.jpg)\n\n### 单元测试到底测的是什么\n\n就我的认知来看，这些需要测：\n\n- 和安全相关的代码逻辑\n- 核心的功能模块，函数\n- 短期不会发生变化的 UI 组件\n- 提供外部调用的接口\n\n\n\n### 怎么去写测试用例\n\n真的说不好怎样去写测试用例，很多资料只是告诉你怎么写一个简单的测试用例然后跑起来，但怎样去写一个好的测试用例却不知道。目前我经验少也总结不出什么有用的建议，<u>以后再填坑吧。</u>\n\n\n\n### 什么才是一个好的测试失败报告\n\n1. 你测试的是什么？\n2. 它是做什么的？\n3. 它实际输出了什么？（实际行为）\n4. 它本该输出什么？（预期行为）\n\n\n\n## 最后\n\n本文的代码戳这里[单元测试代码](https://github.com/Evey-huang/unit-vue)","slug":"unit","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1h001aflfypopgyqk1","content":"<h2 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h2><p>来自维基百科的回答</p>\n<blockquote>\n<p><strong>单元测试</strong>（英语：Unit Testing）又称为<strong>模块测试</strong>, 是针对<strong>程序的最小单元</strong>来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。一个单元可能是单个程序、函数、过程、方法等。</p>\n</blockquote>\n<h2 id=\"需不需要写单测\"><a href=\"#需不需要写单测\" class=\"headerlink\" title=\"需不需要写单测\"></a>需不需要写单测</h2><p>好的单元测试是使你开发的产品走向成功的秘密武器：</p>\n<ol>\n<li><strong>有助于设计</strong>：写单元测试首先给了你一个如何设计 API 的清晰视角。</li>\n<li><strong>特性文档</strong>：单元测试描述和记录了代码所要实现的所有需求。</li>\n<li><strong>检查开发者需求理解程度</strong>：是否开发者足够理解问题，在测试代码里描述了所有的关键需求点？</li>\n<li><strong>QA（质量保证）</strong>：依靠人工 QA 容易出错。</li>\n<li><strong>有助于持续交付</strong>：自动化的 QA 能够自动防止将有缺陷的产品构建并发布上线。</li>\n</ol>\n<p><u><strong>通俗地讲单测可以提高代码质量以及大幅减少bug的存在</strong></u></p>\n<h2 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h2><p>既然已经确定了单测的必要性，那么如何开始进行单测呢？</p>\n<h3 id=\"单测工具链\"><a href=\"#单测工具链\" class=\"headerlink\" title=\"单测工具链\"></a>单测工具链</h3><h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><p>目前比较火的测试框架就是<a href=\"https://jasmine.github.io/\" target=\"_blank\" rel=\"noopener\">jasmine</a>和<a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a>，这里我选用mocha。</p>\n<h5 id=\"什么是Mocha\"><a href=\"#什么是Mocha\" class=\"headerlink\" title=\"什么是Mocha\"></a>什么是Mocha</h5><p>Mocha 是一个功能丰富的javascript测试框架，可以运行在nodejs和浏览器环境，使异步测试变得简单有趣。mocha 串联运行测试，允许灵活和精确地报告结果，同时映射未捕获的异常用来纠正测试用例。</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>简单</li>\n<li>灵活</li>\n<li>有趣</li>\n</ul>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mocha</span><br></pre></td></tr></table></figure>\n<h4 id=\"断言库\"><a href=\"#断言库\" class=\"headerlink\" title=\"断言库\"></a>断言库</h4><p>目前比较流行的断言库主要有以下几个：</p>\n<ul>\n<li><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a>：<code>BDD/TDD</code> 双模 ，同时支持 <code>should / expect / assert</code> 三种风格的断言库强大插件机制。</li>\n<li><a href=\"https://shouldjs.github.io/\" target=\"_blank\" rel=\"noopener\">shouldjs</a>：<code>BDD</code>风格断言库，由TJ Holowaychuk 发起。</li>\n<li><a href=\"https://github.com/Automattic/expect.js\" target=\"_blank\" rel=\"noopener\">expectjs</a>：追求极简的 <code>BDD</code> 风格断言库，基于 <code>should.js</code> 简化。</li>\n<li><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/assert.html\" target=\"_blank\" rel=\"noopener\">assert</a>：风格最保守，node 的核心模块，node 环境可以直接使用。</li>\n</ul>\n<p>这里我使用的是<code>Chai</code>，因为mocha+chai是黄金搭档呀</p>\n<h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g chai</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mock库\"><a href=\"#Mock库\" class=\"headerlink\" title=\"Mock库\"></a>Mock库</h4><h5 id=\"什么是Mock\"><a href=\"#什么是Mock\" class=\"headerlink\" title=\"什么是Mock\"></a>什么是Mock</h5><p>编写测试的时候，可能需要和系统内的某个模块或系统外某个实体交互，例如数据库读写、邮件发送等。这时就需要使用 mock 技术来模拟。</p>\n<h5 id=\"有哪些Mock库\"><a href=\"#有哪些Mock库\" class=\"headerlink\" title=\"有哪些Mock库\"></a>有哪些Mock库</h5><p><a href=\"http://sinonjs.org/\" target=\"_blank\" rel=\"noopener\">sinon.js</a>：只用过这个，其他不大清楚。sinon允许你把代码中难以被测试的部分替换为更容易测试的内容。</p>\n<h5 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sinon</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试集成工具\"><a href=\"#测试集成工具\" class=\"headerlink\" title=\"测试集成工具\"></a>测试集成工具</h4><p><a href=\"https://karma-runner.github.io/\" target=\"_blank\" rel=\"noopener\">karma</a>：Google Angular 团队写的，功能很强大，有很多插件</p>\n<h5 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>基于vue-cli脚手架生成的项目模板中可以自动添加测试环境，但是这不利于刚接触单测的同学去学习，以下是我从零开始搭建测试环境的经过。</p>\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><p>参考另一篇文章<a href=\"https://evey-huang.github.io./2017/12/04/vue-start/\" target=\"_blank\" rel=\"noopener\">新建Vue项目</a>也可以了解新建vue项目的步骤。</p>\n<h5 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h5><p>创建一个名为<code>unit-test</code>的项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack unit-test</span><br></pre></td></tr></table></figure>\n<p>然后会有询问</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit1-1.png\" alt=\"PNG\"></p>\n<blockquote>\n<p>这里在询问需不需要加入<code>unit</code>单测的时候选了<code>no</code>是因为本文主要是讲怎样从0开始搭建测试环境，所以创建项目的时候先不考虑加入。</p>\n</blockquote>\n<h5 id=\"进入项目\"><a href=\"#进入项目\" class=\"headerlink\" title=\"进入项目\"></a>进入项目</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd unit-test</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>项目正常运行的话可以开始搭建测试环境</p>\n</blockquote>\n<h4 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h4><h5 id=\"项目整体结构\"><a href=\"#项目整体结构\" class=\"headerlink\" title=\"项目整体结构\"></a>项目整体结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── unit-test/</span><br><span class=\"line\">    │—— build //构建脚本目录</span><br><span class=\"line\">    |     |—— webpack.base.conf.js // wabpack基础配置</span><br><span class=\"line\">    |     |—— webpack.prod.conf.js // wabpack生产环境配置</span><br><span class=\"line\">    |     |—— webpack.test.conf.js // webpack测试环境配置</span><br><span class=\"line\">    |     |—— webpack.dev.conf.js // wabpack开发环境配置</span><br><span class=\"line\">    |     |—— vue-loader.conf.js</span><br><span class=\"line\">    |     |—— utils.js // 构建相关工具方法</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |—— config // 项目配置</span><br><span class=\"line\">    |     |—— dev.env.js // 开发环境变量</span><br><span class=\"line\">    |     |—— prod.env.js // 生产环境变量</span><br><span class=\"line\">    |     |—— test.env.js // 测试环境变量</span><br><span class=\"line\">    |     |—— index.js // 项目配置文件</span><br><span class=\"line\">    |—— src // 源码目录 </span><br><span class=\"line\">    |    |—— components</span><br><span class=\"line\">    |            |—— HelloWorld.vue</span><br><span class=\"line\">    |—— test</span><br><span class=\"line\">    |    |—— unit</span><br><span class=\"line\">    |          |—— coverage //自动生成覆盖文件夹</span><br><span class=\"line\">    |          |—— index.js //测试文件入口</span><br><span class=\"line\">    |          |—— karma.conf.js // karma配置文件</span><br><span class=\"line\">    |          |—— .eslintrc //支持断言书写</span><br><span class=\"line\">    |          |—— specs //测试用例文件夹</span><br><span class=\"line\">    |                |—— HelloWorld.spec.js</span><br><span class=\"line\">    |—— package.json // npm包配置文件，定义了项目的npm脚本，依赖包等信息</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装karma\"><a href=\"#安装karma\" class=\"headerlink\" title=\"安装karma\"></a>安装<code>karma</code></h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入unit文件夹\"><a href=\"#进入unit文件夹\" class=\"headerlink\" title=\"进入unit文件夹\"></a>进入unit文件夹</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd test/unit/</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化karma\"><a href=\"#初始化karma\" class=\"headerlink\" title=\"初始化karma\"></a>初始化karma</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma init</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit3.png\" alt=\"PNG\"></p>\n<p>这样就生成了一个基本的配置文件<code>karma.conf.js</code></p>\n<h5 id=\"相关文件配置\"><a href=\"#相关文件配置\" class=\"headerlink\" title=\"相关文件配置\"></a>相关文件配置</h5><p><strong>karma.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../../build/webpack.test.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>], <span class=\"comment\">// 浏览器</span></span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'sinon-chai'</span>, <span class=\"string\">'phantomjs-shim'</span>], <span class=\"comment\">// 测试框架</span></span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>], <span class=\"comment\">// 测试报告</span></span><br><span class=\"line\">    files: [<span class=\"string\">'./index.js'</span>], <span class=\"comment\">// 测试入口文件</span></span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"string\">'./index.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'coverage'</span>] <span class=\"comment\">// 处理测试文件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpack: webpackConfig, <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">    webpackMiddleware: &#123;</span><br><span class=\"line\">      noInfo: <span class=\"literal\">true</span> <span class=\"comment\">// 不显示webpack打包日志信息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    coverageReporter: &#123; <span class=\"comment\">// 代码覆盖率报告</span></span><br><span class=\"line\">      dir: <span class=\"string\">'./coverage'</span>,</span><br><span class=\"line\">      reporters: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'lcov'</span>, <span class=\"attr\">subdir</span>: <span class=\"string\">'.'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text-summary'</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.test.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 指定环境需要引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#inline-source-map'</span>,</span><br><span class=\"line\">  resolveLoader: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'scss-loader'</span>: <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指定环境</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// no need for app entry during tests</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> webpackConfig.entry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.prod.conf.js</strong></p>\n<p>在<code>webpack.prod.conf.js</code>中引用<code>test.env</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV === <span class=\"string\">'testing'</span></span><br><span class=\"line\">  ? <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">  : <span class=\"built_in\">require</span>(<span class=\"string\">'../config/prod.env'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>test.env.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(devEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"testing\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testsContext = <span class=\"built_in\">require</span>.context(<span class=\"string\">'./specs'</span>, <span class=\"literal\">true</span>, /\\.spec$/)</span><br><span class=\"line\">testsContext.keys().forEach(testsContext)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> srcContext = <span class=\"built_in\">require</span>.context(<span class=\"string\">'../../src'</span>, <span class=\"literal\">true</span>, /^\\.\\/(?!main(\\.js)?$)/)</span><br><span class=\"line\">srcContext.keys().forEach(srcContext)</span><br></pre></td></tr></table></figure>\n<p><strong>.eclintrc.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"globals\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"expect\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sinon\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",</span><br><span class=\"line\">  \"test\": \"npm run unit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">  \"chai\": \"^4.1.2\",</span><br><span class=\"line\">  \"cross-env\": \"^5.0.1\",</span><br><span class=\"line\">  \"karma\": \"^1.7.1\",</span><br><span class=\"line\">  \"karma-mocha\": \"^1.3.0\",</span><br><span class=\"line\">  \"karma-coverage\": \"^1.1.1\",</span><br><span class=\"line\">  \"karma-phantomjs-launcher\": \"^1.0.4\",</span><br><span class=\"line\">  \"karma-phantomjs-shim\": \"^1.4.0\",</span><br><span class=\"line\">  \"karma-sinon-chai\": \"^1.3.1\",</span><br><span class=\"line\">  \"karma-sourcemap-loader\": \"^0.3.7\",</span><br><span class=\"line\">  \"karma-spec-reporter\": \"0.0.31\",</span><br><span class=\"line\">  \"karma-webpack\": \"^2.0.2\",</span><br><span class=\"line\">  \"mocha\": \"^3.2.0\",</span><br><span class=\"line\">  \"sinon\": \"^4.0.0\",</span><br><span class=\"line\">  \"sinon-chai\": \"^2.8.0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>官网<a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\" target=\"_blank\" rel=\"noopener\">vue单元测试</a>有介绍测试用例怎么写，下面是一个简单的测试用例：</p>\n<h5 id=\"简单测试用例\"><a href=\"#简单测试用例\" class=\"headerlink\" title=\"简单测试用例\"></a>简单测试用例</h5><p><strong>HelloWorld.spec.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'HelloWorld.vue'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should render correct contents'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h1'</span>).textContent)</span><br><span class=\"line\">    .to.equal(<span class=\"string\">'Welcome to Your Vue.js App'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  it(<span class=\"string\">'should be Essential Links'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h2'</span>).textContent)</span><br><span class=\"line\">    .to.equal(<span class=\"string\">'Essential Links'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"运行测试用例\"><a href=\"#运行测试用例\" class=\"headerlink\" title=\"运行测试用例\"></a>运行测试用例</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test</span><br></pre></td></tr></table></figure>\n<h5 id=\"生成测试报告\"><a href=\"#生成测试报告\" class=\"headerlink\" title=\"生成测试报告\"></a>生成测试报告</h5><p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit4.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit5.png\" alt=\"PNG\"></p>\n<h5 id=\"测试报告分析\"><a href=\"#测试报告分析\" class=\"headerlink\" title=\"测试报告分析\"></a>测试报告分析</h5><p>从图中我们可以看到它有四个指标：</p>\n<ul>\n<li>Statements: 语句覆盖率，执行到每个语句；</li>\n<li>Branches：分支覆盖率，执行到每个if代码块；</li>\n<li>Functions：函数覆盖率，调用到程序中的每一个函数；</li>\n<li>Lines：行覆盖率，执行到程序中的每一行。</li>\n</ul>\n<p>从图中我们也可以看出覆盖率极低，打开<code>coverage</code>文件夹可以看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coverage/</span><br><span class=\"line\">├── lcov-report</span><br><span class=\"line\">│   ├── base.css</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   ├── prettify.css</span><br><span class=\"line\">│   ├── prettify.js</span><br><span class=\"line\">│   ├── sort-arrow-sprite.png</span><br><span class=\"line\">│   ├── sorter.js</span><br><span class=\"line\">│   └── unit</span><br><span class=\"line\">│       ├── index.html // 测试覆盖率报告</span><br><span class=\"line\">│       └── index.js.html // 覆盖率低的原因</span><br><span class=\"line\">└── lcov.info</span><br></pre></td></tr></table></figure>\n<p>打开<code>index.js.html</code>可以看到覆盖率低的原因</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit6.png\" alt=\"PNG\"></p>\n<p>从图中可以看到红色部分是测试用例没有覆盖到的地方，旁边的<code>1x</code>表示执行了<code>一次</code>。因为本文所写的测试用例<code>HelloWorld.spec.js</code>很简单没有涉及到逻辑，没有覆盖到这些函数很正常。对于实际开发来说，通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。</p>\n<p>打开<code>lcov.info</code>文件可以看到(这里我截取了部分)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FN:50,getDefault</span><br><span class=\"line\">FN:51,getModuleExports</span><br><span class=\"line\">FN:57,(anonymous_7)</span><br><span class=\"line\">FN:68,(anonymous_8)</span><br><span class=\"line\">....</span><br><span class=\"line\">FNF:694</span><br><span class=\"line\">FNH:207</span><br><span class=\"line\">....</span><br><span class=\"line\">FNDA:0,simpleNormalizeChildren</span><br><span class=\"line\">FNDA:0,normalizeChildren</span><br><span class=\"line\">FNDA:0,isTextNode</span><br><span class=\"line\">FNDA:0,normalizeArrayChildren</span><br><span class=\"line\">.....</span><br><span class=\"line\">DA:633,2</span><br><span class=\"line\">DA:635,1</span><br><span class=\"line\">DA:638,1</span><br></pre></td></tr></table></figure>\n<p><code>FN</code>: 代表函数,<code>50</code> <code>51</code> <code>57</code> <code>68</code>这些行分布对应源代码中的函数开始的行号</p>\n<p><code>FNF:694</code>: 代表一共有694个函数</p>\n<p><code>FNH:207</code>: 代表其中207个函数被测试所覆盖</p>\n<p><code>FNDA:0,isTextNode</code>: 代表了isTextNode这个函数被执行了0次</p>\n<p><code>DA</code>: 代表当前被执行到的次数</p>\n<p>…</p>\n<p>还有很多解析想要了解可以google</p>\n<h2 id=\"再谈单测\"><a href=\"#再谈单测\" class=\"headerlink\" title=\"再谈单测\"></a>再谈单测</h2><p>完成以上步骤我觉得我懂单元测试了（可是单元测试不懂我，泪眼朦胧.jpg），但是翻过一座山又遇一条河，这条河让我觉得我又不懂单元测试了：</p>\n<ul>\n<li>在实际项目中单元测试到底测的是什么？</li>\n<li>确定了该测什么之后应该怎么去写测试用例？</li>\n</ul>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit2.jpg\" alt=\"JPG\"></p>\n<h3 id=\"单元测试到底测的是什么\"><a href=\"#单元测试到底测的是什么\" class=\"headerlink\" title=\"单元测试到底测的是什么\"></a>单元测试到底测的是什么</h3><p>就我的认知来看，这些需要测：</p>\n<ul>\n<li>和安全相关的代码逻辑</li>\n<li>核心的功能模块，函数</li>\n<li>短期不会发生变化的 UI 组件</li>\n<li>提供外部调用的接口</li>\n</ul>\n<h3 id=\"怎么去写测试用例\"><a href=\"#怎么去写测试用例\" class=\"headerlink\" title=\"怎么去写测试用例\"></a>怎么去写测试用例</h3><p>真的说不好怎样去写测试用例，很多资料只是告诉你怎么写一个简单的测试用例然后跑起来，但怎样去写一个好的测试用例却不知道。目前我经验少也总结不出什么有用的建议，<u>以后再填坑吧。</u></p>\n<h3 id=\"什么才是一个好的测试失败报告\"><a href=\"#什么才是一个好的测试失败报告\" class=\"headerlink\" title=\"什么才是一个好的测试失败报告\"></a>什么才是一个好的测试失败报告</h3><ol>\n<li>你测试的是什么？</li>\n<li>它是做什么的？</li>\n<li>它实际输出了什么？（实际行为）</li>\n<li>它本该输出什么？（预期行为）</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>本文的代码戳这里<a href=\"https://github.com/Evey-huang/unit-vue\" target=\"_blank\" rel=\"noopener\">单元测试代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h2><p>来自维基百科的回答</p>\n<blockquote>\n<p><strong>单元测试</strong>（英语：Unit Testing）又称为<strong>模块测试</strong>, 是针对<strong>程序的最小单元</strong>来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。一个单元可能是单个程序、函数、过程、方法等。</p>\n</blockquote>\n<h2 id=\"需不需要写单测\"><a href=\"#需不需要写单测\" class=\"headerlink\" title=\"需不需要写单测\"></a>需不需要写单测</h2><p>好的单元测试是使你开发的产品走向成功的秘密武器：</p>\n<ol>\n<li><strong>有助于设计</strong>：写单元测试首先给了你一个如何设计 API 的清晰视角。</li>\n<li><strong>特性文档</strong>：单元测试描述和记录了代码所要实现的所有需求。</li>\n<li><strong>检查开发者需求理解程度</strong>：是否开发者足够理解问题，在测试代码里描述了所有的关键需求点？</li>\n<li><strong>QA（质量保证）</strong>：依靠人工 QA 容易出错。</li>\n<li><strong>有助于持续交付</strong>：自动化的 QA 能够自动防止将有缺陷的产品构建并发布上线。</li>\n</ol>\n<p><u><strong>通俗地讲单测可以提高代码质量以及大幅减少bug的存在</strong></u></p>\n<h2 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h2><p>既然已经确定了单测的必要性，那么如何开始进行单测呢？</p>\n<h3 id=\"单测工具链\"><a href=\"#单测工具链\" class=\"headerlink\" title=\"单测工具链\"></a>单测工具链</h3><h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><p>目前比较火的测试框架就是<a href=\"https://jasmine.github.io/\" target=\"_blank\" rel=\"noopener\">jasmine</a>和<a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a>，这里我选用mocha。</p>\n<h5 id=\"什么是Mocha\"><a href=\"#什么是Mocha\" class=\"headerlink\" title=\"什么是Mocha\"></a>什么是Mocha</h5><p>Mocha 是一个功能丰富的javascript测试框架，可以运行在nodejs和浏览器环境，使异步测试变得简单有趣。mocha 串联运行测试，允许灵活和精确地报告结果，同时映射未捕获的异常用来纠正测试用例。</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><ul>\n<li>简单</li>\n<li>灵活</li>\n<li>有趣</li>\n</ul>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g mocha</span><br></pre></td></tr></table></figure>\n<h4 id=\"断言库\"><a href=\"#断言库\" class=\"headerlink\" title=\"断言库\"></a>断言库</h4><p>目前比较流行的断言库主要有以下几个：</p>\n<ul>\n<li><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a>：<code>BDD/TDD</code> 双模 ，同时支持 <code>should / expect / assert</code> 三种风格的断言库强大插件机制。</li>\n<li><a href=\"https://shouldjs.github.io/\" target=\"_blank\" rel=\"noopener\">shouldjs</a>：<code>BDD</code>风格断言库，由TJ Holowaychuk 发起。</li>\n<li><a href=\"https://github.com/Automattic/expect.js\" target=\"_blank\" rel=\"noopener\">expectjs</a>：追求极简的 <code>BDD</code> 风格断言库，基于 <code>should.js</code> 简化。</li>\n<li><a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/assert.html\" target=\"_blank\" rel=\"noopener\">assert</a>：风格最保守，node 的核心模块，node 环境可以直接使用。</li>\n</ul>\n<p>这里我使用的是<code>Chai</code>，因为mocha+chai是黄金搭档呀</p>\n<h5 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g chai</span><br></pre></td></tr></table></figure>\n<h4 id=\"Mock库\"><a href=\"#Mock库\" class=\"headerlink\" title=\"Mock库\"></a>Mock库</h4><h5 id=\"什么是Mock\"><a href=\"#什么是Mock\" class=\"headerlink\" title=\"什么是Mock\"></a>什么是Mock</h5><p>编写测试的时候，可能需要和系统内的某个模块或系统外某个实体交互，例如数据库读写、邮件发送等。这时就需要使用 mock 技术来模拟。</p>\n<h5 id=\"有哪些Mock库\"><a href=\"#有哪些Mock库\" class=\"headerlink\" title=\"有哪些Mock库\"></a>有哪些Mock库</h5><p><a href=\"http://sinonjs.org/\" target=\"_blank\" rel=\"noopener\">sinon.js</a>：只用过这个，其他不大清楚。sinon允许你把代码中难以被测试的部分替换为更容易测试的内容。</p>\n<h5 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sinon</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试集成工具\"><a href=\"#测试集成工具\" class=\"headerlink\" title=\"测试集成工具\"></a>测试集成工具</h4><p><a href=\"https://karma-runner.github.io/\" target=\"_blank\" rel=\"noopener\">karma</a>：Google Angular 团队写的，功能很强大，有很多插件</p>\n<h5 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>基于vue-cli脚手架生成的项目模板中可以自动添加测试环境，但是这不利于刚接触单测的同学去学习，以下是我从零开始搭建测试环境的经过。</p>\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><p>参考另一篇文章<a href=\"https://evey-huang.github.io./2017/12/04/vue-start/\" target=\"_blank\" rel=\"noopener\">新建Vue项目</a>也可以了解新建vue项目的步骤。</p>\n<h5 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h5><p>创建一个名为<code>unit-test</code>的项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack unit-test</span><br></pre></td></tr></table></figure>\n<p>然后会有询问</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit1-1.png\" alt=\"PNG\"></p>\n<blockquote>\n<p>这里在询问需不需要加入<code>unit</code>单测的时候选了<code>no</code>是因为本文主要是讲怎样从0开始搭建测试环境，所以创建项目的时候先不考虑加入。</p>\n</blockquote>\n<h5 id=\"进入项目\"><a href=\"#进入项目\" class=\"headerlink\" title=\"进入项目\"></a>进入项目</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd unit-test</span><br></pre></td></tr></table></figure>\n<h5 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>项目正常运行的话可以开始搭建测试环境</p>\n</blockquote>\n<h4 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h4><h5 id=\"项目整体结构\"><a href=\"#项目整体结构\" class=\"headerlink\" title=\"项目整体结构\"></a>项目整体结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── unit-test/</span><br><span class=\"line\">    │—— build //构建脚本目录</span><br><span class=\"line\">    |     |—— webpack.base.conf.js // wabpack基础配置</span><br><span class=\"line\">    |     |—— webpack.prod.conf.js // wabpack生产环境配置</span><br><span class=\"line\">    |     |—— webpack.test.conf.js // webpack测试环境配置</span><br><span class=\"line\">    |     |—— webpack.dev.conf.js // wabpack开发环境配置</span><br><span class=\"line\">    |     |—— vue-loader.conf.js</span><br><span class=\"line\">    |     |—— utils.js // 构建相关工具方法</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |—— config // 项目配置</span><br><span class=\"line\">    |     |—— dev.env.js // 开发环境变量</span><br><span class=\"line\">    |     |—— prod.env.js // 生产环境变量</span><br><span class=\"line\">    |     |—— test.env.js // 测试环境变量</span><br><span class=\"line\">    |     |—— index.js // 项目配置文件</span><br><span class=\"line\">    |—— src // 源码目录 </span><br><span class=\"line\">    |    |—— components</span><br><span class=\"line\">    |            |—— HelloWorld.vue</span><br><span class=\"line\">    |—— test</span><br><span class=\"line\">    |    |—— unit</span><br><span class=\"line\">    |          |—— coverage //自动生成覆盖文件夹</span><br><span class=\"line\">    |          |—— index.js //测试文件入口</span><br><span class=\"line\">    |          |—— karma.conf.js // karma配置文件</span><br><span class=\"line\">    |          |—— .eslintrc //支持断言书写</span><br><span class=\"line\">    |          |—— specs //测试用例文件夹</span><br><span class=\"line\">    |                |—— HelloWorld.spec.js</span><br><span class=\"line\">    |—— package.json // npm包配置文件，定义了项目的npm脚本，依赖包等信息</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装karma\"><a href=\"#安装karma\" class=\"headerlink\" title=\"安装karma\"></a>安装<code>karma</code></h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install karma --save-dev</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入unit文件夹\"><a href=\"#进入unit文件夹\" class=\"headerlink\" title=\"进入unit文件夹\"></a>进入unit文件夹</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd test/unit/</span><br></pre></td></tr></table></figure>\n<h5 id=\"初始化karma\"><a href=\"#初始化karma\" class=\"headerlink\" title=\"初始化karma\"></a>初始化karma</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">karma init</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit3.png\" alt=\"PNG\"></p>\n<p>这样就生成了一个基本的配置文件<code>karma.conf.js</code></p>\n<h5 id=\"相关文件配置\"><a href=\"#相关文件配置\" class=\"headerlink\" title=\"相关文件配置\"></a>相关文件配置</h5><p><strong>karma.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../../build/webpack.test.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>], <span class=\"comment\">// 浏览器</span></span><br><span class=\"line\">    frameworks: [<span class=\"string\">'mocha'</span>, <span class=\"string\">'sinon-chai'</span>, <span class=\"string\">'phantomjs-shim'</span>], <span class=\"comment\">// 测试框架</span></span><br><span class=\"line\">    reporters: [<span class=\"string\">'spec'</span>, <span class=\"string\">'coverage'</span>], <span class=\"comment\">// 测试报告</span></span><br><span class=\"line\">    files: [<span class=\"string\">'./index.js'</span>], <span class=\"comment\">// 测试入口文件</span></span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">      <span class=\"string\">'./index.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'coverage'</span>] <span class=\"comment\">// 处理测试文件</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    webpack: webpackConfig, <span class=\"comment\">// webpack配置</span></span><br><span class=\"line\">    webpackMiddleware: &#123;</span><br><span class=\"line\">      noInfo: <span class=\"literal\">true</span> <span class=\"comment\">// 不显示webpack打包日志信息</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    coverageReporter: &#123; <span class=\"comment\">// 代码覆盖率报告</span></span><br><span class=\"line\">      dir: <span class=\"string\">'./coverage'</span>,</span><br><span class=\"line\">      reporters: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'lcov'</span>, <span class=\"attr\">subdir</span>: <span class=\"string\">'.'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">type</span>: <span class=\"string\">'text-summary'</span> &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.test.conf.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>) <span class=\"comment\">// 指定环境需要引入webpack</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#inline-source-map'</span>,</span><br><span class=\"line\">  resolveLoader: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'scss-loader'</span>: <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 指定环境</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// no need for app entry during tests</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> webpackConfig.entry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<p><strong>webpack.prod.conf.js</strong></p>\n<p>在<code>webpack.prod.conf.js</code>中引用<code>test.env</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV === <span class=\"string\">'testing'</span></span><br><span class=\"line\">  ? <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">  : <span class=\"built_in\">require</span>(<span class=\"string\">'../config/prod.env'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>test.env.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(devEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"testing\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>index.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> testsContext = <span class=\"built_in\">require</span>.context(<span class=\"string\">'./specs'</span>, <span class=\"literal\">true</span>, /\\.spec$/)</span><br><span class=\"line\">testsContext.keys().forEach(testsContext)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> srcContext = <span class=\"built_in\">require</span>.context(<span class=\"string\">'../../src'</span>, <span class=\"literal\">true</span>, /^\\.\\/(?!main(\\.js)?$)/)</span><br><span class=\"line\">srcContext.keys().forEach(srcContext)</span><br></pre></td></tr></table></figure>\n<p><strong>.eclintrc.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"mocha\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"globals\"</span>: &#123; </span><br><span class=\"line\">    <span class=\"string\">\"expect\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sinon\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>package.json</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",</span><br><span class=\"line\">  \"test\": \"npm run unit\"</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\"devDependencies\": &#123;</span><br><span class=\"line\">  \"chai\": \"^4.1.2\",</span><br><span class=\"line\">  \"cross-env\": \"^5.0.1\",</span><br><span class=\"line\">  \"karma\": \"^1.7.1\",</span><br><span class=\"line\">  \"karma-mocha\": \"^1.3.0\",</span><br><span class=\"line\">  \"karma-coverage\": \"^1.1.1\",</span><br><span class=\"line\">  \"karma-phantomjs-launcher\": \"^1.0.4\",</span><br><span class=\"line\">  \"karma-phantomjs-shim\": \"^1.4.0\",</span><br><span class=\"line\">  \"karma-sinon-chai\": \"^1.3.1\",</span><br><span class=\"line\">  \"karma-sourcemap-loader\": \"^0.3.7\",</span><br><span class=\"line\">  \"karma-spec-reporter\": \"0.0.31\",</span><br><span class=\"line\">  \"karma-webpack\": \"^2.0.2\",</span><br><span class=\"line\">  \"mocha\": \"^3.2.0\",</span><br><span class=\"line\">  \"sinon\": \"^4.0.0\",</span><br><span class=\"line\">  \"sinon-chai\": \"^2.8.0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>官网<a href=\"https://cn.vuejs.org/v2/guide/unit-testing.html\" target=\"_blank\" rel=\"noopener\">vue单元测试</a>有介绍测试用例怎么写，下面是一个简单的测试用例：</p>\n<h5 id=\"简单测试用例\"><a href=\"#简单测试用例\" class=\"headerlink\" title=\"简单测试用例\"></a>简单测试用例</h5><p><strong>HelloWorld.spec.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">'@/components/HelloWorld'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'HelloWorld.vue'</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should render correct contents'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h1'</span>).textContent)</span><br><span class=\"line\">    .to.equal(<span class=\"string\">'Welcome to Your Vue.js App'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  it(<span class=\"string\">'should be Essential Links'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> Constructor = Vue.extend(HelloWorld)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Constructor().$mount()</span><br><span class=\"line\">    expect(vm.$el.querySelector(<span class=\"string\">'.hello h2'</span>).textContent)</span><br><span class=\"line\">    .to.equal(<span class=\"string\">'Essential Links'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"运行测试用例\"><a href=\"#运行测试用例\" class=\"headerlink\" title=\"运行测试用例\"></a>运行测试用例</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run test</span><br></pre></td></tr></table></figure>\n<h5 id=\"生成测试报告\"><a href=\"#生成测试报告\" class=\"headerlink\" title=\"生成测试报告\"></a>生成测试报告</h5><p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit4.png\" alt=\"PNG\"></p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit5.png\" alt=\"PNG\"></p>\n<h5 id=\"测试报告分析\"><a href=\"#测试报告分析\" class=\"headerlink\" title=\"测试报告分析\"></a>测试报告分析</h5><p>从图中我们可以看到它有四个指标：</p>\n<ul>\n<li>Statements: 语句覆盖率，执行到每个语句；</li>\n<li>Branches：分支覆盖率，执行到每个if代码块；</li>\n<li>Functions：函数覆盖率，调用到程序中的每一个函数；</li>\n<li>Lines：行覆盖率，执行到程序中的每一行。</li>\n</ul>\n<p>从图中我们也可以看出覆盖率极低，打开<code>coverage</code>文件夹可以看到:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coverage/</span><br><span class=\"line\">├── lcov-report</span><br><span class=\"line\">│   ├── base.css</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   ├── prettify.css</span><br><span class=\"line\">│   ├── prettify.js</span><br><span class=\"line\">│   ├── sort-arrow-sprite.png</span><br><span class=\"line\">│   ├── sorter.js</span><br><span class=\"line\">│   └── unit</span><br><span class=\"line\">│       ├── index.html // 测试覆盖率报告</span><br><span class=\"line\">│       └── index.js.html // 覆盖率低的原因</span><br><span class=\"line\">└── lcov.info</span><br></pre></td></tr></table></figure>\n<p>打开<code>index.js.html</code>可以看到覆盖率低的原因</p>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit6.png\" alt=\"PNG\"></p>\n<p>从图中可以看到红色部分是测试用例没有覆盖到的地方，旁边的<code>1x</code>表示执行了<code>一次</code>。因为本文所写的测试用例<code>HelloWorld.spec.js</code>很简单没有涉及到逻辑，没有覆盖到这些函数很正常。对于实际开发来说，通过这个清晰的报告，我们可以在代码中看出那些函数，那些代码块没有被执行，从而去分析原因，修正测试用例，完善代码逻辑，提高质量。</p>\n<p>打开<code>lcov.info</code>文件可以看到(这里我截取了部分)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FN:50,getDefault</span><br><span class=\"line\">FN:51,getModuleExports</span><br><span class=\"line\">FN:57,(anonymous_7)</span><br><span class=\"line\">FN:68,(anonymous_8)</span><br><span class=\"line\">....</span><br><span class=\"line\">FNF:694</span><br><span class=\"line\">FNH:207</span><br><span class=\"line\">....</span><br><span class=\"line\">FNDA:0,simpleNormalizeChildren</span><br><span class=\"line\">FNDA:0,normalizeChildren</span><br><span class=\"line\">FNDA:0,isTextNode</span><br><span class=\"line\">FNDA:0,normalizeArrayChildren</span><br><span class=\"line\">.....</span><br><span class=\"line\">DA:633,2</span><br><span class=\"line\">DA:635,1</span><br><span class=\"line\">DA:638,1</span><br></pre></td></tr></table></figure>\n<p><code>FN</code>: 代表函数,<code>50</code> <code>51</code> <code>57</code> <code>68</code>这些行分布对应源代码中的函数开始的行号</p>\n<p><code>FNF:694</code>: 代表一共有694个函数</p>\n<p><code>FNH:207</code>: 代表其中207个函数被测试所覆盖</p>\n<p><code>FNDA:0,isTextNode</code>: 代表了isTextNode这个函数被执行了0次</p>\n<p><code>DA</code>: 代表当前被执行到的次数</p>\n<p>…</p>\n<p>还有很多解析想要了解可以google</p>\n<h2 id=\"再谈单测\"><a href=\"#再谈单测\" class=\"headerlink\" title=\"再谈单测\"></a>再谈单测</h2><p>完成以上步骤我觉得我懂单元测试了（可是单元测试不懂我，泪眼朦胧.jpg），但是翻过一座山又遇一条河，这条河让我觉得我又不懂单元测试了：</p>\n<ul>\n<li>在实际项目中单元测试到底测的是什么？</li>\n<li>确定了该测什么之后应该怎么去写测试用例？</li>\n</ul>\n<p><img src=\"http://p1cjg886l.bkt.clouddn.com/unit2.jpg\" alt=\"JPG\"></p>\n<h3 id=\"单元测试到底测的是什么\"><a href=\"#单元测试到底测的是什么\" class=\"headerlink\" title=\"单元测试到底测的是什么\"></a>单元测试到底测的是什么</h3><p>就我的认知来看，这些需要测：</p>\n<ul>\n<li>和安全相关的代码逻辑</li>\n<li>核心的功能模块，函数</li>\n<li>短期不会发生变化的 UI 组件</li>\n<li>提供外部调用的接口</li>\n</ul>\n<h3 id=\"怎么去写测试用例\"><a href=\"#怎么去写测试用例\" class=\"headerlink\" title=\"怎么去写测试用例\"></a>怎么去写测试用例</h3><p>真的说不好怎样去写测试用例，很多资料只是告诉你怎么写一个简单的测试用例然后跑起来，但怎样去写一个好的测试用例却不知道。目前我经验少也总结不出什么有用的建议，<u>以后再填坑吧。</u></p>\n<h3 id=\"什么才是一个好的测试失败报告\"><a href=\"#什么才是一个好的测试失败报告\" class=\"headerlink\" title=\"什么才是一个好的测试失败报告\"></a>什么才是一个好的测试失败报告</h3><ol>\n<li>你测试的是什么？</li>\n<li>它是做什么的？</li>\n<li>它实际输出了什么？（实际行为）</li>\n<li>它本该输出什么？（预期行为）</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>本文的代码戳这里<a href=\"https://github.com/Evey-huang/unit-vue\" target=\"_blank\" rel=\"noopener\">单元测试代码</a></p>\n"},{"title":"新建Vue项目","date":"2017-12-04T02:04:43.000Z","_content":"\n\n\n> 在新建vue项目之前应该先检查一下是否已经安装好npm、node\n\n## 新建一个vue项目\n\n1. 设置镜像\n\n   ```\n   npm install -g cnpm --registry=https://registry.npm.taobao.org\n   ```\n\n2. 安装webpack\n\n   ```\n   npm install webpack -g\n   ```\n\n3. 安装vue-cli\n\n   ```\n   npm install vue-cli -g\n   ```\n\n4. 创建项目\n\n   ```\n   vue init webpack-simple 项目名称\n   ```\n\n5. 进入项目所在目录，安装依赖\n\n   ```\n   npm install\n   ```\n\n6. 启动项目\n\n   ```\n   npm run dev\n   ```\n\n> 在创建项目初始化的时候（也就是第四步）遇到了问题。\n>\n> ### 问题：\n>\n> vue-cli · Failed to download repo vuejs-templates/webpack-simple: tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:80\n>\n> ### 解决：\n>\n> 删除无效代理\n>\n> ### 定位问题的过程：\n>\n> 1. 本机ping外网发现正常，说明本机网络OK\n> 2. 本机尝试安装其他的包，发现进度条不动；其他机器尝试安装一样的包，发现能安装成功，证明包本身没问题\n> 3. 经过上面两步确定不是网络问题不是包问题而是本机有问题，然后npm config查看本机配置与其他机器配置有什么不一样，发现本机比其他机器多了无效代理\n> 4. 删除无效代理。vim /usr/local/etc/npmc找到设置代理的语句然后删除\n>\n>\n\n启动后的界面\n\n![选区_007.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_007.png)","source":"_posts/vue-start.md","raw":"---\ntitle: 新建Vue项目\ndate: 2017-12-04 10:04:43\ntags: vue 教程\ncategories: 教程\n---\n\n\n\n> 在新建vue项目之前应该先检查一下是否已经安装好npm、node\n\n## 新建一个vue项目\n\n1. 设置镜像\n\n   ```\n   npm install -g cnpm --registry=https://registry.npm.taobao.org\n   ```\n\n2. 安装webpack\n\n   ```\n   npm install webpack -g\n   ```\n\n3. 安装vue-cli\n\n   ```\n   npm install vue-cli -g\n   ```\n\n4. 创建项目\n\n   ```\n   vue init webpack-simple 项目名称\n   ```\n\n5. 进入项目所在目录，安装依赖\n\n   ```\n   npm install\n   ```\n\n6. 启动项目\n\n   ```\n   npm run dev\n   ```\n\n> 在创建项目初始化的时候（也就是第四步）遇到了问题。\n>\n> ### 问题：\n>\n> vue-cli · Failed to download repo vuejs-templates/webpack-simple: tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:80\n>\n> ### 解决：\n>\n> 删除无效代理\n>\n> ### 定位问题的过程：\n>\n> 1. 本机ping外网发现正常，说明本机网络OK\n> 2. 本机尝试安装其他的包，发现进度条不动；其他机器尝试安装一样的包，发现能安装成功，证明包本身没问题\n> 3. 经过上面两步确定不是网络问题不是包问题而是本机有问题，然后npm config查看本机配置与其他机器配置有什么不一样，发现本机比其他机器多了无效代理\n> 4. 删除无效代理。vim /usr/local/etc/npmc找到设置代理的语句然后删除\n>\n>\n\n启动后的界面\n\n![选区_007.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_007.png)","slug":"vue-start","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1i001dflfy3e7kukl4","content":"<blockquote>\n<p>在新建vue项目之前应该先检查一下是否已经安装好npm、node</p>\n</blockquote>\n<h2 id=\"新建一个vue项目\"><a href=\"#新建一个vue项目\" class=\"headerlink\" title=\"新建一个vue项目\"></a>新建一个vue项目</h2><ol>\n<li><p>设置镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装webpack</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装vue-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack-simple 项目名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目所在目录，安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>在创建项目初始化的时候（也就是第四步）遇到了问题。</p>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>vue-cli · Failed to download repo vuejs-templates/webpack-simple: tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:80</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>删除无效代理</p>\n<h3 id=\"定位问题的过程：\"><a href=\"#定位问题的过程：\" class=\"headerlink\" title=\"定位问题的过程：\"></a>定位问题的过程：</h3><ol>\n<li>本机ping外网发现正常，说明本机网络OK</li>\n<li>本机尝试安装其他的包，发现进度条不动；其他机器尝试安装一样的包，发现能安装成功，证明包本身没问题</li>\n<li>经过上面两步确定不是网络问题不是包问题而是本机有问题，然后npm config查看本机配置与其他机器配置有什么不一样，发现本机比其他机器多了无效代理</li>\n<li>删除无效代理。vim /usr/local/etc/npmc找到设置代理的语句然后删除</li>\n</ol>\n</blockquote>\n<p>启动后的界面</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_007.png\" alt=\"选区_007.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在新建vue项目之前应该先检查一下是否已经安装好npm、node</p>\n</blockquote>\n<h2 id=\"新建一个vue项目\"><a href=\"#新建一个vue项目\" class=\"headerlink\" title=\"新建一个vue项目\"></a>新建一个vue项目</h2><ol>\n<li><p>设置镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装webpack</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装vue-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack-simple 项目名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目所在目录，安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>在创建项目初始化的时候（也就是第四步）遇到了问题。</p>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>vue-cli · Failed to download repo vuejs-templates/webpack-simple: tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:80</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>删除无效代理</p>\n<h3 id=\"定位问题的过程：\"><a href=\"#定位问题的过程：\" class=\"headerlink\" title=\"定位问题的过程：\"></a>定位问题的过程：</h3><ol>\n<li>本机ping外网发现正常，说明本机网络OK</li>\n<li>本机尝试安装其他的包，发现进度条不动；其他机器尝试安装一样的包，发现能安装成功，证明包本身没问题</li>\n<li>经过上面两步确定不是网络问题不是包问题而是本机有问题，然后npm config查看本机配置与其他机器配置有什么不一样，发现本机比其他机器多了无效代理</li>\n<li>删除无效代理。vim /usr/local/etc/npmc找到设置代理的语句然后删除</li>\n</ol>\n</blockquote>\n<p>启动后的界面</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_007.png\" alt=\"选区_007.png\"></p>\n"},{"title":"Vuelidate表单验证插件","date":"2017-12-12T14:14:10.000Z","_content":"\n\n\n# Vuelidate\n\nVuelidate是一款简单轻量级的基于模块的Vue.js验证插件。当前最新的版本是0.6.1,详情可以戳链接看官方文档（<https://monterail.github.io/vuelidate/>）或者前往github（<https://github.com/monterail/vuelidate>）。接触Vuelidate源于工作的需求，当时需要做表单验证然后师傅甩给我一个链接让我去学习。学习以后发现这是真的好用，它有以下功能特征：\n\n- 基于模型\n- 脱离模型\n- 依赖自由，简约的库\n- 支持收集验证\n- 支持嵌套模型\n- 上下文验证\n- 自定义验证，便于使用\n- 支持功能组合\n- 验证了不同数据源：Vuex getter，计算值，等等。\n\n在接触Vuelidate之前还用过另一个表单验证插件veelidate(<http://vee-validate.logaretm.com/index.html#>)用法跟Vuelidate差不多，但是Vuelidate更深得我心。\n\n# 安装\n\n安装很简单，用npm来安装只需要一句话：\n\n```\nnpm install vuelidate --save\n```\n\n# 使用\n\n### main.js\n\n在main.js中导入库并用作Vue插件，以便在包含验证配置的所有组件上全局启用该功能：\n\n```\nimport Vue from 'vue'\nimport Vuelidate from 'vuelidate'\nVue.use(Vuelidate)\n```\n\n### Example\n\n#### JS\n\n```\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      username: ''\n    }\n  },\n  validations: {\n    username: {\n      required,\n      minLength: minLength(6)\n    }\n  }\n}\n```\n\n#### HTML\n\n![选区_012](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_012.png)\n\n## 内置验证规则\n\n- required: 需要非空数据。检查仅包含空格的空数组和字符串。\n- maxLength:要求输入具有最大指定长度（包括最大值）。适用于数组。\n- minLength:要求输入具有最小指定长度（包括最小值）。适用于数组。\n- email: 接受有效的电子邮件地址。请记住，您仍然需要在服务器上进行仔细验证，因为无法发送验证电子邮件地址是否是真实的。\n- between: 检查数字或日期是否在指定范围内。最小值和最大值都包括在内。\n- ipAddress: 接受点分十进制表示形式的有效IPv4地址，如127.0.0.1。\n- alpha: 只接受字母字符。\n- alphaNum: 只接受字母数字。\n- numeric: 只接受数字。\n- sameAs: 检查给定属性是否相等。\n- url: 只接受网址。\n- or: 当至少有一个提供的验证器通过时通过。\n- and: 所有提供的验证器都通过时通过。\n- requiredIf: 仅当提供的属性或谓词为真时才需要非空数据。\n- requiredUnless: 仅当提供的属性或谓词为假时才需要非空数据。\n- minValue: 要求输入具有指定的最小数值或日期。\n- maxValue: 要求输入具有指定的最大数值或日期。\n\n## 自定义验证规则\n\n除了使用Vuelidate自带的内置验证规则外还可以使用自定义规则满足需求。只需要再新建一个js文件加入自己的验证规则就可以了。\n\n#### Example\n\n新建一个自定义验证规则name.js代码如图所示，基本可以参照内置验证规则写，要注意路径写正确。\n\n###### index.js\n\n```\n'use strict'\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n})\nexports.name  = undefined\n\nvar _name = require('./name')\n\nvar _name2 = _interopRequireDefault(_name)\n\nfunction _interopRequireDefault (obj) { return obj && obj.__esModule ? obj : { default: obj } }\n\nexports.name = _name2.default\n```\n\n###### name.js\n\n```\n'use strict'\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n})\n\nvar _common = require('vuelidate/lib/validators/common')\n\nvar nameRegex = /^[\\w-]+$/\n\nexports.default = (0, _common.regex)('name', nameRegex)\n```\n\n当这些设置好以后就可以像内置规则那样使用了，这里我是在utils下新建了vuelidate验证规则，所以路径可以这么写。\n\n```\nimport { name } from 'utils/vuelidate/lib/validators'\n```\n\n ","source":"_posts/vuelidate.md","raw":"---\ntitle: Vuelidate表单验证插件\ndate: 2017-12-12 22:14:10\ntags: validate 表单验证插件\ncategories: validate\n---\n\n\n\n# Vuelidate\n\nVuelidate是一款简单轻量级的基于模块的Vue.js验证插件。当前最新的版本是0.6.1,详情可以戳链接看官方文档（<https://monterail.github.io/vuelidate/>）或者前往github（<https://github.com/monterail/vuelidate>）。接触Vuelidate源于工作的需求，当时需要做表单验证然后师傅甩给我一个链接让我去学习。学习以后发现这是真的好用，它有以下功能特征：\n\n- 基于模型\n- 脱离模型\n- 依赖自由，简约的库\n- 支持收集验证\n- 支持嵌套模型\n- 上下文验证\n- 自定义验证，便于使用\n- 支持功能组合\n- 验证了不同数据源：Vuex getter，计算值，等等。\n\n在接触Vuelidate之前还用过另一个表单验证插件veelidate(<http://vee-validate.logaretm.com/index.html#>)用法跟Vuelidate差不多，但是Vuelidate更深得我心。\n\n# 安装\n\n安装很简单，用npm来安装只需要一句话：\n\n```\nnpm install vuelidate --save\n```\n\n# 使用\n\n### main.js\n\n在main.js中导入库并用作Vue插件，以便在包含验证配置的所有组件上全局启用该功能：\n\n```\nimport Vue from 'vue'\nimport Vuelidate from 'vuelidate'\nVue.use(Vuelidate)\n```\n\n### Example\n\n#### JS\n\n```\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      username: ''\n    }\n  },\n  validations: {\n    username: {\n      required,\n      minLength: minLength(6)\n    }\n  }\n}\n```\n\n#### HTML\n\n![选区_012](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_012.png)\n\n## 内置验证规则\n\n- required: 需要非空数据。检查仅包含空格的空数组和字符串。\n- maxLength:要求输入具有最大指定长度（包括最大值）。适用于数组。\n- minLength:要求输入具有最小指定长度（包括最小值）。适用于数组。\n- email: 接受有效的电子邮件地址。请记住，您仍然需要在服务器上进行仔细验证，因为无法发送验证电子邮件地址是否是真实的。\n- between: 检查数字或日期是否在指定范围内。最小值和最大值都包括在内。\n- ipAddress: 接受点分十进制表示形式的有效IPv4地址，如127.0.0.1。\n- alpha: 只接受字母字符。\n- alphaNum: 只接受字母数字。\n- numeric: 只接受数字。\n- sameAs: 检查给定属性是否相等。\n- url: 只接受网址。\n- or: 当至少有一个提供的验证器通过时通过。\n- and: 所有提供的验证器都通过时通过。\n- requiredIf: 仅当提供的属性或谓词为真时才需要非空数据。\n- requiredUnless: 仅当提供的属性或谓词为假时才需要非空数据。\n- minValue: 要求输入具有指定的最小数值或日期。\n- maxValue: 要求输入具有指定的最大数值或日期。\n\n## 自定义验证规则\n\n除了使用Vuelidate自带的内置验证规则外还可以使用自定义规则满足需求。只需要再新建一个js文件加入自己的验证规则就可以了。\n\n#### Example\n\n新建一个自定义验证规则name.js代码如图所示，基本可以参照内置验证规则写，要注意路径写正确。\n\n###### index.js\n\n```\n'use strict'\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n})\nexports.name  = undefined\n\nvar _name = require('./name')\n\nvar _name2 = _interopRequireDefault(_name)\n\nfunction _interopRequireDefault (obj) { return obj && obj.__esModule ? obj : { default: obj } }\n\nexports.name = _name2.default\n```\n\n###### name.js\n\n```\n'use strict'\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n})\n\nvar _common = require('vuelidate/lib/validators/common')\n\nvar nameRegex = /^[\\w-]+$/\n\nexports.default = (0, _common.regex)('name', nameRegex)\n```\n\n当这些设置好以后就可以像内置规则那样使用了，这里我是在utils下新建了vuelidate验证规则，所以路径可以这么写。\n\n```\nimport { name } from 'utils/vuelidate/lib/validators'\n```\n\n ","slug":"vuelidate","published":1,"updated":"2018-01-27T07:24:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1l001fflfyh4s9mugg","content":"<h1 id=\"Vuelidate\"><a href=\"#Vuelidate\" class=\"headerlink\" title=\"Vuelidate\"></a>Vuelidate</h1><p>Vuelidate是一款简单轻量级的基于模块的Vue.js验证插件。当前最新的版本是0.6.1,详情可以戳链接看官方文档（<a href=\"https://monterail.github.io/vuelidate/\" target=\"_blank\" rel=\"noopener\">https://monterail.github.io/vuelidate/</a>）或者前往github（<a href=\"https://github.com/monterail/vuelidate\" target=\"_blank\" rel=\"noopener\">https://github.com/monterail/vuelidate</a>）。接触Vuelidate源于工作的需求，当时需要做表单验证然后师傅甩给我一个链接让我去学习。学习以后发现这是真的好用，它有以下功能特征：</p>\n<ul>\n<li>基于模型</li>\n<li>脱离模型</li>\n<li>依赖自由，简约的库</li>\n<li>支持收集验证</li>\n<li>支持嵌套模型</li>\n<li>上下文验证</li>\n<li>自定义验证，便于使用</li>\n<li>支持功能组合</li>\n<li>验证了不同数据源：Vuex getter，计算值，等等。</li>\n</ul>\n<p>在接触Vuelidate之前还用过另一个表单验证插件veelidate(<a href=\"http://vee-validate.logaretm.com/index.html#\" target=\"_blank\" rel=\"noopener\">http://vee-validate.logaretm.com/index.html#</a>)用法跟Vuelidate差不多，但是Vuelidate更深得我心。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装很简单，用npm来安装只需要一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuelidate --save</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>在main.js中导入库并用作Vue插件，以便在包含验证配置的所有组件上全局启用该功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Vuelidate from &apos;vuelidate&apos;</span><br><span class=\"line\">Vue.use(Vuelidate)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; required, maxLength &#125; from &apos;vuelidate/lib/validators&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      username: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  validations: &#123;</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">      required,</span><br><span class=\"line\">      minLength: minLength(6)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_012.png\" alt=\"选区_012\"></p>\n<h2 id=\"内置验证规则\"><a href=\"#内置验证规则\" class=\"headerlink\" title=\"内置验证规则\"></a>内置验证规则</h2><ul>\n<li>required: 需要非空数据。检查仅包含空格的空数组和字符串。</li>\n<li>maxLength:要求输入具有最大指定长度（包括最大值）。适用于数组。</li>\n<li>minLength:要求输入具有最小指定长度（包括最小值）。适用于数组。</li>\n<li>email: 接受有效的电子邮件地址。请记住，您仍然需要在服务器上进行仔细验证，因为无法发送验证电子邮件地址是否是真实的。</li>\n<li>between: 检查数字或日期是否在指定范围内。最小值和最大值都包括在内。</li>\n<li>ipAddress: 接受点分十进制表示形式的有效IPv4地址，如127.0.0.1。</li>\n<li>alpha: 只接受字母字符。</li>\n<li>alphaNum: 只接受字母数字。</li>\n<li>numeric: 只接受数字。</li>\n<li>sameAs: 检查给定属性是否相等。</li>\n<li>url: 只接受网址。</li>\n<li>or: 当至少有一个提供的验证器通过时通过。</li>\n<li>and: 所有提供的验证器都通过时通过。</li>\n<li>requiredIf: 仅当提供的属性或谓词为真时才需要非空数据。</li>\n<li>requiredUnless: 仅当提供的属性或谓词为假时才需要非空数据。</li>\n<li>minValue: 要求输入具有指定的最小数值或日期。</li>\n<li>maxValue: 要求输入具有指定的最大数值或日期。</li>\n</ul>\n<h2 id=\"自定义验证规则\"><a href=\"#自定义验证规则\" class=\"headerlink\" title=\"自定义验证规则\"></a>自定义验证规则</h2><p>除了使用Vuelidate自带的内置验证规则外还可以使用自定义规则满足需求。只需要再新建一个js文件加入自己的验证规则就可以了。</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>新建一个自定义验证规则name.js代码如图所示，基本可以参照内置验证规则写，要注意路径写正确。</p>\n<h6 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(exports, &apos;__esModule&apos;, &#123;</span><br><span class=\"line\">  value: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.name  = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var _name = require(&apos;./name&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var _name2 = _interopRequireDefault(_name)</span><br><span class=\"line\"></span><br><span class=\"line\">function _interopRequireDefault (obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.name = _name2.default</span><br></pre></td></tr></table></figure>\n<h6 id=\"name-js\"><a href=\"#name-js\" class=\"headerlink\" title=\"name.js\"></a>name.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(exports, &apos;__esModule&apos;, &#123;</span><br><span class=\"line\">  value: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var _common = require(&apos;vuelidate/lib/validators/common&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var nameRegex = /^[\\w-]+$/</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = (0, _common.regex)(&apos;name&apos;, nameRegex)</span><br></pre></td></tr></table></figure>\n<p>当这些设置好以后就可以像内置规则那样使用了，这里我是在utils下新建了vuelidate验证规则，所以路径可以这么写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; name &#125; from &apos;utils/vuelidate/lib/validators&apos;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vuelidate\"><a href=\"#Vuelidate\" class=\"headerlink\" title=\"Vuelidate\"></a>Vuelidate</h1><p>Vuelidate是一款简单轻量级的基于模块的Vue.js验证插件。当前最新的版本是0.6.1,详情可以戳链接看官方文档（<a href=\"https://monterail.github.io/vuelidate/\" target=\"_blank\" rel=\"noopener\">https://monterail.github.io/vuelidate/</a>）或者前往github（<a href=\"https://github.com/monterail/vuelidate\" target=\"_blank\" rel=\"noopener\">https://github.com/monterail/vuelidate</a>）。接触Vuelidate源于工作的需求，当时需要做表单验证然后师傅甩给我一个链接让我去学习。学习以后发现这是真的好用，它有以下功能特征：</p>\n<ul>\n<li>基于模型</li>\n<li>脱离模型</li>\n<li>依赖自由，简约的库</li>\n<li>支持收集验证</li>\n<li>支持嵌套模型</li>\n<li>上下文验证</li>\n<li>自定义验证，便于使用</li>\n<li>支持功能组合</li>\n<li>验证了不同数据源：Vuex getter，计算值，等等。</li>\n</ul>\n<p>在接触Vuelidate之前还用过另一个表单验证插件veelidate(<a href=\"http://vee-validate.logaretm.com/index.html#\" target=\"_blank\" rel=\"noopener\">http://vee-validate.logaretm.com/index.html#</a>)用法跟Vuelidate差不多，但是Vuelidate更深得我心。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装很简单，用npm来安装只需要一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vuelidate --save</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>在main.js中导入库并用作Vue插件，以便在包含验证配置的所有组件上全局启用该功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Vuelidate from &apos;vuelidate&apos;</span><br><span class=\"line\">Vue.use(Vuelidate)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><h4 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; required, maxLength &#125; from &apos;vuelidate/lib/validators&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      username: &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  validations: &#123;</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">      required,</span><br><span class=\"line\">      minLength: minLength(6)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h4><p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_012.png\" alt=\"选区_012\"></p>\n<h2 id=\"内置验证规则\"><a href=\"#内置验证规则\" class=\"headerlink\" title=\"内置验证规则\"></a>内置验证规则</h2><ul>\n<li>required: 需要非空数据。检查仅包含空格的空数组和字符串。</li>\n<li>maxLength:要求输入具有最大指定长度（包括最大值）。适用于数组。</li>\n<li>minLength:要求输入具有最小指定长度（包括最小值）。适用于数组。</li>\n<li>email: 接受有效的电子邮件地址。请记住，您仍然需要在服务器上进行仔细验证，因为无法发送验证电子邮件地址是否是真实的。</li>\n<li>between: 检查数字或日期是否在指定范围内。最小值和最大值都包括在内。</li>\n<li>ipAddress: 接受点分十进制表示形式的有效IPv4地址，如127.0.0.1。</li>\n<li>alpha: 只接受字母字符。</li>\n<li>alphaNum: 只接受字母数字。</li>\n<li>numeric: 只接受数字。</li>\n<li>sameAs: 检查给定属性是否相等。</li>\n<li>url: 只接受网址。</li>\n<li>or: 当至少有一个提供的验证器通过时通过。</li>\n<li>and: 所有提供的验证器都通过时通过。</li>\n<li>requiredIf: 仅当提供的属性或谓词为真时才需要非空数据。</li>\n<li>requiredUnless: 仅当提供的属性或谓词为假时才需要非空数据。</li>\n<li>minValue: 要求输入具有指定的最小数值或日期。</li>\n<li>maxValue: 要求输入具有指定的最大数值或日期。</li>\n</ul>\n<h2 id=\"自定义验证规则\"><a href=\"#自定义验证规则\" class=\"headerlink\" title=\"自定义验证规则\"></a>自定义验证规则</h2><p>除了使用Vuelidate自带的内置验证规则外还可以使用自定义规则满足需求。只需要再新建一个js文件加入自己的验证规则就可以了。</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h4><p>新建一个自定义验证规则name.js代码如图所示，基本可以参照内置验证规则写，要注意路径写正确。</p>\n<h6 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(exports, &apos;__esModule&apos;, &#123;</span><br><span class=\"line\">  value: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">exports.name  = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">var _name = require(&apos;./name&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var _name2 = _interopRequireDefault(_name)</span><br><span class=\"line\"></span><br><span class=\"line\">function _interopRequireDefault (obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.name = _name2.default</span><br></pre></td></tr></table></figure>\n<h6 id=\"name-js\"><a href=\"#name-js\" class=\"headerlink\" title=\"name.js\"></a>name.js</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(exports, &apos;__esModule&apos;, &#123;</span><br><span class=\"line\">  value: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">var _common = require(&apos;vuelidate/lib/validators/common&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">var nameRegex = /^[\\w-]+$/</span><br><span class=\"line\"></span><br><span class=\"line\">exports.default = (0, _common.regex)(&apos;name&apos;, nameRegex)</span><br></pre></td></tr></table></figure>\n<p>当这些设置好以后就可以像内置规则那样使用了，这里我是在utils下新建了vuelidate验证规则，所以路径可以这么写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; name &#125; from &apos;utils/vuelidate/lib/validators&apos;</span><br></pre></td></tr></table></figure>\n"},{"title":"web工程师的前端书单","date":"2017-12-12T08:30:29.000Z","_content":"\n#### JavaScript\n\n###### 入门\n\n- 《JavaScript权威指南（第六版）》\n- 《JavaScript高级程序设计》\n- 《JavaScript DOM编程艺术》\n- 《ECMAScript6入门》\n\n###### 进阶\n\n- 《编写可维护的JavaScript》\n- 《JavaScript异步编程》\n- 《JAVASCRIPT语言精髓与编程实践》\n- 《高性能JavaScript》\n- 《You Don't Know JS》\n\n#### CSS\n\n###### 进阶\n\n- 《CSS权威指南（第三版）》\n- 《精通CSS（第2版）》\n\n#### 网络协议&架构\n\n- 《HTTP权威指南》\n- 《Web性能权威指南》\n- 《大型网站技术架构》\n\n#### NodeJS\n\n###### 入门\n\n- 《Node.js开发指南》\n\n###### 进阶\n\n- 《深入浅出Node.js》\n\n#### 用户体验&产品\n\n- 《点石成金》\n- 《结网@改变世界的互联网产品经理》\n\n\n","source":"_posts/web.md","raw":"---\ntitle: web工程师的前端书单\ndate: 2017-12-12 16:30:29\ntags: web前端\ncategories: 读书\n---\n\n#### JavaScript\n\n###### 入门\n\n- 《JavaScript权威指南（第六版）》\n- 《JavaScript高级程序设计》\n- 《JavaScript DOM编程艺术》\n- 《ECMAScript6入门》\n\n###### 进阶\n\n- 《编写可维护的JavaScript》\n- 《JavaScript异步编程》\n- 《JAVASCRIPT语言精髓与编程实践》\n- 《高性能JavaScript》\n- 《You Don't Know JS》\n\n#### CSS\n\n###### 进阶\n\n- 《CSS权威指南（第三版）》\n- 《精通CSS（第2版）》\n\n#### 网络协议&架构\n\n- 《HTTP权威指南》\n- 《Web性能权威指南》\n- 《大型网站技术架构》\n\n#### NodeJS\n\n###### 入门\n\n- 《Node.js开发指南》\n\n###### 进阶\n\n- 《深入浅出Node.js》\n\n#### 用户体验&产品\n\n- 《点石成金》\n- 《结网@改变世界的互联网产品经理》\n\n\n","slug":"web","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1m001kflfy1ofx8sk6","content":"<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><h6 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h6><ul>\n<li>《JavaScript权威指南（第六版）》</li>\n<li>《JavaScript高级程序设计》</li>\n<li>《JavaScript DOM编程艺术》</li>\n<li>《ECMAScript6入门》</li>\n</ul>\n<h6 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《编写可维护的JavaScript》</li>\n<li>《JavaScript异步编程》</li>\n<li>《JAVASCRIPT语言精髓与编程实践》</li>\n<li>《高性能JavaScript》</li>\n<li>《You Don’t Know JS》</li>\n</ul>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><h6 id=\"进阶-1\"><a href=\"#进阶-1\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《CSS权威指南（第三版）》</li>\n<li>《精通CSS（第2版）》</li>\n</ul>\n<h4 id=\"网络协议-amp-架构\"><a href=\"#网络协议-amp-架构\" class=\"headerlink\" title=\"网络协议&amp;架构\"></a>网络协议&amp;架构</h4><ul>\n<li>《HTTP权威指南》</li>\n<li>《Web性能权威指南》</li>\n<li>《大型网站技术架构》</li>\n</ul>\n<h4 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h4><h6 id=\"入门-1\"><a href=\"#入门-1\" class=\"headerlink\" title=\"入门\"></a>入门</h6><ul>\n<li>《Node.js开发指南》</li>\n</ul>\n<h6 id=\"进阶-2\"><a href=\"#进阶-2\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《深入浅出Node.js》</li>\n</ul>\n<h4 id=\"用户体验-amp-产品\"><a href=\"#用户体验-amp-产品\" class=\"headerlink\" title=\"用户体验&amp;产品\"></a>用户体验&amp;产品</h4><ul>\n<li>《点石成金》</li>\n<li>《结网@改变世界的互联网产品经理》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><h6 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h6><ul>\n<li>《JavaScript权威指南（第六版）》</li>\n<li>《JavaScript高级程序设计》</li>\n<li>《JavaScript DOM编程艺术》</li>\n<li>《ECMAScript6入门》</li>\n</ul>\n<h6 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《编写可维护的JavaScript》</li>\n<li>《JavaScript异步编程》</li>\n<li>《JAVASCRIPT语言精髓与编程实践》</li>\n<li>《高性能JavaScript》</li>\n<li>《You Don’t Know JS》</li>\n</ul>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><h6 id=\"进阶-1\"><a href=\"#进阶-1\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《CSS权威指南（第三版）》</li>\n<li>《精通CSS（第2版）》</li>\n</ul>\n<h4 id=\"网络协议-amp-架构\"><a href=\"#网络协议-amp-架构\" class=\"headerlink\" title=\"网络协议&amp;架构\"></a>网络协议&amp;架构</h4><ul>\n<li>《HTTP权威指南》</li>\n<li>《Web性能权威指南》</li>\n<li>《大型网站技术架构》</li>\n</ul>\n<h4 id=\"NodeJS\"><a href=\"#NodeJS\" class=\"headerlink\" title=\"NodeJS\"></a>NodeJS</h4><h6 id=\"入门-1\"><a href=\"#入门-1\" class=\"headerlink\" title=\"入门\"></a>入门</h6><ul>\n<li>《Node.js开发指南》</li>\n</ul>\n<h6 id=\"进阶-2\"><a href=\"#进阶-2\" class=\"headerlink\" title=\"进阶\"></a>进阶</h6><ul>\n<li>《深入浅出Node.js》</li>\n</ul>\n<h4 id=\"用户体验-amp-产品\"><a href=\"#用户体验-amp-产品\" class=\"headerlink\" title=\"用户体验&amp;产品\"></a>用户体验&amp;产品</h4><ul>\n<li>《点石成金》</li>\n<li>《结网@改变世界的互联网产品经理》</li>\n</ul>\n"},{"title":"Ubuntu系统安装Xmind","date":"2017-12-12T13:54:28.000Z","_content":"\n\n\n## 为什么要选择Xmind\n\n因为我需要一款思维导图软件，之前有个手机APP就叫思维导图觉得还可以，搜了一下并没有PC版然后搜到了xmind，感觉linux系统的电脑应用软件不是很多啊（或许是我见识短）anyway~我决定装xmind。\n\n## 我为什么要写出来\n\n选就选了呗用就用了呗写什么写啊，老子喜欢写就写你管我。哎呀其实是第一次装的时候踩坑了没装成功于是这次我决定写出来。\n\n## 安装\n\n首先先去官网<http://www.xmind.net/download/linux/> 把安装包下载下来。\n\n![选区_011.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_011.png)\n\n一般来说点击这个红色按钮download就可以了，我第一次也是这么做的，然而并没有成功至于为什么没成功具体原因我也不记得了，大概是有些依赖没装什么的吧。这次我学乖了，把页面拉到底部\n\n![选区_012](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_0121.png)\n\n点击Previous  Versions按钮跳转到另一个页面\n\n![选区_013.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_013.png)\n\n我是linux系统64位，当然选第四个啦，下载下来是一个deb包，运行以下代码即可安装成功~惊不惊喜意不意外！\n\n> $ sudo dpkg -i xmind-7.5-update1-linux_amd64.deb\n\n成功了当然要上图晒一下啦，有模板也有空白的随便选\n\n![选区_010.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_010.png)\n\n## By the way\n\nXmind现在有个测试版本叫Xmind ZAN,感觉界面很炫酷啊，可以去官网申请测试资格，很伤心测试版本没有Linux版本!!!!宝宝不开心，只有Windows和Mac。但是还是放一些图满足一下吧\n\n![v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg)\n\n![v2-225708c5c410d45633ee789aa22adfe1_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-225708c5c410d45633ee789aa22adfe1_r.jpg)\n\n![v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg)\n\n![v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg)","source":"_posts/xmind.md","raw":"---\ntitle: Ubuntu系统安装Xmind\ndate: 2017-12-12 21:54:28\ntags: xmind\ncategories: 教程\n---\n\n\n\n## 为什么要选择Xmind\n\n因为我需要一款思维导图软件，之前有个手机APP就叫思维导图觉得还可以，搜了一下并没有PC版然后搜到了xmind，感觉linux系统的电脑应用软件不是很多啊（或许是我见识短）anyway~我决定装xmind。\n\n## 我为什么要写出来\n\n选就选了呗用就用了呗写什么写啊，老子喜欢写就写你管我。哎呀其实是第一次装的时候踩坑了没装成功于是这次我决定写出来。\n\n## 安装\n\n首先先去官网<http://www.xmind.net/download/linux/> 把安装包下载下来。\n\n![选区_011.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_011.png)\n\n一般来说点击这个红色按钮download就可以了，我第一次也是这么做的，然而并没有成功至于为什么没成功具体原因我也不记得了，大概是有些依赖没装什么的吧。这次我学乖了，把页面拉到底部\n\n![选区_012](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_0121.png)\n\n点击Previous  Versions按钮跳转到另一个页面\n\n![选区_013.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_013.png)\n\n我是linux系统64位，当然选第四个啦，下载下来是一个deb包，运行以下代码即可安装成功~惊不惊喜意不意外！\n\n> $ sudo dpkg -i xmind-7.5-update1-linux_amd64.deb\n\n成功了当然要上图晒一下啦，有模板也有空白的随便选\n\n![选区_010.png](https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_010.png)\n\n## By the way\n\nXmind现在有个测试版本叫Xmind ZAN,感觉界面很炫酷啊，可以去官网申请测试资格，很伤心测试版本没有Linux版本!!!!宝宝不开心，只有Windows和Mac。但是还是放一些图满足一下吧\n\n![v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg)\n\n![v2-225708c5c410d45633ee789aa22adfe1_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-225708c5c410d45633ee789aa22adfe1_r.jpg)\n\n![v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg)\n\n![v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg](https://eveywongblog.files.wordpress.com/2017/11/v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg)","slug":"xmind","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1o001mflfyawpb7t5v","content":"<h2 id=\"为什么要选择Xmind\"><a href=\"#为什么要选择Xmind\" class=\"headerlink\" title=\"为什么要选择Xmind\"></a>为什么要选择Xmind</h2><p>因为我需要一款思维导图软件，之前有个手机APP就叫思维导图觉得还可以，搜了一下并没有PC版然后搜到了xmind，感觉linux系统的电脑应用软件不是很多啊（或许是我见识短）anyway~我决定装xmind。</p>\n<h2 id=\"我为什么要写出来\"><a href=\"#我为什么要写出来\" class=\"headerlink\" title=\"我为什么要写出来\"></a>我为什么要写出来</h2><p>选就选了呗用就用了呗写什么写啊，老子喜欢写就写你管我。哎呀其实是第一次装的时候踩坑了没装成功于是这次我决定写出来。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先先去官网<a href=\"http://www.xmind.net/download/linux/\" target=\"_blank\" rel=\"noopener\">http://www.xmind.net/download/linux/</a> 把安装包下载下来。</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_011.png\" alt=\"选区_011.png\"></p>\n<p>一般来说点击这个红色按钮download就可以了，我第一次也是这么做的，然而并没有成功至于为什么没成功具体原因我也不记得了，大概是有些依赖没装什么的吧。这次我学乖了，把页面拉到底部</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_0121.png\" alt=\"选区_012\"></p>\n<p>点击Previous  Versions按钮跳转到另一个页面</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_013.png\" alt=\"选区_013.png\"></p>\n<p>我是linux系统64位，当然选第四个啦，下载下来是一个deb包，运行以下代码即可安装成功~惊不惊喜意不意外！</p>\n<blockquote>\n<p>$ sudo dpkg -i xmind-7.5-update1-linux_amd64.deb</p>\n</blockquote>\n<p>成功了当然要上图晒一下啦，有模板也有空白的随便选</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_010.png\" alt=\"选区_010.png\"></p>\n<h2 id=\"By-the-way\"><a href=\"#By-the-way\" class=\"headerlink\" title=\"By the way\"></a>By the way</h2><p>Xmind现在有个测试版本叫Xmind ZAN,感觉界面很炫酷啊，可以去官网申请测试资格，很伤心测试版本没有Linux版本!!!!宝宝不开心，只有Windows和Mac。但是还是放一些图满足一下吧</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg\" alt=\"v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-225708c5c410d45633ee789aa22adfe1_r.jpg\" alt=\"v2-225708c5c410d45633ee789aa22adfe1_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg\" alt=\"v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg\" alt=\"v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要选择Xmind\"><a href=\"#为什么要选择Xmind\" class=\"headerlink\" title=\"为什么要选择Xmind\"></a>为什么要选择Xmind</h2><p>因为我需要一款思维导图软件，之前有个手机APP就叫思维导图觉得还可以，搜了一下并没有PC版然后搜到了xmind，感觉linux系统的电脑应用软件不是很多啊（或许是我见识短）anyway~我决定装xmind。</p>\n<h2 id=\"我为什么要写出来\"><a href=\"#我为什么要写出来\" class=\"headerlink\" title=\"我为什么要写出来\"></a>我为什么要写出来</h2><p>选就选了呗用就用了呗写什么写啊，老子喜欢写就写你管我。哎呀其实是第一次装的时候踩坑了没装成功于是这次我决定写出来。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先先去官网<a href=\"http://www.xmind.net/download/linux/\" target=\"_blank\" rel=\"noopener\">http://www.xmind.net/download/linux/</a> 把安装包下载下来。</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_011.png\" alt=\"选区_011.png\"></p>\n<p>一般来说点击这个红色按钮download就可以了，我第一次也是这么做的，然而并没有成功至于为什么没成功具体原因我也不记得了，大概是有些依赖没装什么的吧。这次我学乖了，把页面拉到底部</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_0121.png\" alt=\"选区_012\"></p>\n<p>点击Previous  Versions按钮跳转到另一个页面</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_013.png\" alt=\"选区_013.png\"></p>\n<p>我是linux系统64位，当然选第四个啦，下载下来是一个deb包，运行以下代码即可安装成功~惊不惊喜意不意外！</p>\n<blockquote>\n<p>$ sudo dpkg -i xmind-7.5-update1-linux_amd64.deb</p>\n</blockquote>\n<p>成功了当然要上图晒一下啦，有模板也有空白的随便选</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/e98089e58cba_010.png\" alt=\"选区_010.png\"></p>\n<h2 id=\"By-the-way\"><a href=\"#By-the-way\" class=\"headerlink\" title=\"By the way\"></a>By the way</h2><p>Xmind现在有个测试版本叫Xmind ZAN,感觉界面很炫酷啊，可以去官网申请测试资格，很伤心测试版本没有Linux版本!!!!宝宝不开心，只有Windows和Mac。但是还是放一些图满足一下吧</p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg\" alt=\"v2-73dde99ace6d08cf9c3fa3b42496016d_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-225708c5c410d45633ee789aa22adfe1_r.jpg\" alt=\"v2-225708c5c410d45633ee789aa22adfe1_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg\" alt=\"v2-723f59c4304a16ff25bdef1f26ad279a_r.jpg\"></p>\n<p><img src=\"https://eveywongblog.files.wordpress.com/2017/11/v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg\" alt=\"v2-82f3604a60fefa4e3293f9580eb5ff13_r.jpg\"></p>\n"},{"title":"vue-cli脚手架webpack模板项目配置文件分析","date":"2017-12-29T08:45:57.000Z","_content":"\n![webpack插图](http://p1cjg886l.bkt.clouddn.com/webpack.jpg)\n\n## 背景\n\n最近学习单元测试配环境的时候一直出错，然后被指点说应该先去学习webpack工作原理再去配环境。然后就去学webpack了，觉得有必要把webpack配置文件的代码解释记录下来，便于学习。\n\n\n\n## 文件结构\n\n```\n└── build\n    └── build.js\n    ├── check-versions.js\n    ├── utils.js\n    ├── vue-loader.conf.js\n    ├── webpack.base.conf.js\n    ├── webpack.dev.conf.js\n    ├── webpack.prod.conf.js\n    └── webpack.test.conf.js\n├── config\n    ├── dev.env.js\n    ├── index.js\n    ├── prod.env.js\n    └── test.env.js\n└── package.json\n```\n\n\n\n## 指令分析\n\n首先看`package.json`里面的`script\t`字段\n\n```js\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n    \"test\": \"npm run unit\",\n    \"lint\": \"eslint --ext .js,.vue src\",\n    \"build\": \"node build/build.js\"\n},\n```\n\n先看`build`和`dev`。运行`npm run dev`时执行的是`build/webpack.dev.conf.js`，运行`npm run build`执行的是`build/build.js`，然后可以先从这两个文件开始分析。\n\n\n\n## build文件夹分析\n\n### webpack.dev.conf.js\n\n开发环境下执行`npm run dev`的时候最先执行`build/webpack.dev.conf.js`文件，该文件主要做以下几件事：\n\n1. 合并基础的webpack配置\n2. 配置webpack插件\n\n代码注释：\n\n```js\n'use strict'\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge') // 一个可以合并数组和对象的插件\nconst baseWebpackConfig = require('./webpack.base.conf') // 合并webpack基础配置\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // 一个用于生成HTML文件并自动注入依赖文件（link/script）的webpack插件\nconst FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin') // 用于更友好地输出webpack的警告、错误等信息\nconst portfinder = require('portfinder')\n\nconst HOST = process.env.HOST\nconst PORT = process.env.PORT && Number(process.env.PORT)\n\nconst devWebpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap, usePostCSS: true })\n  },\n  // cheap-module-eval-source-map is faster for development\n  devtool: config.dev.devtool,\n\n  // these devServer options should be customized in /config/index.js\n  devServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: true,\n    hot: true,\n    compress: true,\n    host: HOST || config.dev.host,\n    port: PORT || config.dev.port,\n    open: config.dev.autoOpenBrowser,\n    overlay: config.dev.errorOverlay\n      ? { warnings: false, errors: true }\n      : false,\n    publicPath: config.dev.assetsPublicPath,\n    proxy: config.dev.proxyTable,\n    quiet: true, // necessary for FriendlyErrorsPlugin\n    watchOptions: {\n      poll: config.dev.poll,\n    }\n  },\n  // 配置webpack插件\n  plugins: [\n    // \n    new webpack.DefinePlugin({\n      'process.env': require('../config/dev.env')\n    }),\n    new webpack.HotModuleReplacementPlugin(), // 热更新\n    new webpack.NamedModulesPlugin(), // HMR shows correct file names in console on update.\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({ // 后页面中的报错不会阻塞，但是会在编译结束后报错\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ]\n})\n\nmodule.exports = new Promise((resolve, reject) => {\n  portfinder.basePort = process.env.PORT || config.dev.port\n  portfinder.getPort((err, port) => {\n    if (err) {\n      reject(err)\n    } else {\n      // publish the new Port, necessary for e2e tests\n      process.env.PORT = port\n      // add port to devServer config\n      devWebpackConfig.devServer.port = port\n\n      // Add FriendlyErrorsPlugin\n      devWebpackConfig.plugins.push(new FriendlyErrorsPlugin({\n        compilationSuccessInfo: {\n          messages: [`Your application is running here: http://${devWebpackConfig.devServer.host}:${port}`],\n        },\n        onErrors: config.dev.notifyOnErrors\n        ? utils.createNotifierCallback()\n        : undefined\n      }))\n\n      resolve(devWebpackConfig)\n    }\n  })\n})\n\n```\n\n\n\n### webpack.base.conf.js\n\n从`webpack.dev.conf.js`代码中看到，使用的webpack配置来自`webpack.base.conf.js`文件，所以先分析`webpack.base.conf.js`，这个文件主要完成以下这些事情：\n\n1. 配置webpack编译入口\n2. 配置webpack输出路径和命名规则\n3. 配置模块resolve规则\n4. 配置不同类型模块的处理规则\n\n\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\n// 给出正确的绝对路径\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  // 配置webpack编译入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 配置webpack输出路径和命名规则\n  output: {\n    path: config.build.assetsRoot, // webpack输出的目标文件夹路径\n    filename: '[name].js', // webpack输出bundle文件命名格式\n    // webpack编译输出的发布路径\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  // 配置模块resolve的规则\n  resolve: {\n    extensions: ['.js', '.vue', '.json'], // 自动resolve的扩展名\n    // 创建路径别名\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  // 配置不同类型模块的处理规则\n  module: {\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      // 对所有.vue文件使用vue-loader\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      // 对src和test文件夹下的.js文件使用babel-loader\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      // 对图片资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      // 对音频资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      // 对字体资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n\n```\n\n\n\n### utils.js和vue-loader.conf.js\n\n从上面的代码可以看出使用了`utils.js`和`vue-loader.conf.js`这两个文件，`utils.js`主要完成以下三件事：\n\n1. 配置静态资源路径\n2. 生成cssLoader用于加载.vue文件中的样式\n3. 生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件\n\n\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  // generate loader string to be used with extract text plugin\n  // 生成与提取文本插件一起使用的加载器字符串\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    // 在指定该选项时提取CSS\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n  // https://vue-loader.vuejs.org/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\n//为独立样式文件生成装载器（.vue之外）\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n\n```\n\n\n\n`vue-loader.js`只配置了css加载器以及配置资源路径。\n\n代码注释：\n\n```js\n'use strict'\nconst utils = require('./utils')\nconst config = require('../config')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst sourceMapEnabled = isProduction\n  ? config.build.productionSourceMap\n  : config.dev.cssSourceMap\n\nmodule.exports = {\n  // css加载器\n  loaders: utils.cssLoaders({\n    sourceMap: sourceMapEnabled,\n    extract: isProduction\n  }),\n  cssSourceMap: sourceMapEnabled, // 源码\n  cacheBusting: config.dev.cacheBusting, // 缓存\n  // 配置资源路径\n  transformToRequire: {\n    video: ['src', 'poster'],\n    source: 'src',\n    img: 'src',\n    image: 'xlink:href'\n  }\n}\n\n```\n\n\n\n### build.js\n\n开发环境下的配置讲完了，接下来讲构建环境下的配置，构建环境下执行`npm run build`的时候首先执行的是`build.js`文件，`build.js`文件主要做以下几件事：\n\n1. loading动画\n2. 删除创建目标文件夹\n3. webpack编译\n4. 输出信息\n\n\n\n代码注释：\n\n```js\n'use strict'\nrequire('./check-versions')() // 检查nodejs和npm版本\n\nprocess.env.NODE_ENV = 'production' // 当前环境为生产环境\n\n// 一个可以调用默认软件打开网址、图片、文件等内容的插件，\nconst ora = require('ora')\nconst rm = require('rimraf')\nconst path = require('path')\nconst chalk = require('chalk') // 用于在控制台输出带颜色字体的插件\nconst webpack = require('webpack')\nconst config = require('../config')\nconst webpackConfig = require('./webpack.prod.conf') // 引入生产环境webpack配置\n\nconst spinner = ora('building for production...')\nspinner.start() // 开启loading动画\n\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => { // 递归删除旧的目标文件夹\n  if (err) throw err\n  webpack(webpackConfig, (err, stats) => { // webpack编译\n    spinner.stop() // 停止loading动画\n    if (err) throw err // 没有出错则输出相关信息\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false, // if you are using ts-loader, setting this to true will make tyescript errors show up during build\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    if (stats.hasErrors()) {\n      console.log(chalk.red('  Build failed with errors.\\n'))\n      process.exit(1)\n    }\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n\n```\n\n\n\n### webpack.prod.conf.js\n\n构建的时候用到的webpack配置来自`webpack.prod.conf.js`，这个文件主要完成以下几件事：\n\n1. 合并基础的webpack配置\n2. gzip模式下的webpack插件配置\n3. 配置webpack插件\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') // 用于从webpack生成的bundle中提取文本到特定文件中的插件，可以抽取出css，js文件将其与webpack输出的bundle分离\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n// 合并基础的webpack配置\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  // 配置webpack的输出\n  output: {\n    path: config.build.assetsRoot, // 编译输出目录\n    filename: utils.assetsPath('js/[name].[chunkhash].js'), // 编译输出文件名格式\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js') // 没有指定输出名的文件输出的文件名格式\n  },\n// 配置webpack插件\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    // 丑化压缩代码插件\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n    // extract css into its own file  抽离css文件\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n      // Setting the following option to `false` will not extract CSS from codesplit chunks.\n      // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.\n      // It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, \n      // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110\n      allChunks: true,\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({\n      filename: config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // keep module.id stable when vender modules does not change\n    new webpack.HashedModuleIdsPlugin(),\n    // enable scope hoisting\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    // split vendor js into its own file\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n    // This instance extracts shared chunks from code splitted chunks and bundles them\n    // in a separate chunk, similar to the vendor chunk\n    // see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n// gzip模式下需要引入compression插件进行压缩\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n### check-versions.js\n\n从`build.js`文件可以看出引用了`check-versions.js`，从名字可以看出这个文件大概做的事情就是确认`npm`和`node`版本。\n\n代码注释：\n\n```js\n'use strict'\nconst chalk = require('chalk') // 用于在控制台输出带颜色字体的插件\nconst semver = require('semver') // 语义化版本检查插件\nconst packageConfig = require('../package.json') // 引入package.json\nconst shell = require('shelljs') // 执行Unix命令行的插件\n// 开辟子进程执行指令cmd并返回结果\nfunction exec (cmd) {\n  return require('child_process').execSync(cmd).toString().trim()\n}\n// node和npm版本需求\nconst versionRequirements = [\n  {\n    name: 'node',\n    currentVersion: semver.clean(process.version),\n    versionRequirement: packageConfig.engines.node\n  }\n]\nif (shell.which('npm')) {\n  versionRequirements.push({\n    name: 'npm',\n    currentVersion: exec('npm --version'),\n    versionRequirement: packageConfig.engines.npm\n  })\n}\n\nmodule.exports = function () {\n  const warnings = []\n// 依次判断版本是否符合要求\n  for (let i = 0; i < versionRequirements.length; i++) {\n    const mod = versionRequirements[i]\n\n    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + ': ' +\n        chalk.red(mod.currentVersion) + ' should be ' +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n// 如果有警告则将其输出到控制台\n  if (warnings.length) {\n    console.log('')\n    console.log(chalk.yellow('To use this template, you must update following to modules:'))\n    console.log()\n\n    for (let i = 0; i < warnings.length; i++) {\n      const warning = warnings[i]\n      console.log('  ' + warning)\n    }\n\n    console.log()\n    process.exit(1)\n  }\n}\n\n```\n\n\n\n### webpack.test.conf.js\n\n这个文件是单元测试环境的webpack配置文件,该配置是在`webpack.base.conf.js`的基础上做进一步完善。\n\n代码注释：\n\n```js\n'use strict'\n\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\n// 合并基础的webpack配置\nconst webpackConfig = merge(baseWebpackConfig, {\n  devtool: '#inline-source-map',\n  resolveLoader: {\n    alias: {\n      'scss-loader': 'sass-loader'\n    }\n  },\n  // 配置webpack插件\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': require('../config/test.env')\n    })\n  ]\n})\n\n// no need for app entry during tests\ndelete webpackConfig.entry\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n## config文件夹分析\n\n### index.js\n\nconfig文件夹下最主要的文件是`index.js`，在这里面描述了三种环境下的配置，分别为开发、构建和测试。\n\n代码注释：\n\n```js\n'use strict'\n// Template version: 1.2.7\n// see http://vuejs-templates.github.io/webpack for documentation.\n\nconst path = require('path')\n\nmodule.exports = {\n  // 开发过程中使用的配置\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static', // webpack编译输出的二级文件夹\n    assetsPublicPath: '/', // webpack编译输出的发布路径\n    proxyTable: {},// 请求代理表，在这里可以配置特定的请求代理到对应的API接口，例如将'/api/xxx'代理到'www.example.com/api/xxx'\n\n    // Various Dev Server settings\n    // 各种开发服务器设置\n    host: 'localhost', // can be overwritten by process.env.HOST\n    port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined\n    autoOpenBrowser: false, // 启动dev-server之后不自动打开浏览器\n    errorOverlay: true,\n    notifyOnErrors: true,\n    poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-\n\n    // Use Eslint Loader?\n    // If true, your code will be linted during bundling and\n    // linting errors and warnings will be shown in the console.\n    useEslint: true,\n    // If true, eslint errors and warnings will also be shown in the error overlay\n    // in the browser.\n    showEslintErrorsInOverlay: false,\n\n    /**\n     * Source Maps\n     */\n\n    // https://webpack.js.org/configuration/devtool/#development\n    devtool: 'eval-source-map',\n\n    // If you have problems debugging vue-files in devtools,\n    // set this to false - it *may* help\n    // https://vue-loader.vuejs.org/en/options.html#cachebusting\n    cacheBusting: true,\n\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    cssSourceMap: false,\n  },\n// 构建产品时使用的配置\n  build: {\n    // Template for index.html\n    index: path.resolve(__dirname, '../dist/index.html'), // 编译输入的index.html文件\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, '../dist'), // webpack输出的目标文件夹路径\n    assetsSubDirectory: 'static', // webpack编译输出的二级文件夹\n    assetsPublicPath: '/', // webpack编译输出的发布路径\n\n    /**\n     * Source Maps\n     */\n\n    productionSourceMap: true,\n    // https://webpack.js.org/configuration/devtool/#production\n    devtool: '#source-map',\n\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    productionGzip: false,\n    productionGzipExtensions: ['js', 'css'], // gzip模式下需要压缩的文件的扩展名\n\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  }\n}\n\n```\n\n\n\n### dev.env.js、prod.env.js和test.env.js\n\n这三个文件分别设置了开发环境、构建环境以及测试环境的环境变量\n\n#### dev.env.js\n\n```js\n// 设置了开发环境的环境变量\n'use strict'\nconst merge = require('webpack-merge')\nconst prodEnv = require('./prod.env')\n\nmodule.exports = merge(prodEnv, {\n  NODE_ENV: '\"development\"'\n})\n```\n\n#### prod.env.js\n\n```js\n// 设置了生产环境的环境变量\n'use strict'\nmodule.exports = {\n  NODE_ENV: '\"production\"'\n}\n```\n\n#### test.env.js\n\n```js\n// 设置了测试环境的环境变量\n'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n\n```\n\n\n\n## 结语\n\nwebpack没有想的这么难也没想的这么简单。坊间流传webpack不难，难的是配置。可以把官网文档看一遍然后跟着指南敲一遍，去体会这个打包流程的奥妙，大概能学到些什么。[webpack中文文档](https://doc.webpack-china.org/concepts/)","source":"_posts/webpack.md","raw":"---\ntitle: vue-cli脚手架webpack模板项目配置文件分析\ndate: 2017-12-29 16:45:57\ntags: webpack\ncategories: 教程\n---\n\n![webpack插图](http://p1cjg886l.bkt.clouddn.com/webpack.jpg)\n\n## 背景\n\n最近学习单元测试配环境的时候一直出错，然后被指点说应该先去学习webpack工作原理再去配环境。然后就去学webpack了，觉得有必要把webpack配置文件的代码解释记录下来，便于学习。\n\n\n\n## 文件结构\n\n```\n└── build\n    └── build.js\n    ├── check-versions.js\n    ├── utils.js\n    ├── vue-loader.conf.js\n    ├── webpack.base.conf.js\n    ├── webpack.dev.conf.js\n    ├── webpack.prod.conf.js\n    └── webpack.test.conf.js\n├── config\n    ├── dev.env.js\n    ├── index.js\n    ├── prod.env.js\n    └── test.env.js\n└── package.json\n```\n\n\n\n## 指令分析\n\n首先看`package.json`里面的`script\t`字段\n\n```js\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n    \"test\": \"npm run unit\",\n    \"lint\": \"eslint --ext .js,.vue src\",\n    \"build\": \"node build/build.js\"\n},\n```\n\n先看`build`和`dev`。运行`npm run dev`时执行的是`build/webpack.dev.conf.js`，运行`npm run build`执行的是`build/build.js`，然后可以先从这两个文件开始分析。\n\n\n\n## build文件夹分析\n\n### webpack.dev.conf.js\n\n开发环境下执行`npm run dev`的时候最先执行`build/webpack.dev.conf.js`文件，该文件主要做以下几件事：\n\n1. 合并基础的webpack配置\n2. 配置webpack插件\n\n代码注释：\n\n```js\n'use strict'\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge') // 一个可以合并数组和对象的插件\nconst baseWebpackConfig = require('./webpack.base.conf') // 合并webpack基础配置\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // 一个用于生成HTML文件并自动注入依赖文件（link/script）的webpack插件\nconst FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin') // 用于更友好地输出webpack的警告、错误等信息\nconst portfinder = require('portfinder')\n\nconst HOST = process.env.HOST\nconst PORT = process.env.PORT && Number(process.env.PORT)\n\nconst devWebpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap, usePostCSS: true })\n  },\n  // cheap-module-eval-source-map is faster for development\n  devtool: config.dev.devtool,\n\n  // these devServer options should be customized in /config/index.js\n  devServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: true,\n    hot: true,\n    compress: true,\n    host: HOST || config.dev.host,\n    port: PORT || config.dev.port,\n    open: config.dev.autoOpenBrowser,\n    overlay: config.dev.errorOverlay\n      ? { warnings: false, errors: true }\n      : false,\n    publicPath: config.dev.assetsPublicPath,\n    proxy: config.dev.proxyTable,\n    quiet: true, // necessary for FriendlyErrorsPlugin\n    watchOptions: {\n      poll: config.dev.poll,\n    }\n  },\n  // 配置webpack插件\n  plugins: [\n    // \n    new webpack.DefinePlugin({\n      'process.env': require('../config/dev.env')\n    }),\n    new webpack.HotModuleReplacementPlugin(), // 热更新\n    new webpack.NamedModulesPlugin(), // HMR shows correct file names in console on update.\n    new webpack.NoEmitOnErrorsPlugin(),\n    // https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({ // 后页面中的报错不会阻塞，但是会在编译结束后报错\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n  ]\n})\n\nmodule.exports = new Promise((resolve, reject) => {\n  portfinder.basePort = process.env.PORT || config.dev.port\n  portfinder.getPort((err, port) => {\n    if (err) {\n      reject(err)\n    } else {\n      // publish the new Port, necessary for e2e tests\n      process.env.PORT = port\n      // add port to devServer config\n      devWebpackConfig.devServer.port = port\n\n      // Add FriendlyErrorsPlugin\n      devWebpackConfig.plugins.push(new FriendlyErrorsPlugin({\n        compilationSuccessInfo: {\n          messages: [`Your application is running here: http://${devWebpackConfig.devServer.host}:${port}`],\n        },\n        onErrors: config.dev.notifyOnErrors\n        ? utils.createNotifierCallback()\n        : undefined\n      }))\n\n      resolve(devWebpackConfig)\n    }\n  })\n})\n\n```\n\n\n\n### webpack.base.conf.js\n\n从`webpack.dev.conf.js`代码中看到，使用的webpack配置来自`webpack.base.conf.js`文件，所以先分析`webpack.base.conf.js`，这个文件主要完成以下这些事情：\n\n1. 配置webpack编译入口\n2. 配置webpack输出路径和命名规则\n3. 配置模块resolve规则\n4. 配置不同类型模块的处理规则\n\n\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\n// 给出正确的绝对路径\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  // 配置webpack编译入口\n  entry: {\n    app: './src/main.js'\n  },\n  // 配置webpack输出路径和命名规则\n  output: {\n    path: config.build.assetsRoot, // webpack输出的目标文件夹路径\n    filename: '[name].js', // webpack输出bundle文件命名格式\n    // webpack编译输出的发布路径\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  // 配置模块resolve的规则\n  resolve: {\n    extensions: ['.js', '.vue', '.json'], // 自动resolve的扩展名\n    // 创建路径别名\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  // 配置不同类型模块的处理规则\n  module: {\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      // 对所有.vue文件使用vue-loader\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      // 对src和test文件夹下的.js文件使用babel-loader\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      // 对图片资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      // 对音频资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      // 对字体资源文件使用url-loader，options.name指明了输出的命名规则\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n    // prevent webpack from injecting useless setImmediate polyfill because Vue\n    // source contains it (although only uses it if it's native).\n    setImmediate: false,\n    // prevent webpack from injecting mocks to Node native modules\n    // that does not make sense for the client\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n\n```\n\n\n\n### utils.js和vue-loader.conf.js\n\n从上面的代码可以看出使用了`utils.js`和`vue-loader.conf.js`这两个文件，`utils.js`主要完成以下三件事：\n\n1. 配置静态资源路径\n2. 生成cssLoader用于加载.vue文件中的样式\n3. 生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件\n\n\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  // generate loader string to be used with extract text plugin\n  // 生成与提取文本插件一起使用的加载器字符串\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    // 在指定该选项时提取CSS\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n  // https://vue-loader.vuejs.org/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\n//为独立样式文件生成装载器（.vue之外）\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n\n```\n\n\n\n`vue-loader.js`只配置了css加载器以及配置资源路径。\n\n代码注释：\n\n```js\n'use strict'\nconst utils = require('./utils')\nconst config = require('../config')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst sourceMapEnabled = isProduction\n  ? config.build.productionSourceMap\n  : config.dev.cssSourceMap\n\nmodule.exports = {\n  // css加载器\n  loaders: utils.cssLoaders({\n    sourceMap: sourceMapEnabled,\n    extract: isProduction\n  }),\n  cssSourceMap: sourceMapEnabled, // 源码\n  cacheBusting: config.dev.cacheBusting, // 缓存\n  // 配置资源路径\n  transformToRequire: {\n    video: ['src', 'poster'],\n    source: 'src',\n    img: 'src',\n    image: 'xlink:href'\n  }\n}\n\n```\n\n\n\n### build.js\n\n开发环境下的配置讲完了，接下来讲构建环境下的配置，构建环境下执行`npm run build`的时候首先执行的是`build.js`文件，`build.js`文件主要做以下几件事：\n\n1. loading动画\n2. 删除创建目标文件夹\n3. webpack编译\n4. 输出信息\n\n\n\n代码注释：\n\n```js\n'use strict'\nrequire('./check-versions')() // 检查nodejs和npm版本\n\nprocess.env.NODE_ENV = 'production' // 当前环境为生产环境\n\n// 一个可以调用默认软件打开网址、图片、文件等内容的插件，\nconst ora = require('ora')\nconst rm = require('rimraf')\nconst path = require('path')\nconst chalk = require('chalk') // 用于在控制台输出带颜色字体的插件\nconst webpack = require('webpack')\nconst config = require('../config')\nconst webpackConfig = require('./webpack.prod.conf') // 引入生产环境webpack配置\n\nconst spinner = ora('building for production...')\nspinner.start() // 开启loading动画\n\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => { // 递归删除旧的目标文件夹\n  if (err) throw err\n  webpack(webpackConfig, (err, stats) => { // webpack编译\n    spinner.stop() // 停止loading动画\n    if (err) throw err // 没有出错则输出相关信息\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false, // if you are using ts-loader, setting this to true will make tyescript errors show up during build\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    if (stats.hasErrors()) {\n      console.log(chalk.red('  Build failed with errors.\\n'))\n      process.exit(1)\n    }\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:// won\\'t work.\\n'\n    ))\n  })\n})\n\n```\n\n\n\n### webpack.prod.conf.js\n\n构建的时候用到的webpack配置来自`webpack.prod.conf.js`，这个文件主要完成以下几件事：\n\n1. 合并基础的webpack配置\n2. gzip模式下的webpack插件配置\n3. 配置webpack插件\n\n代码注释：\n\n```js\n'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin') // 用于从webpack生成的bundle中提取文本到特定文件中的插件，可以抽取出css，js文件将其与webpack输出的bundle分离\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n// 合并基础的webpack配置\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  // 配置webpack的输出\n  output: {\n    path: config.build.assetsRoot, // 编译输出目录\n    filename: utils.assetsPath('js/[name].[chunkhash].js'), // 编译输出文件名格式\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js') // 没有指定输出名的文件输出的文件名格式\n  },\n// 配置webpack插件\n  plugins: [\n    // http://vuejs.github.io/vue-loader/en/workflow/production.html\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    // 丑化压缩代码插件\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n    // extract css into its own file  抽离css文件\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n      // Setting the following option to `false` will not extract CSS from codesplit chunks.\n      // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.\n      // It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, \n      // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110\n      allChunks: true,\n    }),\n    // Compress extracted CSS. We are using this plugin so that possible\n    // duplicated CSS from different components can be deduped.\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n    // generate dist index.html with correct asset hash for caching.\n    // you can customize output by editing /index.html\n    // see https://github.com/ampedandwired/html-webpack-plugin\n    new HtmlWebpackPlugin({\n      filename: config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n      },\n      // necessary to consistently work with multiple chunks via CommonsChunkPlugin\n      chunksSortMode: 'dependency'\n    }),\n    // keep module.id stable when vender modules does not change\n    new webpack.HashedModuleIdsPlugin(),\n    // enable scope hoisting\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    // split vendor js into its own file\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n        // any required modules inside node_modules are extracted to vendor\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n    // extract webpack runtime and module manifest to its own file in order to\n    // prevent vendor hash from being updated whenever app bundle is updated\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n    // This instance extracts shared chunks from code splitted chunks and bundles them\n    // in a separate chunk, similar to the vendor chunk\n    // see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n    // copy custom static assets\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n// gzip模式下需要引入compression插件进行压缩\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n### check-versions.js\n\n从`build.js`文件可以看出引用了`check-versions.js`，从名字可以看出这个文件大概做的事情就是确认`npm`和`node`版本。\n\n代码注释：\n\n```js\n'use strict'\nconst chalk = require('chalk') // 用于在控制台输出带颜色字体的插件\nconst semver = require('semver') // 语义化版本检查插件\nconst packageConfig = require('../package.json') // 引入package.json\nconst shell = require('shelljs') // 执行Unix命令行的插件\n// 开辟子进程执行指令cmd并返回结果\nfunction exec (cmd) {\n  return require('child_process').execSync(cmd).toString().trim()\n}\n// node和npm版本需求\nconst versionRequirements = [\n  {\n    name: 'node',\n    currentVersion: semver.clean(process.version),\n    versionRequirement: packageConfig.engines.node\n  }\n]\nif (shell.which('npm')) {\n  versionRequirements.push({\n    name: 'npm',\n    currentVersion: exec('npm --version'),\n    versionRequirement: packageConfig.engines.npm\n  })\n}\n\nmodule.exports = function () {\n  const warnings = []\n// 依次判断版本是否符合要求\n  for (let i = 0; i < versionRequirements.length; i++) {\n    const mod = versionRequirements[i]\n\n    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {\n      warnings.push(mod.name + ': ' +\n        chalk.red(mod.currentVersion) + ' should be ' +\n        chalk.green(mod.versionRequirement)\n      )\n    }\n  }\n// 如果有警告则将其输出到控制台\n  if (warnings.length) {\n    console.log('')\n    console.log(chalk.yellow('To use this template, you must update following to modules:'))\n    console.log()\n\n    for (let i = 0; i < warnings.length; i++) {\n      const warning = warnings[i]\n      console.log('  ' + warning)\n    }\n\n    console.log()\n    process.exit(1)\n  }\n}\n\n```\n\n\n\n### webpack.test.conf.js\n\n这个文件是单元测试环境的webpack配置文件,该配置是在`webpack.base.conf.js`的基础上做进一步完善。\n\n代码注释：\n\n```js\n'use strict'\n\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\n// 合并基础的webpack配置\nconst webpackConfig = merge(baseWebpackConfig, {\n  devtool: '#inline-source-map',\n  resolveLoader: {\n    alias: {\n      'scss-loader': 'sass-loader'\n    }\n  },\n  // 配置webpack插件\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': require('../config/test.env')\n    })\n  ]\n})\n\n// no need for app entry during tests\ndelete webpackConfig.entry\n\nmodule.exports = webpackConfig\n\n```\n\n\n\n## config文件夹分析\n\n### index.js\n\nconfig文件夹下最主要的文件是`index.js`，在这里面描述了三种环境下的配置，分别为开发、构建和测试。\n\n代码注释：\n\n```js\n'use strict'\n// Template version: 1.2.7\n// see http://vuejs-templates.github.io/webpack for documentation.\n\nconst path = require('path')\n\nmodule.exports = {\n  // 开发过程中使用的配置\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static', // webpack编译输出的二级文件夹\n    assetsPublicPath: '/', // webpack编译输出的发布路径\n    proxyTable: {},// 请求代理表，在这里可以配置特定的请求代理到对应的API接口，例如将'/api/xxx'代理到'www.example.com/api/xxx'\n\n    // Various Dev Server settings\n    // 各种开发服务器设置\n    host: 'localhost', // can be overwritten by process.env.HOST\n    port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined\n    autoOpenBrowser: false, // 启动dev-server之后不自动打开浏览器\n    errorOverlay: true,\n    notifyOnErrors: true,\n    poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-\n\n    // Use Eslint Loader?\n    // If true, your code will be linted during bundling and\n    // linting errors and warnings will be shown in the console.\n    useEslint: true,\n    // If true, eslint errors and warnings will also be shown in the error overlay\n    // in the browser.\n    showEslintErrorsInOverlay: false,\n\n    /**\n     * Source Maps\n     */\n\n    // https://webpack.js.org/configuration/devtool/#development\n    devtool: 'eval-source-map',\n\n    // If you have problems debugging vue-files in devtools,\n    // set this to false - it *may* help\n    // https://vue-loader.vuejs.org/en/options.html#cachebusting\n    cacheBusting: true,\n\n    // CSS Sourcemaps off by default because relative paths are \"buggy\"\n    // with this option, according to the CSS-Loader README\n    // (https://github.com/webpack/css-loader#sourcemaps)\n    // In our experience, they generally work as expected,\n    // just be aware of this issue when enabling this option.\n    cssSourceMap: false,\n  },\n// 构建产品时使用的配置\n  build: {\n    // Template for index.html\n    index: path.resolve(__dirname, '../dist/index.html'), // 编译输入的index.html文件\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, '../dist'), // webpack输出的目标文件夹路径\n    assetsSubDirectory: 'static', // webpack编译输出的二级文件夹\n    assetsPublicPath: '/', // webpack编译输出的发布路径\n\n    /**\n     * Source Maps\n     */\n\n    productionSourceMap: true,\n    // https://webpack.js.org/configuration/devtool/#production\n    devtool: '#source-map',\n\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    productionGzip: false,\n    productionGzipExtensions: ['js', 'css'], // gzip模式下需要压缩的文件的扩展名\n\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  }\n}\n\n```\n\n\n\n### dev.env.js、prod.env.js和test.env.js\n\n这三个文件分别设置了开发环境、构建环境以及测试环境的环境变量\n\n#### dev.env.js\n\n```js\n// 设置了开发环境的环境变量\n'use strict'\nconst merge = require('webpack-merge')\nconst prodEnv = require('./prod.env')\n\nmodule.exports = merge(prodEnv, {\n  NODE_ENV: '\"development\"'\n})\n```\n\n#### prod.env.js\n\n```js\n// 设置了生产环境的环境变量\n'use strict'\nmodule.exports = {\n  NODE_ENV: '\"production\"'\n}\n```\n\n#### test.env.js\n\n```js\n// 设置了测试环境的环境变量\n'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n\n```\n\n\n\n## 结语\n\nwebpack没有想的这么难也没想的这么简单。坊间流传webpack不难，难的是配置。可以把官网文档看一遍然后跟着指南敲一遍，去体会这个打包流程的奥妙，大概能学到些什么。[webpack中文文档](https://doc.webpack-china.org/concepts/)","slug":"webpack","published":1,"updated":"2018-01-23T11:03:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcx18d1p001pflfyolnlp2hu","content":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/webpack.jpg\" alt=\"webpack插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近学习单元测试配环境的时候一直出错，然后被指点说应该先去学习webpack工作原理再去配环境。然后就去学webpack了，觉得有必要把webpack配置文件的代码解释记录下来，便于学习。</p>\n<h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">└── build</span><br><span class=\"line\">    └── build.js</span><br><span class=\"line\">    ├── check-versions.js</span><br><span class=\"line\">    ├── utils.js</span><br><span class=\"line\">    ├── vue-loader.conf.js</span><br><span class=\"line\">    ├── webpack.base.conf.js</span><br><span class=\"line\">    ├── webpack.dev.conf.js</span><br><span class=\"line\">    ├── webpack.prod.conf.js</span><br><span class=\"line\">    └── webpack.test.conf.js</span><br><span class=\"line\">├── config</span><br><span class=\"line\">    ├── dev.env.js</span><br><span class=\"line\">    ├── index.js</span><br><span class=\"line\">    ├── prod.env.js</span><br><span class=\"line\">    └── test.env.js</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"指令分析\"><a href=\"#指令分析\" class=\"headerlink\" title=\"指令分析\"></a>指令分析</h2><p>首先看<code>package.json</code>里面的<code>script</code>字段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run dev\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"unit\"</span>: <span class=\"string\">\"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"npm run unit\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>先看<code>build</code>和<code>dev</code>。运行<code>npm run dev</code>时执行的是<code>build/webpack.dev.conf.js</code>，运行<code>npm run build</code>执行的是<code>build/build.js</code>，然后可以先从这两个文件开始分析。</p>\n<h2 id=\"build文件夹分析\"><a href=\"#build文件夹分析\" class=\"headerlink\" title=\"build文件夹分析\"></a>build文件夹分析</h2><h3 id=\"webpack-dev-conf-js\"><a href=\"#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a>webpack.dev.conf.js</h3><p>开发环境下执行<code>npm run dev</code>的时候最先执行<code>build/webpack.dev.conf.js</code>文件，该文件主要做以下几件事：</p>\n<ol>\n<li>合并基础的webpack配置</li>\n<li>配置webpack插件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 一个可以合并数组和对象的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 合并webpack基础配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) <span class=\"comment\">// 一个用于生成HTML文件并自动注入依赖文件（link/script）的webpack插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'friendly-errors-webpack-plugin'</span>) <span class=\"comment\">// 用于更友好地输出webpack的警告、错误等信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> portfinder = <span class=\"built_in\">require</span>(<span class=\"string\">'portfinder'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HOST = process.env.HOST</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = process.env.PORT &amp;&amp; <span class=\"built_in\">Number</span>(process.env.PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap, <span class=\"attr\">usePostCSS</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cheap-module-eval-source-map is faster for development</span></span><br><span class=\"line\">  devtool: config.dev.devtool,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// these devServer options should be customized in /config/index.js</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    clientLogLevel: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    host: HOST || config.dev.host,</span><br><span class=\"line\">    port: PORT || config.dev.port,</span><br><span class=\"line\">    open: config.dev.autoOpenBrowser,</span><br><span class=\"line\">    overlay: config.dev.errorOverlay</span><br><span class=\"line\">      ? &#123; <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span>, <span class=\"attr\">errors</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">      : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    publicPath: config.dev.assetsPublicPath,</span><br><span class=\"line\">    proxy: config.dev.proxyTable,</span><br><span class=\"line\">    quiet: <span class=\"literal\">true</span>, <span class=\"comment\">// necessary for FriendlyErrorsPlugin</span></span><br><span class=\"line\">    watchOptions: &#123;</span><br><span class=\"line\">      poll: config.dev.poll,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/dev.env'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(), <span class=\"comment\">// HMR shows correct file names in console on update.</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">// 后页面中的报错不会阻塞，但是会在编译结束后报错</span></span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class=\"line\">  portfinder.getPort(<span class=\"function\">(<span class=\"params\">err, port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// publish the new Port, necessary for e2e tests</span></span><br><span class=\"line\">      process.env.PORT = port</span><br><span class=\"line\">      <span class=\"comment\">// add port to devServer config</span></span><br><span class=\"line\">      devWebpackConfig.devServer.port = port</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Add FriendlyErrorsPlugin</span></span><br><span class=\"line\">      devWebpackConfig.plugins.push(<span class=\"keyword\">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class=\"line\">        compilationSuccessInfo: &#123;</span><br><span class=\"line\">          messages: [<span class=\"string\">`Your application is running here: http://<span class=\"subst\">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>`</span>],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onErrors: config.dev.notifyOnErrors</span><br><span class=\"line\">        ? utils.createNotifierCallback()</span><br><span class=\"line\">        : <span class=\"literal\">undefined</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(devWebpackConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h3><p>从<code>webpack.dev.conf.js</code>代码中看到，使用的webpack配置来自<code>webpack.base.conf.js</code>文件，所以先分析<code>webpack.base.conf.js</code>，这个文件主要完成以下这些事情：</p>\n<ol>\n<li>配置webpack编译入口</li>\n<li>配置webpack输出路径和命名规则</li>\n<li>配置模块resolve规则</li>\n<li>配置不同类型模块的处理规则</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./vue-loader.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给出正确的绝对路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.join(__dirname, <span class=\"string\">'..'</span>, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> createLintingRule = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(js|vue)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">  enforce: <span class=\"string\">'pre'</span>,</span><br><span class=\"line\">  include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)],</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    formatter: <span class=\"built_in\">require</span>(<span class=\"string\">'eslint-friendly-formatter'</span>),</span><br><span class=\"line\">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  context: path.resolve(__dirname, <span class=\"string\">'../'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack编译入口</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack输出路径和命名规则</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: config.build.assetsRoot, <span class=\"comment\">// webpack输出的目标文件夹路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>, <span class=\"comment\">// webpack输出bundle文件命名格式</span></span><br><span class=\"line\">    <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\">    publicPath: process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? config.build.assetsPublicPath</span><br><span class=\"line\">      : config.dev.assetsPublicPath</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置模块resolve的规则</span></span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>, <span class=\"string\">'.json'</span>], <span class=\"comment\">// 自动resolve的扩展名</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建路径别名</span></span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置不同类型模块的处理规则</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...(config.dev.useEslint ? [createLintingRule()] : []),</span><br><span class=\"line\">      <span class=\"comment\">// 对所有.vue文件使用vue-loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: vueLoaderConfig</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对src和test文件夹下的.js文件使用babel-loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对图片资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对音频资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'media/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对字体资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  node: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// prevent webpack from injecting useless setImmediate polyfill because Vue</span></span><br><span class=\"line\">    <span class=\"comment\">// source contains it (although only uses it if it's native).</span></span><br><span class=\"line\">    setImmediate: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// prevent webpack from injecting mocks to Node native modules</span></span><br><span class=\"line\">    <span class=\"comment\">// that does not make sense for the client</span></span><br><span class=\"line\">    dgram: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    fs: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    net: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    tls: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    child_process: <span class=\"string\">'empty'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"utils-js和vue-loader-conf-js\"><a href=\"#utils-js和vue-loader-conf-js\" class=\"headerlink\" title=\"utils.js和vue-loader.conf.js\"></a>utils.js和vue-loader.conf.js</h3><p>从上面的代码可以看出使用了<code>utils.js</code>和<code>vue-loader.conf.js</code>这两个文件，<code>utils.js</code>主要完成以下三件事：</p>\n<ol>\n<li>配置静态资源路径</li>\n<li>生成cssLoader用于加载.vue文件中的样式</li>\n<li>生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> packageConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">exports.assetsPath = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> assetsSubDirectory = process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\">    ? config.build.assetsSubDirectory</span><br><span class=\"line\">    : config.dev.assetsSubDirectory</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.posix.join(assetsSubDirectory, _path)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.cssLoaders = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cssLoader = &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: options.sourceMap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postcssLoader = &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: options.sourceMap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// generate loader string to be used with extract text plugin</span></span><br><span class=\"line\">  <span class=\"comment\">// 生成与提取文本插件一起使用的加载器字符串</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span> (<span class=\"params\">loader, loaderOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader) &#123;</span><br><span class=\"line\">      loaders.push(&#123;</span><br><span class=\"line\">        loader: loader + <span class=\"string\">'-loader'</span>,</span><br><span class=\"line\">        options: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class=\"line\">          sourceMap: options.sourceMap</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Extract CSS when that option is specified</span></span><br><span class=\"line\">    <span class=\"comment\">// (which is the case during production build)</span></span><br><span class=\"line\">    <span class=\"comment\">// 在指定该选项时提取CSS</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.extract) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">        use: loaders,</span><br><span class=\"line\">        fallback: <span class=\"string\">'vue-style-loader'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">'vue-style-loader'</span>].concat(loaders)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// https://vue-loader.vuejs.org/en/configurations/extract-css.html</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    css: generateLoaders(),</span><br><span class=\"line\">    postcss: generateLoaders(),</span><br><span class=\"line\">    less: generateLoaders(<span class=\"string\">'less'</span>),</span><br><span class=\"line\">    sass: generateLoaders(<span class=\"string\">'sass'</span>, &#123; <span class=\"attr\">indentedSyntax</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">    scss: generateLoaders(<span class=\"string\">'sass'</span>),</span><br><span class=\"line\">    stylus: generateLoaders(<span class=\"string\">'stylus'</span>),</span><br><span class=\"line\">    styl: generateLoaders(<span class=\"string\">'stylus'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generate loaders for standalone style files (outside of .vue)</span></span><br><span class=\"line\"><span class=\"comment\">//为独立样式文件生成装载器（.vue之外）</span></span><br><span class=\"line\">exports.styleLoaders = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loaders = exports.cssLoaders(options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> extension <span class=\"keyword\">in</span> loaders) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loader = loaders[extension]</span><br><span class=\"line\">    output.push(&#123;</span><br><span class=\"line\">      test: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\.'</span> + extension + <span class=\"string\">'$'</span>),</span><br><span class=\"line\">      use: loader</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createNotifierCallback = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> notifier = <span class=\"built_in\">require</span>(<span class=\"string\">'node-notifier'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">severity, errors</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (severity !== <span class=\"string\">'error'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> error = errors[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filename = error.file &amp;&amp; error.file.split(<span class=\"string\">'!'</span>).pop()</span><br><span class=\"line\"></span><br><span class=\"line\">    notifier.notify(&#123;</span><br><span class=\"line\">      title: packageConfig.name,</span><br><span class=\"line\">      message: severity + <span class=\"string\">': '</span> + error.name,</span><br><span class=\"line\">      subtitle: filename || <span class=\"string\">''</span>,</span><br><span class=\"line\">      icon: path.join(__dirname, <span class=\"string\">'logo.png'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>vue-loader.js</code>只配置了css加载器以及配置资源路径。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isProduction = process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceMapEnabled = isProduction</span><br><span class=\"line\">  ? config.build.productionSourceMap</span><br><span class=\"line\">  : config.dev.cssSourceMap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// css加载器</span></span><br><span class=\"line\">  loaders: utils.cssLoaders(&#123;</span><br><span class=\"line\">    sourceMap: sourceMapEnabled,</span><br><span class=\"line\">    extract: isProduction</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  cssSourceMap: sourceMapEnabled, <span class=\"comment\">// 源码</span></span><br><span class=\"line\">  cacheBusting: config.dev.cacheBusting, <span class=\"comment\">// 缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// 配置资源路径</span></span><br><span class=\"line\">  transformToRequire: &#123;</span><br><span class=\"line\">    video: [<span class=\"string\">'src'</span>, <span class=\"string\">'poster'</span>],</span><br><span class=\"line\">    source: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">    img: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">    image: <span class=\"string\">'xlink:href'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h3><p>开发环境下的配置讲完了，接下来讲构建环境下的配置，构建环境下执行<code>npm run build</code>的时候首先执行的是<code>build.js</code>文件，<code>build.js</code>文件主要做以下几件事：</p>\n<ol>\n<li>loading动画</li>\n<li>删除创建目标文件夹</li>\n<li>webpack编译</li>\n<li>输出信息</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查nodejs和npm版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.env.NODE_ENV = <span class=\"string\">'production'</span> <span class=\"comment\">// 当前环境为生产环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个可以调用默认软件打开网址、图片、文件等内容的插件，</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rm = <span class=\"built_in\">require</span>(<span class=\"string\">'rimraf'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>) <span class=\"comment\">// 用于在控制台输出带颜色字体的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.prod.conf'</span>) <span class=\"comment\">// 引入生产环境webpack配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">'building for production...'</span>)</span><br><span class=\"line\">spinner.start() <span class=\"comment\">// 开启loading动画</span></span><br><span class=\"line\"></span><br><span class=\"line\">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123; <span class=\"comment\">// 递归删除旧的目标文件夹</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  webpack(webpackConfig, (err, stats) =&gt; &#123; <span class=\"comment\">// webpack编译</span></span><br><span class=\"line\">    spinner.stop() <span class=\"comment\">// 停止loading动画</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err <span class=\"comment\">// 没有出错则输出相关信息</span></span><br><span class=\"line\">    process.stdout.write(stats.toString(&#123;</span><br><span class=\"line\">      colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      modules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      children: <span class=\"literal\">false</span>, <span class=\"comment\">// if you are using ts-loader, setting this to true will make tyescript errors show up during build</span></span><br><span class=\"line\">      chunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      chunkModules: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;) + <span class=\"string\">'\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stats.hasErrors()) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">'  Build failed with errors.\\n'</span>))</span><br><span class=\"line\">      process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.cyan(<span class=\"string\">'  Build complete.\\n'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.yellow(</span><br><span class=\"line\">      <span class=\"string\">'  Tip: built files are meant to be served over an HTTP server.\\n'</span> +</span><br><span class=\"line\">      <span class=\"string\">'  Opening index.html over file:// won\\'t work.\\n'</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-prod-conf-js\"><a href=\"#webpack-prod-conf-js\" class=\"headerlink\" title=\"webpack.prod.conf.js\"></a>webpack.prod.conf.js</h3><p>构建的时候用到的webpack配置来自<code>webpack.prod.conf.js</code>，这个文件主要完成以下几件事：</p>\n<ol>\n<li>合并基础的webpack配置</li>\n<li>gzip模式下的webpack插件配置</li>\n<li>配置webpack插件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>) <span class=\"comment\">// 用于从webpack生成的bundle中提取文本到特定文件中的插件，可以抽取出css，js文件将其与webpack输出的bundle分离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV === <span class=\"string\">'testing'</span></span><br><span class=\"line\">  ? <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">  : <span class=\"built_in\">require</span>(<span class=\"string\">'../config/prod.env'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 合并基础的webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      usePostCSS: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: config.build.productionSourceMap ? config.build.devtool : <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack的输出</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: config.build.assetsRoot, <span class=\"comment\">// 编译输出目录</span></span><br><span class=\"line\">    filename: utils.assetsPath(<span class=\"string\">'js/[name].[chunkhash].js'</span>), <span class=\"comment\">// 编译输出文件名格式</span></span><br><span class=\"line\">    chunkFilename: utils.assetsPath(<span class=\"string\">'js/[id].[chunkhash].js'</span>) <span class=\"comment\">// 没有指定输出名的文件输出的文件名格式</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 丑化压缩代码插件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">      uglifyOptions: &#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">          warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      parallel: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// extract css into its own file  抽离css文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: utils.assetsPath(<span class=\"string\">'css/[name].[contenthash].css'</span>),</span><br><span class=\"line\">      <span class=\"comment\">// Setting the following option to `false` will not extract CSS from codesplit chunks.</span></span><br><span class=\"line\">      <span class=\"comment\">// Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.</span></span><br><span class=\"line\">      <span class=\"comment\">// It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, </span></span><br><span class=\"line\">      <span class=\"comment\">// increasing file size: https://github.com/vuejs-templates/webpack/issues/1110</span></span><br><span class=\"line\">      allChunks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class=\"line\">    <span class=\"comment\">// duplicated CSS from different components can be deduped.</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSPlugin(&#123;</span><br><span class=\"line\">      cssProcessorOptions: config.build.productionSourceMap</span><br><span class=\"line\">        ? &#123; <span class=\"attr\">safe</span>: <span class=\"literal\">true</span>, <span class=\"attr\">map</span>: &#123; <span class=\"attr\">inline</span>: <span class=\"literal\">false</span> &#125; &#125;</span><br><span class=\"line\">        : &#123; <span class=\"attr\">safe</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// generate dist index.html with correct asset hash for caching.</span></span><br><span class=\"line\">    <span class=\"comment\">// you can customize output by editing /index.html</span></span><br><span class=\"line\">    <span class=\"comment\">// see https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: config.build.index,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      minify: &#123;</span><br><span class=\"line\">        removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeAttributeQuotes: <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">// more options:</span></span><br><span class=\"line\">        <span class=\"comment\">// https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></span><br><span class=\"line\">      chunksSortMode: <span class=\"string\">'dependency'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// keep module.id stable when vender modules does not change</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// enable scope hoisting</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// split vendor js into its own file</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">      minChunks (<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// any required modules inside node_modules are extracted to vendor</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource &amp;&amp;</span><br><span class=\"line\">          /\\.js$/.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource.indexOf(</span><br><span class=\"line\">            path.join(__dirname, <span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">          ) === <span class=\"number\">0</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'manifest'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class=\"line\">    <span class=\"comment\">// in a separate chunk, similar to the vendor chunk</span></span><br><span class=\"line\">    <span class=\"comment\">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">async</span>: <span class=\"string\">'vendor-async'</span>,</span><br><span class=\"line\">      children: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// copy custom static assets</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: path.resolve(__dirname, <span class=\"string\">'../static'</span>),</span><br><span class=\"line\">        to: config.build.assetsSubDirectory,</span><br><span class=\"line\">        ignore: [<span class=\"string\">'.*'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// gzip模式下需要引入compression插件进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (config.build.productionGzip) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> CompressionWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'compression-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  webpackConfig.plugins.push(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CompressionWebpackPlugin(&#123;</span><br><span class=\"line\">      asset: <span class=\"string\">'[path].gz[query]'</span>,</span><br><span class=\"line\">      algorithm: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">      test: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">        <span class=\"string\">'\\\\.('</span> +</span><br><span class=\"line\">        config.build.productionGzipExtensions.join(<span class=\"string\">'|'</span>) +</span><br><span class=\"line\">        <span class=\"string\">')$'</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">      threshold: <span class=\"number\">10240</span>,</span><br><span class=\"line\">      minRatio: <span class=\"number\">0.8</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class=\"line\">  webpackConfig.plugins.push(<span class=\"keyword\">new</span> BundleAnalyzerPlugin())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<h3 id=\"check-versions-js\"><a href=\"#check-versions-js\" class=\"headerlink\" title=\"check-versions.js\"></a>check-versions.js</h3><p>从<code>build.js</code>文件可以看出引用了<code>check-versions.js</code>，从名字可以看出这个文件大概做的事情就是确认<code>npm</code>和<code>node</code>版本。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>) <span class=\"comment\">// 用于在控制台输出带颜色字体的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> semver = <span class=\"built_in\">require</span>(<span class=\"string\">'semver'</span>) <span class=\"comment\">// 语义化版本检查插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> packageConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>) <span class=\"comment\">// 引入package.json</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shell = <span class=\"built_in\">require</span>(<span class=\"string\">'shelljs'</span>) <span class=\"comment\">// 执行Unix命令行的插件</span></span><br><span class=\"line\"><span class=\"comment\">// 开辟子进程执行指令cmd并返回结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec</span> (<span class=\"params\">cmd</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).execSync(cmd).toString().trim()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// node和npm版本需求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versionRequirements = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'node'</span>,</span><br><span class=\"line\">    currentVersion: semver.clean(process.version),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shell.which(<span class=\"string\">'npm'</span>)) &#123;</span><br><span class=\"line\">  versionRequirements.push(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'npm'</span>,</span><br><span class=\"line\">    currentVersion: exec(<span class=\"string\">'npm --version'</span>),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.npm</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> warnings = []</span><br><span class=\"line\"><span class=\"comment\">// 依次判断版本是否符合要求</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; versionRequirements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mod = versionRequirements[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class=\"line\">      warnings.push(mod.name + <span class=\"string\">': '</span> +</span><br><span class=\"line\">        chalk.red(mod.currentVersion) + <span class=\"string\">' should be '</span> +</span><br><span class=\"line\">        chalk.green(mod.versionRequirement)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果有警告则将其输出到控制台</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (warnings.length) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.yellow(<span class=\"string\">'To use this template, you must update following to modules:'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; warnings.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warning = warnings[i]</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'  '</span> + warning)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">    process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-test-conf-js\"><a href=\"#webpack-test-conf-js\" class=\"headerlink\" title=\"webpack.test.conf.js\"></a>webpack.test.conf.js</h3><p>这个文件是单元测试环境的webpack配置文件,该配置是在<code>webpack.base.conf.js</code>的基础上做进一步完善。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 合并基础的webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'#inline-source-map'</span>,</span><br><span class=\"line\">  resolveLoader: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'scss-loader'</span>: <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// no need for app entry during tests</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> webpackConfig.entry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<h2 id=\"config文件夹分析\"><a href=\"#config文件夹分析\" class=\"headerlink\" title=\"config文件夹分析\"></a>config文件夹分析</h2><h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><p>config文件夹下最主要的文件是<code>index.js</code>，在这里面描述了三种环境下的配置，分别为开发、构建和测试。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">// Template version: 1.2.7</span></span><br><span class=\"line\"><span class=\"comment\">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开发过程中使用的配置</span></span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// webpack编译输出的二级文件夹</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\">    proxyTable: &#123;&#125;,<span class=\"comment\">// 请求代理表，在这里可以配置特定的请求代理到对应的API接口，例如将'/api/xxx'代理到'www.example.com/api/xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Various Dev Server settings</span></span><br><span class=\"line\">    <span class=\"comment\">// 各种开发服务器设置</span></span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>, <span class=\"comment\">// can be overwritten by process.env.HOST</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class=\"line\">    autoOpenBrowser: <span class=\"literal\">false</span>, <span class=\"comment\">// 启动dev-server之后不自动打开浏览器</span></span><br><span class=\"line\">    errorOverlay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    notifyOnErrors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    poll: <span class=\"literal\">false</span>, <span class=\"comment\">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use Eslint Loader?</span></span><br><span class=\"line\">    <span class=\"comment\">// If true, your code will be linted during bundling and</span></span><br><span class=\"line\">    <span class=\"comment\">// linting errors and warnings will be shown in the console.</span></span><br><span class=\"line\">    useEslint: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// If true, eslint errors and warnings will also be shown in the error overlay</span></span><br><span class=\"line\">    <span class=\"comment\">// in the browser.</span></span><br><span class=\"line\">    showEslintErrorsInOverlay: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Source Maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class=\"line\">    devtool: <span class=\"string\">'eval-source-map'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If you have problems debugging vue-files in devtools,</span></span><br><span class=\"line\">    <span class=\"comment\">// set this to false - it *may* help</span></span><br><span class=\"line\">    <span class=\"comment\">// https://vue-loader.vuejs.org/en/options.html#cachebusting</span></span><br><span class=\"line\">    cacheBusting: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// CSS Sourcemaps off by default because relative paths are \"buggy\"</span></span><br><span class=\"line\">    <span class=\"comment\">// with this option, according to the CSS-Loader README</span></span><br><span class=\"line\">    <span class=\"comment\">// (https://github.com/webpack/css-loader#sourcemaps)</span></span><br><span class=\"line\">    <span class=\"comment\">// In our experience, they generally work as expected,</span></span><br><span class=\"line\">    <span class=\"comment\">// just be aware of this issue when enabling this option.</span></span><br><span class=\"line\">    cssSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 构建产品时使用的配置</span></span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Template for index.html</span></span><br><span class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">// 编译输入的index.html文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">// webpack输出的目标文件夹路径</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// webpack编译输出的二级文件夹</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Source Maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// https://webpack.js.org/configuration/devtool/#production</span></span><br><span class=\"line\">    devtool: <span class=\"string\">'#source-map'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Gzip off by default as many popular static hosts such as</span></span><br><span class=\"line\">    <span class=\"comment\">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class=\"line\">    <span class=\"comment\">// Before setting to `true`, make sure to:</span></span><br><span class=\"line\">    <span class=\"comment\">// npm install --save-dev compression-webpack-plugin</span></span><br><span class=\"line\">    productionGzip: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>], <span class=\"comment\">// gzip模式下需要压缩的文件的扩展名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Run the build command with an extra argument to</span></span><br><span class=\"line\">    <span class=\"comment\">// View the bundle analyzer report after build finishes:</span></span><br><span class=\"line\">    <span class=\"comment\">// `npm run build --report`</span></span><br><span class=\"line\">    <span class=\"comment\">// Set to `true` or `false` to always turn it on or off</span></span><br><span class=\"line\">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dev-env-js、prod-env-js和test-env-js\"><a href=\"#dev-env-js、prod-env-js和test-env-js\" class=\"headerlink\" title=\"dev.env.js、prod.env.js和test.env.js\"></a>dev.env.js、prod.env.js和test.env.js</h3><p>这三个文件分别设置了开发环境、构建环境以及测试环境的环境变量</p>\n<h4 id=\"dev-env-js\"><a href=\"#dev-env-js\" class=\"headerlink\" title=\"dev.env.js\"></a>dev.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了开发环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> prodEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(prodEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"development\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"prod-env-js\"><a href=\"#prod-env-js\" class=\"headerlink\" title=\"prod.env.js\"></a>prod.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了生产环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"test-env-js\"><a href=\"#test-env-js\" class=\"headerlink\" title=\"test.env.js\"></a>test.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了测试环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(devEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"testing\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>webpack没有想的这么难也没想的这么简单。坊间流传webpack不难，难的是配置。可以把官网文档看一遍然后跟着指南敲一遍，去体会这个打包流程的奥妙，大概能学到些什么。<a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cjg886l.bkt.clouddn.com/webpack.jpg\" alt=\"webpack插图\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近学习单元测试配环境的时候一直出错，然后被指点说应该先去学习webpack工作原理再去配环境。然后就去学webpack了，觉得有必要把webpack配置文件的代码解释记录下来，便于学习。</p>\n<h2 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">└── build</span><br><span class=\"line\">    └── build.js</span><br><span class=\"line\">    ├── check-versions.js</span><br><span class=\"line\">    ├── utils.js</span><br><span class=\"line\">    ├── vue-loader.conf.js</span><br><span class=\"line\">    ├── webpack.base.conf.js</span><br><span class=\"line\">    ├── webpack.dev.conf.js</span><br><span class=\"line\">    ├── webpack.prod.conf.js</span><br><span class=\"line\">    └── webpack.test.conf.js</span><br><span class=\"line\">├── config</span><br><span class=\"line\">    ├── dev.env.js</span><br><span class=\"line\">    ├── index.js</span><br><span class=\"line\">    ├── prod.env.js</span><br><span class=\"line\">    └── test.env.js</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"指令分析\"><a href=\"#指令分析\" class=\"headerlink\" title=\"指令分析\"></a>指令分析</h2><p>首先看<code>package.json</code>里面的<code>script</code>字段</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run dev\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"unit\"</span>: <span class=\"string\">\"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"npm run unit\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint --ext .js,.vue src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"node build/build.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>先看<code>build</code>和<code>dev</code>。运行<code>npm run dev</code>时执行的是<code>build/webpack.dev.conf.js</code>，运行<code>npm run build</code>执行的是<code>build/build.js</code>，然后可以先从这两个文件开始分析。</p>\n<h2 id=\"build文件夹分析\"><a href=\"#build文件夹分析\" class=\"headerlink\" title=\"build文件夹分析\"></a>build文件夹分析</h2><h3 id=\"webpack-dev-conf-js\"><a href=\"#webpack-dev-conf-js\" class=\"headerlink\" title=\"webpack.dev.conf.js\"></a>webpack.dev.conf.js</h3><p>开发环境下执行<code>npm run dev</code>的时候最先执行<code>build/webpack.dev.conf.js</code>文件，该文件主要做以下几件事：</p>\n<ol>\n<li>合并基础的webpack配置</li>\n<li>配置webpack插件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>) <span class=\"comment\">// 一个可以合并数组和对象的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>) <span class=\"comment\">// 合并webpack基础配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>) <span class=\"comment\">// 一个用于生成HTML文件并自动注入依赖文件（link/script）的webpack插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FriendlyErrorsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'friendly-errors-webpack-plugin'</span>) <span class=\"comment\">// 用于更友好地输出webpack的警告、错误等信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> portfinder = <span class=\"built_in\">require</span>(<span class=\"string\">'portfinder'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HOST = process.env.HOST</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = process.env.PORT &amp;&amp; <span class=\"built_in\">Number</span>(process.env.PORT)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123; <span class=\"attr\">sourceMap</span>: config.dev.cssSourceMap, <span class=\"attr\">usePostCSS</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// cheap-module-eval-source-map is faster for development</span></span><br><span class=\"line\">  devtool: config.dev.devtool,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// these devServer options should be customized in /config/index.js</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    clientLogLevel: <span class=\"string\">'warning'</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    compress: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    host: HOST || config.dev.host,</span><br><span class=\"line\">    port: PORT || config.dev.port,</span><br><span class=\"line\">    open: config.dev.autoOpenBrowser,</span><br><span class=\"line\">    overlay: config.dev.errorOverlay</span><br><span class=\"line\">      ? &#123; <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span>, <span class=\"attr\">errors</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">      : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    publicPath: config.dev.assetsPublicPath,</span><br><span class=\"line\">    proxy: config.dev.proxyTable,</span><br><span class=\"line\">    quiet: <span class=\"literal\">true</span>, <span class=\"comment\">// necessary for FriendlyErrorsPlugin</span></span><br><span class=\"line\">    watchOptions: &#123;</span><br><span class=\"line\">      poll: config.dev.poll,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/dev.env'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">// 热更新</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(), <span class=\"comment\">// HMR shows correct file names in console on update.</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">// 后页面中的报错不会阻塞，但是会在编译结束后报错</span></span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class=\"line\">  portfinder.getPort(<span class=\"function\">(<span class=\"params\">err, port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// publish the new Port, necessary for e2e tests</span></span><br><span class=\"line\">      process.env.PORT = port</span><br><span class=\"line\">      <span class=\"comment\">// add port to devServer config</span></span><br><span class=\"line\">      devWebpackConfig.devServer.port = port</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Add FriendlyErrorsPlugin</span></span><br><span class=\"line\">      devWebpackConfig.plugins.push(<span class=\"keyword\">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class=\"line\">        compilationSuccessInfo: &#123;</span><br><span class=\"line\">          messages: [<span class=\"string\">`Your application is running here: http://<span class=\"subst\">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>`</span>],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onErrors: config.dev.notifyOnErrors</span><br><span class=\"line\">        ? utils.createNotifierCallback()</span><br><span class=\"line\">        : <span class=\"literal\">undefined</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(devWebpackConfig)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-base-conf-js\"><a href=\"#webpack-base-conf-js\" class=\"headerlink\" title=\"webpack.base.conf.js\"></a>webpack.base.conf.js</h3><p>从<code>webpack.dev.conf.js</code>代码中看到，使用的webpack配置来自<code>webpack.base.conf.js</code>文件，所以先分析<code>webpack.base.conf.js</code>，这个文件主要完成以下这些事情：</p>\n<ol>\n<li>配置webpack编译入口</li>\n<li>配置webpack输出路径和命名规则</li>\n<li>配置模块resolve规则</li>\n<li>配置不同类型模块的处理规则</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> vueLoaderConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./vue-loader.conf'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给出正确的绝对路径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span> (<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.join(__dirname, <span class=\"string\">'..'</span>, dir)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> createLintingRule = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(js|vue)$/</span>,</span><br><span class=\"line\">  loader: <span class=\"string\">'eslint-loader'</span>,</span><br><span class=\"line\">  enforce: <span class=\"string\">'pre'</span>,</span><br><span class=\"line\">  include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)],</span><br><span class=\"line\">  options: &#123;</span><br><span class=\"line\">    formatter: <span class=\"built_in\">require</span>(<span class=\"string\">'eslint-friendly-formatter'</span>),</span><br><span class=\"line\">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  context: path.resolve(__dirname, <span class=\"string\">'../'</span>),</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack编译入口</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack输出路径和命名规则</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: config.build.assetsRoot, <span class=\"comment\">// webpack输出的目标文件夹路径</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>, <span class=\"comment\">// webpack输出bundle文件命名格式</span></span><br><span class=\"line\">    <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\">    publicPath: process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\">      ? config.build.assetsPublicPath</span><br><span class=\"line\">      : config.dev.assetsPublicPath</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置模块resolve的规则</span></span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.vue'</span>, <span class=\"string\">'.json'</span>], <span class=\"comment\">// 自动resolve的扩展名</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建路径别名</span></span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.esm.js'</span>,</span><br><span class=\"line\">      <span class=\"string\">'@'</span>: resolve(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置不同类型模块的处理规则</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...(config.dev.useEslint ? [createLintingRule()] : []),</span><br><span class=\"line\">      <span class=\"comment\">// 对所有.vue文件使用vue-loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: vueLoaderConfig</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对src和test文件夹下的.js文件使用babel-loader</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对图片资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对音频资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'media/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 对字体资源文件使用url-loader，options.name指明了输出的命名规则</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">          name: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  node: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// prevent webpack from injecting useless setImmediate polyfill because Vue</span></span><br><span class=\"line\">    <span class=\"comment\">// source contains it (although only uses it if it's native).</span></span><br><span class=\"line\">    setImmediate: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"comment\">// prevent webpack from injecting mocks to Node native modules</span></span><br><span class=\"line\">    <span class=\"comment\">// that does not make sense for the client</span></span><br><span class=\"line\">    dgram: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    fs: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    net: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    tls: <span class=\"string\">'empty'</span>,</span><br><span class=\"line\">    child_process: <span class=\"string\">'empty'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"utils-js和vue-loader-conf-js\"><a href=\"#utils-js和vue-loader-conf-js\" class=\"headerlink\" title=\"utils.js和vue-loader.conf.js\"></a>utils.js和vue-loader.conf.js</h3><p>从上面的代码可以看出使用了<code>utils.js</code>和<code>vue-loader.conf.js</code>这两个文件，<code>utils.js</code>主要完成以下三件事：</p>\n<ol>\n<li>配置静态资源路径</li>\n<li>生成cssLoader用于加载.vue文件中的样式</li>\n<li>生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> packageConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">exports.assetsPath = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">_path</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> assetsSubDirectory = process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\">    ? config.build.assetsSubDirectory</span><br><span class=\"line\">    : config.dev.assetsSubDirectory</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> path.posix.join(assetsSubDirectory, _path)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.cssLoaders = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = options || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cssLoader = &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: options.sourceMap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postcssLoader = &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'postcss-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: options.sourceMap</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// generate loader string to be used with extract text plugin</span></span><br><span class=\"line\">  <span class=\"comment\">// 生成与提取文本插件一起使用的加载器字符串</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span> (<span class=\"params\">loader, loaderOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader) &#123;</span><br><span class=\"line\">      loaders.push(&#123;</span><br><span class=\"line\">        loader: loader + <span class=\"string\">'-loader'</span>,</span><br><span class=\"line\">        options: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class=\"line\">          sourceMap: options.sourceMap</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Extract CSS when that option is specified</span></span><br><span class=\"line\">    <span class=\"comment\">// (which is the case during production build)</span></span><br><span class=\"line\">    <span class=\"comment\">// 在指定该选项时提取CSS</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.extract) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">        use: loaders,</span><br><span class=\"line\">        fallback: <span class=\"string\">'vue-style-loader'</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">'vue-style-loader'</span>].concat(loaders)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// https://vue-loader.vuejs.org/en/configurations/extract-css.html</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    css: generateLoaders(),</span><br><span class=\"line\">    postcss: generateLoaders(),</span><br><span class=\"line\">    less: generateLoaders(<span class=\"string\">'less'</span>),</span><br><span class=\"line\">    sass: generateLoaders(<span class=\"string\">'sass'</span>, &#123; <span class=\"attr\">indentedSyntax</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">    scss: generateLoaders(<span class=\"string\">'sass'</span>),</span><br><span class=\"line\">    stylus: generateLoaders(<span class=\"string\">'stylus'</span>),</span><br><span class=\"line\">    styl: generateLoaders(<span class=\"string\">'stylus'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generate loaders for standalone style files (outside of .vue)</span></span><br><span class=\"line\"><span class=\"comment\">//为独立样式文件生成装载器（.vue之外）</span></span><br><span class=\"line\">exports.styleLoaders = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> output = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loaders = exports.cssLoaders(options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> extension <span class=\"keyword\">in</span> loaders) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loader = loaders[extension]</span><br><span class=\"line\">    output.push(&#123;</span><br><span class=\"line\">      test: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\.'</span> + extension + <span class=\"string\">'$'</span>),</span><br><span class=\"line\">      use: loader</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> output</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.createNotifierCallback = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> notifier = <span class=\"built_in\">require</span>(<span class=\"string\">'node-notifier'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">severity, errors</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (severity !== <span class=\"string\">'error'</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> error = errors[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filename = error.file &amp;&amp; error.file.split(<span class=\"string\">'!'</span>).pop()</span><br><span class=\"line\"></span><br><span class=\"line\">    notifier.notify(&#123;</span><br><span class=\"line\">      title: packageConfig.name,</span><br><span class=\"line\">      message: severity + <span class=\"string\">': '</span> + error.name,</span><br><span class=\"line\">      subtitle: filename || <span class=\"string\">''</span>,</span><br><span class=\"line\">      icon: path.join(__dirname, <span class=\"string\">'logo.png'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>vue-loader.js</code>只配置了css加载器以及配置资源路径。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> isProduction = process.env.NODE_ENV === <span class=\"string\">'production'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceMapEnabled = isProduction</span><br><span class=\"line\">  ? config.build.productionSourceMap</span><br><span class=\"line\">  : config.dev.cssSourceMap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// css加载器</span></span><br><span class=\"line\">  loaders: utils.cssLoaders(&#123;</span><br><span class=\"line\">    sourceMap: sourceMapEnabled,</span><br><span class=\"line\">    extract: isProduction</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  cssSourceMap: sourceMapEnabled, <span class=\"comment\">// 源码</span></span><br><span class=\"line\">  cacheBusting: config.dev.cacheBusting, <span class=\"comment\">// 缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// 配置资源路径</span></span><br><span class=\"line\">  transformToRequire: &#123;</span><br><span class=\"line\">    video: [<span class=\"string\">'src'</span>, <span class=\"string\">'poster'</span>],</span><br><span class=\"line\">    source: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">    img: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">    image: <span class=\"string\">'xlink:href'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"build-js\"><a href=\"#build-js\" class=\"headerlink\" title=\"build.js\"></a>build.js</h3><p>开发环境下的配置讲完了，接下来讲构建环境下的配置，构建环境下执行<code>npm run build</code>的时候首先执行的是<code>build.js</code>文件，<code>build.js</code>文件主要做以下几件事：</p>\n<ol>\n<li>loading动画</li>\n<li>删除创建目标文件夹</li>\n<li>webpack编译</li>\n<li>输出信息</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./check-versions'</span>)() <span class=\"comment\">// 检查nodejs和npm版本</span></span><br><span class=\"line\"></span><br><span class=\"line\">process.env.NODE_ENV = <span class=\"string\">'production'</span> <span class=\"comment\">// 当前环境为生产环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个可以调用默认软件打开网址、图片、文件等内容的插件，</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> rm = <span class=\"built_in\">require</span>(<span class=\"string\">'rimraf'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>) <span class=\"comment\">// 用于在控制台输出带颜色字体的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.prod.conf'</span>) <span class=\"comment\">// 引入生产环境webpack配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">'building for production...'</span>)</span><br><span class=\"line\">spinner.start() <span class=\"comment\">// 开启loading动画</span></span><br><span class=\"line\"></span><br><span class=\"line\">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123; <span class=\"comment\">// 递归删除旧的目标文件夹</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  webpack(webpackConfig, (err, stats) =&gt; &#123; <span class=\"comment\">// webpack编译</span></span><br><span class=\"line\">    spinner.stop() <span class=\"comment\">// 停止loading动画</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err <span class=\"comment\">// 没有出错则输出相关信息</span></span><br><span class=\"line\">    process.stdout.write(stats.toString(&#123;</span><br><span class=\"line\">      colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      modules: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      children: <span class=\"literal\">false</span>, <span class=\"comment\">// if you are using ts-loader, setting this to true will make tyescript errors show up during build</span></span><br><span class=\"line\">      chunks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      chunkModules: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;) + <span class=\"string\">'\\n\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stats.hasErrors()) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">'  Build failed with errors.\\n'</span>))</span><br><span class=\"line\">      process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.cyan(<span class=\"string\">'  Build complete.\\n'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.yellow(</span><br><span class=\"line\">      <span class=\"string\">'  Tip: built files are meant to be served over an HTTP server.\\n'</span> +</span><br><span class=\"line\">      <span class=\"string\">'  Opening index.html over file:// won\\'t work.\\n'</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-prod-conf-js\"><a href=\"#webpack-prod-conf-js\" class=\"headerlink\" title=\"webpack.prod.conf.js\"></a>webpack.prod.conf.js</h3><p>构建的时候用到的webpack配置来自<code>webpack.prod.conf.js</code>，这个文件主要完成以下几件事：</p>\n<ol>\n<li>合并基础的webpack配置</li>\n<li>gzip模式下的webpack插件配置</li>\n<li>配置webpack插件</li>\n</ol>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>) <span class=\"comment\">// 用于从webpack生成的bundle中提取文本到特定文件中的插件，可以抽取出css，js文件将其与webpack输出的bundle分离</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> env = process.env.NODE_ENV === <span class=\"string\">'testing'</span></span><br><span class=\"line\">  ? <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">  : <span class=\"built_in\">require</span>(<span class=\"string\">'../config/prod.env'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 合并基础的webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: utils.styleLoaders(&#123;</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      usePostCSS: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: config.build.productionSourceMap ? config.build.devtool : <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack的输出</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: config.build.assetsRoot, <span class=\"comment\">// 编译输出目录</span></span><br><span class=\"line\">    filename: utils.assetsPath(<span class=\"string\">'js/[name].[chunkhash].js'</span>), <span class=\"comment\">// 编译输出文件名格式</span></span><br><span class=\"line\">    chunkFilename: utils.assetsPath(<span class=\"string\">'js/[id].[chunkhash].js'</span>) <span class=\"comment\">// 没有指定输出名的文件输出的文件名格式</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: env</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// 丑化压缩代码插件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">      uglifyOptions: &#123;</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">          warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sourceMap: config.build.productionSourceMap,</span><br><span class=\"line\">      parallel: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// extract css into its own file  抽离css文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">      filename: utils.assetsPath(<span class=\"string\">'css/[name].[contenthash].css'</span>),</span><br><span class=\"line\">      <span class=\"comment\">// Setting the following option to `false` will not extract CSS from codesplit chunks.</span></span><br><span class=\"line\">      <span class=\"comment\">// Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.</span></span><br><span class=\"line\">      <span class=\"comment\">// It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, </span></span><br><span class=\"line\">      <span class=\"comment\">// increasing file size: https://github.com/vuejs-templates/webpack/issues/1110</span></span><br><span class=\"line\">      allChunks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class=\"line\">    <span class=\"comment\">// duplicated CSS from different components can be deduped.</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSPlugin(&#123;</span><br><span class=\"line\">      cssProcessorOptions: config.build.productionSourceMap</span><br><span class=\"line\">        ? &#123; <span class=\"attr\">safe</span>: <span class=\"literal\">true</span>, <span class=\"attr\">map</span>: &#123; <span class=\"attr\">inline</span>: <span class=\"literal\">false</span> &#125; &#125;</span><br><span class=\"line\">        : &#123; <span class=\"attr\">safe</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// generate dist index.html with correct asset hash for caching.</span></span><br><span class=\"line\">    <span class=\"comment\">// you can customize output by editing /index.html</span></span><br><span class=\"line\">    <span class=\"comment\">// see https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      filename: config.build.index,</span><br><span class=\"line\">      template: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      minify: &#123;</span><br><span class=\"line\">        removeComments: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        removeAttributeQuotes: <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"comment\">// more options:</span></span><br><span class=\"line\">        <span class=\"comment\">// https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></span><br><span class=\"line\">      chunksSortMode: <span class=\"string\">'dependency'</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// keep module.id stable when vender modules does not change</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// enable scope hoisting</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class=\"line\">    <span class=\"comment\">// split vendor js into its own file</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'vendor'</span>,</span><br><span class=\"line\">      minChunks (<span class=\"built_in\">module</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// any required modules inside node_modules are extracted to vendor</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource &amp;&amp;</span><br><span class=\"line\">          /\\.js$/.test(<span class=\"built_in\">module</span>.resource) &amp;&amp;</span><br><span class=\"line\">          <span class=\"built_in\">module</span>.resource.indexOf(</span><br><span class=\"line\">            path.join(__dirname, <span class=\"string\">'../node_modules'</span>)</span><br><span class=\"line\">          ) === <span class=\"number\">0</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class=\"line\">    <span class=\"comment\">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'manifest'</span>,</span><br><span class=\"line\">      minChunks: <span class=\"literal\">Infinity</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class=\"line\">    <span class=\"comment\">// in a separate chunk, similar to the vendor chunk</span></span><br><span class=\"line\">    <span class=\"comment\">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class=\"line\">      name: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">async</span>: <span class=\"string\">'vendor-async'</span>,</span><br><span class=\"line\">      children: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// copy custom static assets</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> CopyWebpackPlugin([</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">from</span>: path.resolve(__dirname, <span class=\"string\">'../static'</span>),</span><br><span class=\"line\">        to: config.build.assetsSubDirectory,</span><br><span class=\"line\">        ignore: [<span class=\"string\">'.*'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// gzip模式下需要引入compression插件进行压缩</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (config.build.productionGzip) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> CompressionWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'compression-webpack-plugin'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  webpackConfig.plugins.push(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CompressionWebpackPlugin(&#123;</span><br><span class=\"line\">      asset: <span class=\"string\">'[path].gz[query]'</span>,</span><br><span class=\"line\">      algorithm: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">      test: <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">        <span class=\"string\">'\\\\.('</span> +</span><br><span class=\"line\">        config.build.productionGzipExtensions.join(<span class=\"string\">'|'</span>) +</span><br><span class=\"line\">        <span class=\"string\">')$'</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">      threshold: <span class=\"number\">10240</span>,</span><br><span class=\"line\">      minRatio: <span class=\"number\">0.8</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> BundleAnalyzerPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class=\"line\">  webpackConfig.plugins.push(<span class=\"keyword\">new</span> BundleAnalyzerPlugin())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<h3 id=\"check-versions-js\"><a href=\"#check-versions-js\" class=\"headerlink\" title=\"check-versions.js\"></a>check-versions.js</h3><p>从<code>build.js</code>文件可以看出引用了<code>check-versions.js</code>，从名字可以看出这个文件大概做的事情就是确认<code>npm</code>和<code>node</code>版本。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>) <span class=\"comment\">// 用于在控制台输出带颜色字体的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> semver = <span class=\"built_in\">require</span>(<span class=\"string\">'semver'</span>) <span class=\"comment\">// 语义化版本检查插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> packageConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>) <span class=\"comment\">// 引入package.json</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> shell = <span class=\"built_in\">require</span>(<span class=\"string\">'shelljs'</span>) <span class=\"comment\">// 执行Unix命令行的插件</span></span><br><span class=\"line\"><span class=\"comment\">// 开辟子进程执行指令cmd并返回结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec</span> (<span class=\"params\">cmd</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).execSync(cmd).toString().trim()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// node和npm版本需求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versionRequirements = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'node'</span>,</span><br><span class=\"line\">    currentVersion: semver.clean(process.version),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.node</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shell.which(<span class=\"string\">'npm'</span>)) &#123;</span><br><span class=\"line\">  versionRequirements.push(&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'npm'</span>,</span><br><span class=\"line\">    currentVersion: exec(<span class=\"string\">'npm --version'</span>),</span><br><span class=\"line\">    versionRequirement: packageConfig.engines.npm</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> warnings = []</span><br><span class=\"line\"><span class=\"comment\">// 依次判断版本是否符合要求</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; versionRequirements.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mod = versionRequirements[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class=\"line\">      warnings.push(mod.name + <span class=\"string\">': '</span> +</span><br><span class=\"line\">        chalk.red(mod.currentVersion) + <span class=\"string\">' should be '</span> +</span><br><span class=\"line\">        chalk.green(mod.versionRequirement)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// 如果有警告则将其输出到控制台</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (warnings.length) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.yellow(<span class=\"string\">'To use this template, you must update following to modules:'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; warnings.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> warning = warnings[i]</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'  '</span> + warning)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log()</span><br><span class=\"line\">    process.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"webpack-test-conf-js\"><a href=\"#webpack-test-conf-js\" class=\"headerlink\" title=\"webpack.test.conf.js\"></a>webpack.test.conf.js</h3><p>这个文件是单元测试环境的webpack配置文件,该配置是在<code>webpack.base.conf.js</code>的基础上做进一步完善。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseWebpackConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.base.conf'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 合并基础的webpack配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'#inline-source-map'</span>,</span><br><span class=\"line\">  resolveLoader: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'scss-loader'</span>: <span class=\"string\">'sass-loader'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 配置webpack插件</span></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'../config/test.env'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// no need for app entry during tests</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> webpackConfig.entry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>\n<h2 id=\"config文件夹分析\"><a href=\"#config文件夹分析\" class=\"headerlink\" title=\"config文件夹分析\"></a>config文件夹分析</h2><h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><p>config文件夹下最主要的文件是<code>index.js</code>，在这里面描述了三种环境下的配置，分别为开发、构建和测试。</p>\n<p>代码注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"comment\">// Template version: 1.2.7</span></span><br><span class=\"line\"><span class=\"comment\">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开发过程中使用的配置</span></span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// webpack编译输出的二级文件夹</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\">    proxyTable: &#123;&#125;,<span class=\"comment\">// 请求代理表，在这里可以配置特定的请求代理到对应的API接口，例如将'/api/xxx'代理到'www.example.com/api/xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Various Dev Server settings</span></span><br><span class=\"line\">    <span class=\"comment\">// 各种开发服务器设置</span></span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>, <span class=\"comment\">// can be overwritten by process.env.HOST</span></span><br><span class=\"line\">    port: <span class=\"number\">8080</span>, <span class=\"comment\">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class=\"line\">    autoOpenBrowser: <span class=\"literal\">false</span>, <span class=\"comment\">// 启动dev-server之后不自动打开浏览器</span></span><br><span class=\"line\">    errorOverlay: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    notifyOnErrors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    poll: <span class=\"literal\">false</span>, <span class=\"comment\">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use Eslint Loader?</span></span><br><span class=\"line\">    <span class=\"comment\">// If true, your code will be linted during bundling and</span></span><br><span class=\"line\">    <span class=\"comment\">// linting errors and warnings will be shown in the console.</span></span><br><span class=\"line\">    useEslint: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// If true, eslint errors and warnings will also be shown in the error overlay</span></span><br><span class=\"line\">    <span class=\"comment\">// in the browser.</span></span><br><span class=\"line\">    showEslintErrorsInOverlay: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Source Maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class=\"line\">    devtool: <span class=\"string\">'eval-source-map'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If you have problems debugging vue-files in devtools,</span></span><br><span class=\"line\">    <span class=\"comment\">// set this to false - it *may* help</span></span><br><span class=\"line\">    <span class=\"comment\">// https://vue-loader.vuejs.org/en/options.html#cachebusting</span></span><br><span class=\"line\">    cacheBusting: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// CSS Sourcemaps off by default because relative paths are \"buggy\"</span></span><br><span class=\"line\">    <span class=\"comment\">// with this option, according to the CSS-Loader README</span></span><br><span class=\"line\">    <span class=\"comment\">// (https://github.com/webpack/css-loader#sourcemaps)</span></span><br><span class=\"line\">    <span class=\"comment\">// In our experience, they generally work as expected,</span></span><br><span class=\"line\">    <span class=\"comment\">// just be aware of this issue when enabling this option.</span></span><br><span class=\"line\">    cssSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"comment\">// 构建产品时使用的配置</span></span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Template for index.html</span></span><br><span class=\"line\">    index: path.resolve(__dirname, <span class=\"string\">'../dist/index.html'</span>), <span class=\"comment\">// 编译输入的index.html文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, <span class=\"string\">'../dist'</span>), <span class=\"comment\">// webpack输出的目标文件夹路径</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>, <span class=\"comment\">// webpack编译输出的二级文件夹</span></span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>, <span class=\"comment\">// webpack编译输出的发布路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Source Maps</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    productionSourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// https://webpack.js.org/configuration/devtool/#production</span></span><br><span class=\"line\">    devtool: <span class=\"string\">'#source-map'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Gzip off by default as many popular static hosts such as</span></span><br><span class=\"line\">    <span class=\"comment\">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class=\"line\">    <span class=\"comment\">// Before setting to `true`, make sure to:</span></span><br><span class=\"line\">    <span class=\"comment\">// npm install --save-dev compression-webpack-plugin</span></span><br><span class=\"line\">    productionGzip: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    productionGzipExtensions: [<span class=\"string\">'js'</span>, <span class=\"string\">'css'</span>], <span class=\"comment\">// gzip模式下需要压缩的文件的扩展名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Run the build command with an extra argument to</span></span><br><span class=\"line\">    <span class=\"comment\">// View the bundle analyzer report after build finishes:</span></span><br><span class=\"line\">    <span class=\"comment\">// `npm run build --report`</span></span><br><span class=\"line\">    <span class=\"comment\">// Set to `true` or `false` to always turn it on or off</span></span><br><span class=\"line\">    bundleAnalyzerReport: process.env.npm_config_report</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dev-env-js、prod-env-js和test-env-js\"><a href=\"#dev-env-js、prod-env-js和test-env-js\" class=\"headerlink\" title=\"dev.env.js、prod.env.js和test.env.js\"></a>dev.env.js、prod.env.js和test.env.js</h3><p>这三个文件分别设置了开发环境、构建环境以及测试环境的环境变量</p>\n<h4 id=\"dev-env-js\"><a href=\"#dev-env-js\" class=\"headerlink\" title=\"dev.env.js\"></a>dev.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了开发环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> prodEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./prod.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(prodEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"development\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"prod-env-js\"><a href=\"#prod-env-js\" class=\"headerlink\" title=\"prod.env.js\"></a>prod.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了生产环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"test-env-js\"><a href=\"#test-env-js\" class=\"headerlink\" title=\"test.env.js\"></a>test.env.js</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置了测试环境的环境变量</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> devEnv = <span class=\"built_in\">require</span>(<span class=\"string\">'./dev.env'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(devEnv, &#123;</span><br><span class=\"line\">  NODE_ENV: <span class=\"string\">'\"testing\"'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>webpack没有想的这么难也没想的这么简单。坊间流传webpack不难，难的是配置。可以把官网文档看一遍然后跟着指南敲一遍，去体会这个打包流程的奥妙，大概能学到些什么。<a href=\"https://doc.webpack-china.org/concepts/\" target=\"_blank\" rel=\"noopener\">webpack中文文档</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjcx18d000000flfyduuaen48","category_id":"cjcx18d0f0003flfyk8tcm82h","_id":"cjcx18d0w000cflfy6hjgvdom"},{"post_id":"cjcx18d0b0002flfytoq7k9oh","category_id":"cjcx18d0r0008flfylgt5qni7","_id":"cjcx18d11000jflfy9kksxx7x"},{"post_id":"cjcx18d0y000fflfyczey3stw","category_id":"cjcx18d0x000dflfya4wjqkfj","_id":"cjcx18d14000oflfyjbue2sz5"},{"post_id":"cjcx18d0h0005flfyjstm1dqf","category_id":"cjcx18d0x000dflfya4wjqkfj","_id":"cjcx18d16000sflfya776h8vj"},{"post_id":"cjcx18d10000hflfyc3cudzom","category_id":"cjcx18d0f0003flfyk8tcm82h","_id":"cjcx18d1a000uflfyow7s6dhq"},{"post_id":"cjcx18d0p0006flfyz17k64fg","category_id":"cjcx18d11000kflfykyr7uph2","_id":"cjcx18d1c000xflfyk05p2rm6"},{"post_id":"cjcx18d13000nflfyf4ejy6g4","category_id":"cjcx18d0x000dflfya4wjqkfj","_id":"cjcx18d1e0011flfy7zssqxud"},{"post_id":"cjcx18d0r0007flfya6tlfrz8","category_id":"cjcx18d0x000dflfya4wjqkfj","_id":"cjcx18d1f0015flfyduqzncwj"},{"post_id":"cjcx18d0s000aflfyl356ue03","category_id":"cjcx18d11000kflfykyr7uph2","_id":"cjcx18d1g0019flfy97hr4kkx"},{"post_id":"cjcx18d1g0018flfygef8rj7a","category_id":"cjcx18d1e0012flfyikc4yjfb","_id":"cjcx18d1l001gflfy4wz790te"},{"post_id":"cjcx18d0u000bflfy4nmycxof","category_id":"cjcx18d1e0012flfyikc4yjfb","_id":"cjcx18d1n001lflfyo8d5jcny"},{"post_id":"cjcx18d1h001aflfypopgyqk1","category_id":"cjcx18d1e0012flfyikc4yjfb","_id":"cjcx18d1p001nflfy917et21q"},{"post_id":"cjcx18d1i001dflfy3e7kukl4","category_id":"cjcx18d0f0003flfyk8tcm82h","_id":"cjcx18d1q001qflfyy7gp643r"},{"post_id":"cjcx18d12000mflfye7q2hzke","category_id":"cjcx18d1e0012flfyikc4yjfb","_id":"cjcx18d1r001sflfyxq195cw1"},{"post_id":"cjcx18d1l001fflfyh4s9mugg","category_id":"cjcx18d11000kflfykyr7uph2","_id":"cjcx18d1s001uflfya50fxcul"},{"post_id":"cjcx18d1m001kflfy1ofx8sk6","category_id":"cjcx18d0x000dflfya4wjqkfj","_id":"cjcx18d1t001wflfyw9oy027m"},{"post_id":"cjcx18d14000rflfy3qc9tggu","category_id":"cjcx18d1l001hflfy79etdhld","_id":"cjcx18d1u001zflfyip93xco6"},{"post_id":"cjcx18d1o001mflfyawpb7t5v","category_id":"cjcx18d0f0003flfyk8tcm82h","_id":"cjcx18d1u0022flfy01rqrnd2"},{"post_id":"cjcx18d1p001pflfyolnlp2hu","category_id":"cjcx18d0f0003flfyk8tcm82h","_id":"cjcx18d1v0024flfylvrwd392"},{"post_id":"cjcx18d18000tflfyvq63nkki","category_id":"cjcx18d1p001oflfycuejxm7t","_id":"cjcx18d1w0026flfylb7owxws"},{"post_id":"cjcx18d1b000wflfyhc5fsyn8","category_id":"cjcx18d1r001tflfymzy2i3qg","_id":"cjcx18d1w0028flfyigptw4kx"},{"post_id":"cjcx18d1d0010flfy8te3cc5i","category_id":"cjcx18d1r001tflfymzy2i3qg","_id":"cjcx18d1w002aflfym4yw6oxz"},{"post_id":"cjcx18d1e0014flfyywz9ddx8","category_id":"cjd2w72n70000qswuaom3lwyl","_id":"cjd2w72ng0003qswu2a2wwd8v"}],"PostTag":[{"post_id":"cjcx18d000000flfyduuaen48","tag_id":"cjcx18d0h0004flfyzmpbhd9y","_id":"cjcx18d10000gflfyxuejgdap"},{"post_id":"cjcx18d000000flfyduuaen48","tag_id":"cjcx18d0r0009flfy7jm56o84","_id":"cjcx18d11000iflfyb69nz14l"},{"post_id":"cjcx18d0b0002flfytoq7k9oh","tag_id":"cjcx18d0x000eflfyuzga8eqf","_id":"cjcx18d1d000zflfy6gkmpwq8"},{"post_id":"cjcx18d0b0002flfytoq7k9oh","tag_id":"cjcx18d11000lflfy42src8zy","_id":"cjcx18d1e0013flfyokggeo1w"},{"post_id":"cjcx18d0b0002flfytoq7k9oh","tag_id":"cjcx18d14000qflfypr55nzk8","_id":"cjcx18d1g0017flfy4hyseoiz"},{"post_id":"cjcx18d0h0005flfyjstm1dqf","tag_id":"cjcx18d1d000yflfy0dl0qbmr","_id":"cjcx18d1k001eflfyrpuzsna3"},{"post_id":"cjcx18d0h0005flfyjstm1dqf","tag_id":"cjcx18d1f0016flfykzfr8m3x","_id":"cjcx18d1m001iflfylrhkwy9o"},{"post_id":"cjcx18d0p0006flfyz17k64fg","tag_id":"cjcx18d1i001cflfycilotex6","_id":"cjcx18d1t001xflfylxf4jqtm"},{"post_id":"cjcx18d0p0006flfyz17k64fg","tag_id":"cjcx18d1m001jflfygokf4fxd","_id":"cjcx18d1u0020flfye1kwenls"},{"post_id":"cjcx18d0p0006flfyz17k64fg","tag_id":"cjcx18d1q001rflfygbg1yhzb","_id":"cjcx18d1u0023flfyjybx5chw"},{"post_id":"cjcx18d0r0007flfya6tlfrz8","tag_id":"cjcx18d1s001vflfy6w36ri8t","_id":"cjcx18d1w0027flfybjz0320d"},{"post_id":"cjcx18d0r0007flfya6tlfrz8","tag_id":"cjcx18d1u0021flfyxf058z07","_id":"cjcx18d1w0029flfy1vps6qtv"},{"post_id":"cjcx18d0s000aflfyl356ue03","tag_id":"cjcx18d1w0025flfy6afyq5rj","_id":"cjcx18d1y002dflfyt6olqv93"},{"post_id":"cjcx18d0s000aflfyl356ue03","tag_id":"cjcx18d1w002bflfya39z2aba","_id":"cjcx18d1y002eflfyojnmthod"},{"post_id":"cjcx18d0u000bflfy4nmycxof","tag_id":"cjcx18d1x002cflfynrrhkoss","_id":"cjcx18d1z002hflfyjvoy3pdb"},{"post_id":"cjcx18d0u000bflfy4nmycxof","tag_id":"cjcx18d1y002fflfyja6z5x0e","_id":"cjcx18d1z002iflfyfd08a3f1"},{"post_id":"cjcx18d0y000fflfyczey3stw","tag_id":"cjcx18d1f0016flfykzfr8m3x","_id":"cjcx18d1z002lflfy925pob1d"},{"post_id":"cjcx18d0y000fflfyczey3stw","tag_id":"cjcx18d1z002jflfy4smq4552","_id":"cjcx18d1z002mflfyg27hyx2e"},{"post_id":"cjcx18d10000hflfyc3cudzom","tag_id":"cjcx18d1z002kflfycl005jiw","_id":"cjcx18d1z002oflfydmmk3kvp"},{"post_id":"cjcx18d12000mflfye7q2hzke","tag_id":"cjcx18d1z002nflfyhbz632ou","_id":"cjcx18d20002sflfyg5mfue2b"},{"post_id":"cjcx18d12000mflfye7q2hzke","tag_id":"cjcx18d20002pflfy8eff2zp4","_id":"cjcx18d20002tflfys18jesnc"},{"post_id":"cjcx18d12000mflfye7q2hzke","tag_id":"cjcx18d20002qflfyx2ufh8f6","_id":"cjcx18d20002vflfy53002c3h"},{"post_id":"cjcx18d13000nflfyf4ejy6g4","tag_id":"cjcx18d20002rflfy7or4lw9r","_id":"cjcx18d21002xflfywpnl35ps"},{"post_id":"cjcx18d13000nflfyf4ejy6g4","tag_id":"cjcx18d20002uflfy04or3jzp","_id":"cjcx18d21002yflfyoc1mqd6s"},{"post_id":"cjcx18d14000rflfy3qc9tggu","tag_id":"cjcx18d20002wflfyad0tkcnc","_id":"cjcx18d210031flfyzqufesfr"},{"post_id":"cjcx18d14000rflfy3qc9tggu","tag_id":"cjcx18d21002zflfy0x05mp1u","_id":"cjcx18d210032flfy544u9twu"},{"post_id":"cjcx18d18000tflfyvq63nkki","tag_id":"cjcx18d210030flfy7zscctju","_id":"cjcx18d220034flfyzxkh1dhb"},{"post_id":"cjcx18d1b000wflfyhc5fsyn8","tag_id":"cjcx18d220033flfyyptgvw11","_id":"cjcx18d220036flfy7xajs98i"},{"post_id":"cjcx18d1d0010flfy8te3cc5i","tag_id":"cjcx18d220035flfys22ktoxv","_id":"cjcx18d220038flfys2kvyknm"},{"post_id":"cjcx18d1g0018flfygef8rj7a","tag_id":"cjcx18d1y002fflfyja6z5x0e","_id":"cjcx18d23003bflfyqictbcpv"},{"post_id":"cjcx18d1g0018flfygef8rj7a","tag_id":"cjcx18d230039flfy7act0wxs","_id":"cjcx18d23003cflfyqe35amvk"},{"post_id":"cjcx18d1h001aflfypopgyqk1","tag_id":"cjcx18d23003aflfyhcb9extj","_id":"cjcx18d24003hflfyaecl6w51"},{"post_id":"cjcx18d1h001aflfypopgyqk1","tag_id":"cjcx18d23003dflfy1r2wtfda","_id":"cjcx18d24003iflfy8682uvlp"},{"post_id":"cjcx18d1h001aflfypopgyqk1","tag_id":"cjcx18d23003eflfyb25jyu5u","_id":"cjcx18d25003kflfyh74lx4ed"},{"post_id":"cjcx18d1h001aflfypopgyqk1","tag_id":"cjcx18d1y002fflfyja6z5x0e","_id":"cjcx18d25003lflfy981elbtf"},{"post_id":"cjcx18d1i001dflfy3e7kukl4","tag_id":"cjcx18d24003gflfyqcgdfzq4","_id":"cjcx18d25003nflfyi1to7md8"},{"post_id":"cjcx18d1l001fflfyh4s9mugg","tag_id":"cjcx18d24003jflfyy3kijdmv","_id":"cjcx18d26003oflfyetb6nb19"},{"post_id":"cjcx18d1m001kflfy1ofx8sk6","tag_id":"cjcx18d25003mflfyxgt3cpm3","_id":"cjcx18d26003qflfyqpbkl36d"},{"post_id":"cjcx18d1o001mflfyawpb7t5v","tag_id":"cjcx18d26003pflfyp6ok8s0p","_id":"cjcx18d26003sflfym1kaovb0"},{"post_id":"cjcx18d1p001pflfyolnlp2hu","tag_id":"cjcx18d26003rflfy9mqwflri","_id":"cjcx18d27003tflfyveo5njq3"},{"post_id":"cjcx18d1e0014flfyywz9ddx8","tag_id":"cjd2w72nd0001qswufg4waqh3","_id":"cjd2w72nh0004qswunlneqsa3"},{"post_id":"cjcx18d1e0014flfyywz9ddx8","tag_id":"cjd2w72ne0002qswucb4k58gg","_id":"cjd2w72ni0005qswunglhf4g0"}],"Tag":[{"name":"Typora","_id":"cjcx18d0h0004flfyzmpbhd9y"},{"name":"markdown","_id":"cjcx18d0r0009flfy7jm56o84"},{"name":"登山","_id":"cjcx18d0x000eflfyuzga8eqf"},{"name":"梧桐山","_id":"cjcx18d11000lflfy42src8zy"},{"name":"深圳最高山","_id":"cjcx18d14000qflfypr55nzk8"},{"name":"单恋","_id":"cjcx18d1d000yflfy0dl0qbmr"},{"name":"东野圭吾","_id":"cjcx18d1f0016flfykzfr8m3x"},{"name":"element-ui","_id":"cjcx18d1i001cflfycilotex6"},{"name":"封装","_id":"cjcx18d1m001jflfygokf4fxd"},{"name":"表单校验","_id":"cjcx18d1q001rflfygbg1yhzb"},{"name":"蔡澜","_id":"cjcx18d1s001vflfy6w36ri8t"},{"name":"读后感","_id":"cjcx18d1u0021flfyxf058z07"},{"name":"element","_id":"cjcx18d1w0025flfy6afyq5rj"},{"name":"表单验证","_id":"cjcx18d1w002bflfya39z2aba"},{"name":"ES6","_id":"cjcx18d1x002cflfynrrhkoss"},{"name":"单元测试","_id":"cjcx18d1y002fflfyja6z5x0e"},{"name":"恶意","_id":"cjcx18d1z002jflfy4smq4552"},{"name":"github","_id":"cjcx18d1z002kflfycl005jiw"},{"name":"jenkins","_id":"cjcx18d1z002nflfyhbz632ou"},{"name":"持续集成","_id":"cjcx18d20002pflfy8eff2zp4"},{"name":"自动化测试","_id":"cjcx18d20002qflfyx2ufh8f6"},{"name":"读书","_id":"cjcx18d20002rflfy7or4lw9r"},{"name":"柴静","_id":"cjcx18d20002uflfy04or3jzp"},{"name":"毛孔","_id":"cjcx18d20002wflfyad0tkcnc"},{"name":"护肤","_id":"cjcx18d21002zflfy0x05mp1u"},{"name":"2017","_id":"cjcx18d210030flfy7zscctju"},{"name":"正则表达式","_id":"cjcx18d220033flfyyptgvw11"},{"name":"正则基本使用","_id":"cjcx18d220035flfys22ktoxv"},{"name":"unit test","_id":"cjcx18d230039flfy7act0wxs"},{"name":"karma","_id":"cjcx18d23003aflfyhcb9extj"},{"name":"mocha","_id":"cjcx18d23003dflfy1r2wtfda"},{"name":"chai","_id":"cjcx18d23003eflfyb25jyu5u"},{"name":"vue 教程","_id":"cjcx18d24003gflfyqcgdfzq4"},{"name":"validate 表单验证插件","_id":"cjcx18d24003jflfyy3kijdmv"},{"name":"web前端","_id":"cjcx18d25003mflfyxgt3cpm3"},{"name":"xmind","_id":"cjcx18d26003pflfyp6ok8s0p"},{"name":"webpack","_id":"cjcx18d26003rflfy9mqwflri"},{"name":"git","_id":"cjd2w72nd0001qswufg4waqh3"},{"name":"submodule","_id":"cjd2w72ne0002qswucb4k58gg"}]}}